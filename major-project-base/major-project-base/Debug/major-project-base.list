
major-project-base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08007e88  08007e88  00008e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fa0  08007fa0  000090a8  2**0
                  CONTENTS
  4 .ARM          00000008  08007fa0  08007fa0  00008fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fa8  08007fa8  000090a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fa8  08007fa8  00008fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fac  08007fac  00008fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08007fb0  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090a8  2**0
                  CONTENTS
 10 .bss          000005b0  200000a8  200000a8  000090a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000658  20000658  000090a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001306d  00000000  00000000  000090d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002987  00000000  00000000  0001c145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  0001ead0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7f  00000000  00000000  0001fc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ec84  00000000  00000000  000209a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015acc  00000000  00000000  0003f62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b97dd  00000000  00000000  000550f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e8d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005388  00000000  00000000  0010e918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00113ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e70 	.word	0x08007e70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08007e70 	.word	0x08007e70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <enable_clocks>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <enable_clocks+0x1c>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <enable_clocks+0x1c>)
 8000b92:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 8000b96:	6153      	str	r3, [r2, #20]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <initialise_board+0x20>)
 8000bb0:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000bb8:	801a      	strh	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	48001002 	.word	0x48001002

08000bcc <HAL_TIM_IC_CaptureCallback>:

uint16_t rise_time = 0;
uint16_t last_period = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08c      	sub	sp, #48	@ 0x30
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[32];
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d127      	bne.n	8000c2e <HAL_TIM_IC_CaptureCallback+0x62>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7f1b      	ldrb	r3, [r3, #28]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d123      	bne.n	8000c2e <HAL_TIM_IC_CaptureCallback+0x62>
	{
		uint16_t IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000be6:	2100      	movs	r1, #0
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f004 feb9 	bl	8005960 <HAL_TIM_ReadCapturedValue>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	85fb      	strh	r3, [r7, #46]	@ 0x2e

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 8000bf2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfa:	f001 fc35 	bl	8002468 <HAL_GPIO_ReadPin>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d103      	bne.n	8000c0c <HAL_TIM_IC_CaptureCallback+0x40>
			rise_time = IC_Val1;
 8000c04:	4a0d      	ldr	r2, [pc, #52]	@ (8000c3c <HAL_TIM_IC_CaptureCallback+0x70>)
 8000c06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000c08:	8013      	strh	r3, [r2, #0]
 8000c0a:	e006      	b.n	8000c1a <HAL_TIM_IC_CaptureCallback+0x4e>
		else
			last_period = IC_Val1 - rise_time;
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <HAL_TIM_IC_CaptureCallback+0x70>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000c18:	801a      	strh	r2, [r3, #0]

		diff = IC_Val1 - last_capture;
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000c26:	801a      	strh	r2, [r3, #0]
		last_capture = IC_Val1;
 8000c28:	4a06      	ldr	r2, [pc, #24]	@ (8000c44 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000c2a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000c2c:	8013      	strh	r3, [r2, #0]
	}
}
 8000c2e:	bf00      	nop
 8000c30:	3730      	adds	r7, #48	@ 0x30
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40012c00 	.word	0x40012c00
 8000c3c:	20000504 	.word	0x20000504
 8000c40:	20000506 	.word	0x20000506
 8000c44:	20000500 	.word	0x20000500
 8000c48:	20000502 	.word	0x20000502

08000c4c <read_and_print_lidar>:
#define SERVO_H_MAX   1800

// Vertical: 0°→90°
#define SERVO_V_MIN   0
#define SERVO_V_MAX   1400
void read_and_print_lidar(uint16_t vert_pwm, uint16_t horz_pwm) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b09a      	sub	sp, #104	@ 0x68
 8000c50:	af04      	add	r7, sp, #16
 8000c52:	4603      	mov	r3, r0
 8000c54:	460a      	mov	r2, r1
 8000c56:	80fb      	strh	r3, [r7, #6]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	80bb      	strh	r3, [r7, #4]
    uint8_t cmd = 0x04;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    // Trigger LiDAR measurement
    if (HAL_I2C_Mem_Write(&hi2c1, (0x62 << 1), 0x00, 1, &cmd, 1, 100) != HAL_OK) {
 8000c62:	2364      	movs	r3, #100	@ 0x64
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	2301      	movs	r3, #1
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	f107 0351 	add.w	r3, r7, #81	@ 0x51
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	2301      	movs	r3, #1
 8000c72:	2200      	movs	r2, #0
 8000c74:	21c4      	movs	r1, #196	@ 0xc4
 8000c76:	4845      	ldr	r0, [pc, #276]	@ (8000d8c <read_and_print_lidar+0x140>)
 8000c78:	f001 fcb6 	bl	80025e8 <HAL_I2C_Mem_Write>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d004      	beq.n	8000c8c <read_and_print_lidar+0x40>
        SerialOutputString("LiDAR trigger failed\r\n", &USART1_PORT);
 8000c82:	4943      	ldr	r1, [pc, #268]	@ (8000d90 <read_and_print_lidar+0x144>)
 8000c84:	4843      	ldr	r0, [pc, #268]	@ (8000d94 <read_and_print_lidar+0x148>)
 8000c86:	f000 fe6a 	bl	800195e <SerialOutputString>
        return;
 8000c8a:	e07b      	b.n	8000d84 <read_and_print_lidar+0x138>
    }
    HAL_Delay(25);
 8000c8c:	2019      	movs	r0, #25
 8000c8e:	f001 f93b 	bl	8001f08 <HAL_Delay>
    // Wait for ready or timeout
    uint32_t start = HAL_GetTick();
 8000c92:	f001 f92d 	bl	8001ef0 <HAL_GetTick>
 8000c96:	6578      	str	r0, [r7, #84]	@ 0x54
    uint8_t status = 0x01;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    do {
        HAL_I2C_Mem_Read(&hi2c1, (0x62 << 1) | 0x01, 0x01, 1, &status, 1, 100);
 8000c9e:	2364      	movs	r3, #100	@ 0x64
 8000ca0:	9302      	str	r3, [sp, #8]
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2301      	movs	r3, #1
 8000cae:	2201      	movs	r2, #1
 8000cb0:	21c5      	movs	r1, #197	@ 0xc5
 8000cb2:	4836      	ldr	r0, [pc, #216]	@ (8000d8c <read_and_print_lidar+0x140>)
 8000cb4:	f001 fdac 	bl	8002810 <HAL_I2C_Mem_Read>
    } while ((status & 0x01) && ((HAL_GetTick() - start) < 100));
 8000cb8:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <read_and_print_lidar+0x86>
 8000cc4:	f001 f914 	bl	8001ef0 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b63      	cmp	r3, #99	@ 0x63
 8000cd0:	d9e5      	bls.n	8000c9e <read_and_print_lidar+0x52>
    if (status & 0x01) {
 8000cd2:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d016      	beq.n	8000d0c <read_and_print_lidar+0xc0>
        // soft reset on hang
        uint8_t reset_cmd = 0x00;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	72fb      	strb	r3, [r7, #11]
        HAL_I2C_Mem_Write(&hi2c1, (0x62 << 1), 0x00, 1, &reset_cmd, 1, 100);
 8000ce2:	2364      	movs	r3, #100	@ 0x64
 8000ce4:	9302      	str	r3, [sp, #8]
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	9301      	str	r3, [sp, #4]
 8000cea:	f107 030b 	add.w	r3, r7, #11
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	21c4      	movs	r1, #196	@ 0xc4
 8000cf6:	4825      	ldr	r0, [pc, #148]	@ (8000d8c <read_and_print_lidar+0x140>)
 8000cf8:	f001 fc76 	bl	80025e8 <HAL_I2C_Mem_Write>
        HAL_Delay(50);
 8000cfc:	2032      	movs	r0, #50	@ 0x32
 8000cfe:	f001 f903 	bl	8001f08 <HAL_Delay>
        SerialOutputString("LiDAR timeout, reset\r\n", &USART1_PORT);
 8000d02:	4923      	ldr	r1, [pc, #140]	@ (8000d90 <read_and_print_lidar+0x144>)
 8000d04:	4824      	ldr	r0, [pc, #144]	@ (8000d98 <read_and_print_lidar+0x14c>)
 8000d06:	f000 fe2a 	bl	800195e <SerialOutputString>
 8000d0a:	e03b      	b.n	8000d84 <read_and_print_lidar+0x138>
        return;
    }
    // Read distance MSB/LSB
    uint8_t msb = 0, lsb = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    HAL_I2C_Mem_Read(&hi2c1, (0x62 << 1) | 0x01, 0x0F, 1, &msb, 1, 100);
 8000d18:	2364      	movs	r3, #100	@ 0x64
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	9301      	str	r3, [sp, #4]
 8000d20:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2301      	movs	r3, #1
 8000d28:	220f      	movs	r2, #15
 8000d2a:	21c5      	movs	r1, #197	@ 0xc5
 8000d2c:	4817      	ldr	r0, [pc, #92]	@ (8000d8c <read_and_print_lidar+0x140>)
 8000d2e:	f001 fd6f 	bl	8002810 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, (0x62 << 1) | 0x01, 0x10, 1, &lsb, 1, 100);
 8000d32:	2364      	movs	r3, #100	@ 0x64
 8000d34:	9302      	str	r3, [sp, #8]
 8000d36:	2301      	movs	r3, #1
 8000d38:	9301      	str	r3, [sp, #4]
 8000d3a:	f107 034e 	add.w	r3, r7, #78	@ 0x4e
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2301      	movs	r3, #1
 8000d42:	2210      	movs	r2, #16
 8000d44:	21c5      	movs	r1, #197	@ 0xc5
 8000d46:	4811      	ldr	r0, [pc, #68]	@ (8000d8c <read_and_print_lidar+0x140>)
 8000d48:	f001 fd62 	bl	8002810 <HAL_I2C_Mem_Read>
    uint16_t distance = (msb << 8) | lsb;
 8000d4c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b21a      	sxth	r2, r3
 8000d54:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    // Print servo positions and distance
    char buf[64];
    sprintf(buf, "V:%4u H:%4u D:%4ucm\r\n", vert_pwm, horz_pwm, distance);
 8000d62:	88fa      	ldrh	r2, [r7, #6]
 8000d64:	88b9      	ldrh	r1, [r7, #4]
 8000d66:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000d6a:	f107 000c 	add.w	r0, r7, #12
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	460b      	mov	r3, r1
 8000d72:	490a      	ldr	r1, [pc, #40]	@ (8000d9c <read_and_print_lidar+0x150>)
 8000d74:	f005 fc7e 	bl	8006674 <siprintf>
    SerialOutputString(buf, &USART1_PORT);
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4904      	ldr	r1, [pc, #16]	@ (8000d90 <read_and_print_lidar+0x144>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fded 	bl	800195e <SerialOutputString>
}
 8000d84:	3758      	adds	r7, #88	@ 0x58
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000c4 	.word	0x200000c4
 8000d90:	20000000 	.word	0x20000000
 8000d94:	08007e88 	.word	0x08007e88
 8000d98:	08007ea0 	.word	0x08007ea0
 8000d9c:	08007eb8 	.word	0x08007eb8

08000da0 <angle_to_pwm>:
static inline uint16_t angle_to_pwm(uint16_t angle, uint16_t min, uint16_t max, uint16_t max_angle) {
 8000da0:	b490      	push	{r4, r7}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4604      	mov	r4, r0
 8000da8:	4608      	mov	r0, r1
 8000daa:	4611      	mov	r1, r2
 8000dac:	461a      	mov	r2, r3
 8000dae:	4623      	mov	r3, r4
 8000db0:	80fb      	strh	r3, [r7, #6]
 8000db2:	4603      	mov	r3, r0
 8000db4:	80bb      	strh	r3, [r7, #4]
 8000db6:	460b      	mov	r3, r1
 8000db8:	807b      	strh	r3, [r7, #2]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	803b      	strh	r3, [r7, #0]
    if (angle > max_angle) angle = max_angle;
 8000dbe:	88fa      	ldrh	r2, [r7, #6]
 8000dc0:	883b      	ldrh	r3, [r7, #0]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d901      	bls.n	8000dca <angle_to_pwm+0x2a>
 8000dc6:	883b      	ldrh	r3, [r7, #0]
 8000dc8:	80fb      	strh	r3, [r7, #6]
    return min + (uint32_t)angle * (max - min) / max_angle;
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	8879      	ldrh	r1, [r7, #2]
 8000dce:	88ba      	ldrh	r2, [r7, #4]
 8000dd0:	1a8a      	subs	r2, r1, r2
 8000dd2:	fb03 f202 	mul.w	r2, r3, r2
 8000dd6:	883b      	ldrh	r3, [r7, #0]
 8000dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	b29b      	uxth	r3, r3
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc90      	pop	{r4, r7}
 8000dec:	4770      	bx	lr
	...

08000df0 <sweep_servo>:

void sweep_servo(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
    // Go to home (rightmost + bottom)
    TIM2->CCR2 = SERVO_H_MIN;  // horiz
 8000df6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dfa:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000dfe:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR1 = SERVO_V_MIN;  // vert
 8000e00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e04:	2200      	movs	r2, #0
 8000e06:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_Delay(500);
 8000e08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e0c:	f001 f87c 	bl	8001f08 <HAL_Delay>

    // Grid sweep: for each horiz angle step, sweep vert
    for (uint16_t h = 0; h <= 170; h++) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	80fb      	strh	r3, [r7, #6]
 8000e14:	e033      	b.n	8000e7e <sweep_servo+0x8e>
        TIM2->CCR2 = angle_to_pwm(h, SERVO_H_MIN, SERVO_H_MAX, 170);
 8000e16:	88f8      	ldrh	r0, [r7, #6]
 8000e18:	23aa      	movs	r3, #170	@ 0xaa
 8000e1a:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000e1e:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8000e22:	f7ff ffbd 	bl	8000da0 <angle_to_pwm>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e2e:	639a      	str	r2, [r3, #56]	@ 0x38
        for (uint16_t v = 0; v <= 90; v++) {
 8000e30:	2300      	movs	r3, #0
 8000e32:	80bb      	strh	r3, [r7, #4]
 8000e34:	e01d      	b.n	8000e72 <sweep_servo+0x82>
            TIM2->CCR1 = angle_to_pwm(v, SERVO_V_MIN, SERVO_V_MAX, 90);
 8000e36:	88b8      	ldrh	r0, [r7, #4]
 8000e38:	235a      	movs	r3, #90	@ 0x5a
 8000e3a:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8000e3e:	2100      	movs	r1, #0
 8000e40:	f7ff ffae 	bl	8000da0 <angle_to_pwm>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e4c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_Delay(15);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f001 f85a 	bl	8001f08 <HAL_Delay>
            read_and_print_lidar(TIM2->CCR1, TIM2->CCR2);
 8000e54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e60:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000e62:	b292      	uxth	r2, r2
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fef0 	bl	8000c4c <read_and_print_lidar>
        for (uint16_t v = 0; v <= 90; v++) {
 8000e6c:	88bb      	ldrh	r3, [r7, #4]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	80bb      	strh	r3, [r7, #4]
 8000e72:	88bb      	ldrh	r3, [r7, #4]
 8000e74:	2b5a      	cmp	r3, #90	@ 0x5a
 8000e76:	d9de      	bls.n	8000e36 <sweep_servo+0x46>
    for (uint16_t h = 0; h <= 170; h++) {
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	80fb      	strh	r3, [r7, #6]
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	2baa      	cmp	r3, #170	@ 0xaa
 8000e82:	d9c8      	bls.n	8000e16 <sweep_servo+0x26>
        }
    }
    SerialOutputString("Complete\n", &USART1_PORT);
 8000e84:	4903      	ldr	r1, [pc, #12]	@ (8000e94 <sweep_servo+0xa4>)
 8000e86:	4804      	ldr	r0, [pc, #16]	@ (8000e98 <sweep_servo+0xa8>)
 8000e88:	f000 fd69 	bl	800195e <SerialOutputString>
//            TIM2->CCR1 = angle_to_pwm(v, SERVO_V_MIN, SERVO_V_MAX, 90);
//            HAL_Delay(15);
//            read_and_print_lidar(TIM2->CCR1, TIM2->CCR2);
//        }
//    }
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000000 	.word	0x20000000
 8000e98:	08007ed0 	.word	0x08007ed0
 8000e9c:	00000000 	.word	0x00000000

08000ea0 <main>:

int main(void)
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b0a0      	sub	sp, #128	@ 0x80
 8000ea4:	af04      	add	r7, sp, #16
	//  PA8 is TIM1 channel 1, this is used for the LASPWM (the laser PWM signal)
	//  PB6 is I2C1 clock (SCL on the PTU), PB7 is I2C1 data (SDA on the PTU)



	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000ea6:	4bab      	ldr	r3, [pc, #684]	@ (8001154 <main+0x2b4>)
 8000ea8:	f107 0418 	add.w	r4, r7, #24
 8000eac:	461d      	mov	r5, r3
 8000eae:	6828      	ldr	r0, [r5, #0]
 8000eb0:	6869      	ldr	r1, [r5, #4]
 8000eb2:	68aa      	ldr	r2, [r5, #8]
 8000eb4:	68eb      	ldr	r3, [r5, #12]
 8000eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb8:	6928      	ldr	r0, [r5, #16]
 8000eba:	6020      	str	r0, [r4, #0]
 8000ebc:	7d2b      	ldrb	r3, [r5, #20]
 8000ebe:	7123      	strb	r3, [r4, #4]
 8000ec0:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000ec4:	222b      	movs	r2, #43	@ 0x2b
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f005 fbf3 	bl	80066b4 <memset>

	enable_clocks();
 8000ece:	f7ff fe5b 	bl	8000b88 <enable_clocks>
	initialise_board();
 8000ed2:	f7ff fe69 	bl	8000ba8 <initialise_board>

	LedRegister *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000ed6:	4ba0      	ldr	r3, [pc, #640]	@ (8001158 <main+0x2b8>)
 8000ed8:	667b      	str	r3, [r7, #100]	@ 0x64

	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000eda:	2200      	movs	r2, #0
 8000edc:	499f      	ldr	r1, [pc, #636]	@ (800115c <main+0x2bc>)
 8000ede:	2004      	movs	r0, #4
 8000ee0:	f000 fcb0 	bl	8001844 <SerialInitialise>

	HAL_StatusTypeDef return_value = 0x00;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	volatile uint16_t vertical_PWM = 1000;
 8000eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eee:	82fb      	strh	r3, [r7, #22]
	volatile uint16_t horizontal_PWM = 1000;
 8000ef0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef4:	82bb      	strh	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f000 ffa1 	bl	8001e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efa:	f000 f9f3 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f000 fbd1 	bl	80016a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f02:	f000 fa53 	bl	80013ac <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f06:	f000 fa91 	bl	800142c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000f0a:	f000 fba9 	bl	8001660 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000f0e:	f000 fb41 	bl	8001594 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f12:	f000 fac9 	bl	80014a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f16:	2100      	movs	r1, #0
 8000f18:	4891      	ldr	r0, [pc, #580]	@ (8001160 <main+0x2c0>)
 8000f1a:	f003 fee3 	bl	8004ce4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f1e:	2104      	movs	r1, #4
 8000f20:	488f      	ldr	r0, [pc, #572]	@ (8001160 <main+0x2c0>)
 8000f22:	f003 fedf 	bl	8004ce4 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f26:	2100      	movs	r1, #0
 8000f28:	488e      	ldr	r0, [pc, #568]	@ (8001164 <main+0x2c4>)
 8000f2a:	f004 f83d 	bl	8004fa8 <HAL_TIM_IC_Start_IT>

	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 8000f2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f32:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000f36:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // this makes the timing not change until the next pulse is finished
 8000f38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f46:	6013      	str	r3, [r2, #0]

	// note: for PWM if you continually change the clock period
	// you can get unexpected results. To remove this, set ARPE so that the
	// ARR settings are not activated until the next cycle.

	initialise_ptu_i2c(&hi2c1);
 8000f48:	4887      	ldr	r0, [pc, #540]	@ (8001168 <main+0x2c8>)
 8000f4a:	f000 fc2f 	bl	80017ac <initialise_ptu_i2c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	// reset lidar board
	uint8_t reset_value = 0x00;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	74fb      	strb	r3, [r7, #19]
	return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000f52:	230a      	movs	r3, #10
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	f107 0313 	add.w	r3, r7, #19
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2301      	movs	r3, #1
 8000f62:	2200      	movs	r2, #0
 8000f64:	21c4      	movs	r1, #196	@ 0xc4
 8000f66:	4880      	ldr	r0, [pc, #512]	@ (8001168 <main+0x2c8>)
 8000f68:	f001 fb3e 	bl	80025e8 <HAL_I2C_Mem_Write>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	uint8_t PWM_direction_clockwise = 1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	// delay for initialisation of the lidar
	HAL_Delay(100);
 8000f78:	2064      	movs	r0, #100	@ 0x64
 8000f7a:	f000 ffc5 	bl	8001f08 <HAL_Delay>

	while (1){
        sweep_servo();
 8000f7e:	f7ff ff37 	bl	8000df0 <sweep_servo>
		if (PWM_direction_clockwise == 1) {
 8000f82:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10a      	bne.n	8000fa0 <main+0x100>
			vertical_PWM += 3;
 8000f8a:	8afb      	ldrh	r3, [r7, #22]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	3303      	adds	r3, #3
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	82fb      	strh	r3, [r7, #22]
			horizontal_PWM += 3;
 8000f94:	8abb      	ldrh	r3, [r7, #20]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	3303      	adds	r3, #3
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	82bb      	strh	r3, [r7, #20]
 8000f9e:	e009      	b.n	8000fb4 <main+0x114>
		}
		else {
			vertical_PWM -= 3;
 8000fa0:	8afb      	ldrh	r3, [r7, #22]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	82fb      	strh	r3, [r7, #22]
			horizontal_PWM -= 3;
 8000faa:	8abb      	ldrh	r3, [r7, #20]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	3b03      	subs	r3, #3
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	82bb      	strh	r3, [r7, #20]
		}

		if (vertical_PWM > 1900) {
 8000fb4:	8afb      	ldrh	r3, [r7, #22]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d905      	bls.n	8000fcc <main+0x12c>
			vertical_PWM = 1900;
 8000fc0:	f240 736c 	movw	r3, #1900	@ 0x76c
 8000fc4:	82fb      	strh	r3, [r7, #22]
			PWM_direction_clockwise = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		}
		if (vertical_PWM < 1200) {
 8000fcc:	8afb      	ldrh	r3, [r7, #22]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8000fd4:	d205      	bcs.n	8000fe2 <main+0x142>
			vertical_PWM = 1200;
 8000fd6:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000fda:	82fb      	strh	r3, [r7, #22]
			PWM_direction_clockwise = 1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		}

		TIM2->CCR1 = vertical_PWM;
 8000fe2:	8afb      	ldrh	r3, [r7, #22]
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fea:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM2->CCR2 = horizontal_PWM;
 8000fec:	8abb      	ldrh	r3, [r7, #20]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ff4:	639a      	str	r2, [r3, #56]	@ 0x38

		uint8_t xMSB = 0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	74bb      	strb	r3, [r7, #18]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x29, 1, &xMSB, 1, 10);
 8000ffa:	230a      	movs	r3, #10
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	f107 0312 	add.w	r3, r7, #18
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	2229      	movs	r2, #41	@ 0x29
 800100c:	21d3      	movs	r1, #211	@ 0xd3
 800100e:	4856      	ldr	r0, [pc, #344]	@ (8001168 <main+0x2c8>)
 8001010:	f001 fbfe 	bl	8002810 <HAL_I2C_Mem_Read>
		uint8_t xLSB = 0x00;
 8001014:	2300      	movs	r3, #0
 8001016:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x28, 1, &xLSB, 1, 10);
 8001018:	230a      	movs	r3, #10
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	2301      	movs	r3, #1
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f107 0311 	add.w	r3, r7, #17
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	2228      	movs	r2, #40	@ 0x28
 800102a:	21d3      	movs	r1, #211	@ 0xd3
 800102c:	484e      	ldr	r0, [pc, #312]	@ (8001168 <main+0x2c8>)
 800102e:	f001 fbef 	bl	8002810 <HAL_I2C_Mem_Read>
		int16_t yaw_rate = ((xMSB << 8) | xLSB);
 8001032:	7cbb      	ldrb	r3, [r7, #18]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	7c7b      	ldrb	r3, [r7, #17]
 800103a:	b21b      	sxth	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

		uint8_t yMSB = 0x00;
 8001042:	2300      	movs	r3, #0
 8001044:	743b      	strb	r3, [r7, #16]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2B, 1, &yMSB, 1, 10);
 8001046:	230a      	movs	r3, #10
 8001048:	9302      	str	r3, [sp, #8]
 800104a:	2301      	movs	r3, #1
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	222b      	movs	r2, #43	@ 0x2b
 8001058:	21d3      	movs	r1, #211	@ 0xd3
 800105a:	4843      	ldr	r0, [pc, #268]	@ (8001168 <main+0x2c8>)
 800105c:	f001 fbd8 	bl	8002810 <HAL_I2C_Mem_Read>
		uint8_t yLSB = 0x00;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2A, 1, &yLSB, 1, 10);
 8001064:	230a      	movs	r3, #10
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	2301      	movs	r3, #1
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	f107 030f 	add.w	r3, r7, #15
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	222a      	movs	r2, #42	@ 0x2a
 8001076:	21d3      	movs	r1, #211	@ 0xd3
 8001078:	483b      	ldr	r0, [pc, #236]	@ (8001168 <main+0x2c8>)
 800107a:	f001 fbc9 	bl	8002810 <HAL_I2C_Mem_Read>
		int16_t pitch_rate = ((yMSB << 8) | yLSB);
 800107e:	7c3b      	ldrb	r3, [r7, #16]
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b21a      	sxth	r2, r3
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	b21b      	sxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

		uint8_t zMSB = 0x00;
 800108e:	2300      	movs	r3, #0
 8001090:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2D, 1, &zMSB, 1, 10);
 8001092:	230a      	movs	r3, #10
 8001094:	9302      	str	r3, [sp, #8]
 8001096:	2301      	movs	r3, #1
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	f107 030e 	add.w	r3, r7, #14
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	222d      	movs	r2, #45	@ 0x2d
 80010a4:	21d3      	movs	r1, #211	@ 0xd3
 80010a6:	4830      	ldr	r0, [pc, #192]	@ (8001168 <main+0x2c8>)
 80010a8:	f001 fbb2 	bl	8002810 <HAL_I2C_Mem_Read>
		uint8_t zLSB = 0x00;
 80010ac:	2300      	movs	r3, #0
 80010ae:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2C, 1, &zLSB, 1, 10);
 80010b0:	230a      	movs	r3, #10
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2301      	movs	r3, #1
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	f107 030d 	add.w	r3, r7, #13
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	222c      	movs	r2, #44	@ 0x2c
 80010c2:	21d3      	movs	r1, #211	@ 0xd3
 80010c4:	4828      	ldr	r0, [pc, #160]	@ (8001168 <main+0x2c8>)
 80010c6:	f001 fba3 	bl	8002810 <HAL_I2C_Mem_Read>
		int16_t roll_rate = ((zMSB << 8) | zLSB);
 80010ca:	7bbb      	ldrb	r3, [r7, #14]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	7b7b      	ldrb	r3, [r7, #13]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

		if (pitch_rate < 0)
 80010da:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80010de:	2b00      	cmp	r3, #0
 80010e0:	da06      	bge.n	80010f0 <main+0x250>
			led_register->led_groups.led_pair_1 = 0b01;
 80010e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80010e4:	7813      	ldrb	r3, [r2, #0]
 80010e6:	2101      	movs	r1, #1
 80010e8:	f361 0301 	bfi	r3, r1, #0, #2
 80010ec:	7013      	strb	r3, [r2, #0]
 80010ee:	e005      	b.n	80010fc <main+0x25c>
		else
			led_register->led_groups.led_pair_1 = 0b10;
 80010f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80010f2:	7813      	ldrb	r3, [r2, #0]
 80010f4:	2102      	movs	r1, #2
 80010f6:	f361 0301 	bfi	r3, r1, #0, #2
 80010fa:	7013      	strb	r3, [r2, #0]

		if (yaw_rate < 0)
 80010fc:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	@ 0x60
 8001100:	2b00      	cmp	r3, #0
 8001102:	da06      	bge.n	8001112 <main+0x272>
			led_register->led_groups.led_pair_2 = 1;
 8001104:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001106:	7813      	ldrb	r3, [r2, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	f361 0383 	bfi	r3, r1, #2, #2
 800110e:	7013      	strb	r3, [r2, #0]
 8001110:	e005      	b.n	800111e <main+0x27e>
		else
			led_register->led_groups.led_pair_2 = 2;
 8001112:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001114:	7813      	ldrb	r3, [r2, #0]
 8001116:	2102      	movs	r1, #2
 8001118:	f361 0383 	bfi	r3, r1, #2, #2
 800111c:	7013      	strb	r3, [r2, #0]


		uint8_t lidar_value = 0x03;
 800111e:	2303      	movs	r3, #3
 8001120:	733b      	strb	r3, [r7, #12]
		return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &lidar_value, 1, 100);
 8001122:	2364      	movs	r3, #100	@ 0x64
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	2301      	movs	r3, #1
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2301      	movs	r3, #1
 8001132:	2200      	movs	r2, #0
 8001134:	21c4      	movs	r1, #196	@ 0xc4
 8001136:	480c      	ldr	r0, [pc, #48]	@ (8001168 <main+0x2c8>)
 8001138:	f001 fa56 	bl	80025e8 <HAL_I2C_Mem_Write>
 800113c:	4603      	mov	r3, r0
 800113e:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

		lidar_value = 0xff;
 8001142:	23ff      	movs	r3, #255	@ 0xff
 8001144:	733b      	strb	r3, [r7, #12]


		uint8_t lidar_MSBa = 0x00;
 8001146:	2300      	movs	r3, #0
 8001148:	72fb      	strb	r3, [r7, #11]
		uint8_t lidar_LSBa = 0x00;
 800114a:	2300      	movs	r3, #0
 800114c:	72bb      	strb	r3, [r7, #10]

		volatile uint16_t lidar_distance = 0xff;
 800114e:	23ff      	movs	r3, #255	@ 0xff
 8001150:	813b      	strh	r3, [r7, #8]

		uint16_t timeout;

		while ((lidar_value & 0x01) != 0x00) {
 8001152:	e04d      	b.n	80011f0 <main+0x350>
 8001154:	08007ef4 	.word	0x08007ef4
 8001158:	48001015 	.word	0x48001015
 800115c:	20000000 	.word	0x20000000
 8001160:	200001c8 	.word	0x200001c8
 8001164:	2000017c 	.word	0x2000017c
 8001168:	200000c4 	.word	0x200000c4
			return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x01, 1, &lidar_value, 1, 100);
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	2301      	movs	r3, #1
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	2201      	movs	r2, #1
 800117e:	21c5      	movs	r1, #197	@ 0xc5
 8001180:	4853      	ldr	r0, [pc, #332]	@ (80012d0 <main+0x430>)
 8001182:	f001 fb45 	bl	8002810 <HAL_I2C_Mem_Read>
 8001186:	4603      	mov	r3, r0
 8001188:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

			return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x0f, 1, &lidar_MSBa, 1, 100);
 800118c:	2364      	movs	r3, #100	@ 0x64
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2301      	movs	r3, #1
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	f107 030b 	add.w	r3, r7, #11
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	220f      	movs	r2, #15
 800119e:	21c5      	movs	r1, #197	@ 0xc5
 80011a0:	484b      	ldr	r0, [pc, #300]	@ (80012d0 <main+0x430>)
 80011a2:	f001 fb35 	bl	8002810 <HAL_I2C_Mem_Read>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
			return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x10, 1, &lidar_LSBa, 1, 100);
 80011ac:	2364      	movs	r3, #100	@ 0x64
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	2301      	movs	r3, #1
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	f107 030a 	add.w	r3, r7, #10
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	2210      	movs	r2, #16
 80011be:	21c5      	movs	r1, #197	@ 0xc5
 80011c0:	4843      	ldr	r0, [pc, #268]	@ (80012d0 <main+0x430>)
 80011c2:	f001 fb25 	bl	8002810 <HAL_I2C_Mem_Read>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

			lidar_distance = ((lidar_MSBa << 8) | lidar_LSBa);
 80011cc:	7afb      	ldrb	r3, [r7, #11]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7abb      	ldrb	r3, [r7, #10]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21b      	sxth	r3, r3
 80011da:	b29b      	uxth	r3, r3
 80011dc:	813b      	strh	r3, [r7, #8]
			timeout += 1;
 80011de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80011e2:	3301      	adds	r3, #1
 80011e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
			if (timeout > 0xff)
 80011e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80011ec:	2bff      	cmp	r3, #255	@ 0xff
 80011ee:	d805      	bhi.n	80011fc <main+0x35c>
		while ((lidar_value & 0x01) != 0x00) {
 80011f0:	7b3b      	ldrb	r3, [r7, #12]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1b8      	bne.n	800116c <main+0x2cc>
 80011fa:	e000      	b.n	80011fe <main+0x35e>
				break;
 80011fc:	bf00      	nop
		}

		uint8_t lidar_ranges = lidar_distance / (100/4); // 100cm broken into 4 groups
 80011fe:	893b      	ldrh	r3, [r7, #8]
 8001200:	b29b      	uxth	r3, r3
 8001202:	4a34      	ldr	r2, [pc, #208]	@ (80012d4 <main+0x434>)
 8001204:	fba2 2303 	umull	r2, r3, r2, r3
 8001208:	08db      	lsrs	r3, r3, #3
 800120a:	b29b      	uxth	r3, r3
 800120c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		if (lidar_ranges > 3)
 8001210:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001214:	2b03      	cmp	r3, #3
 8001216:	d902      	bls.n	800121e <main+0x37e>
			lidar_ranges = 3;
 8001218:	2303      	movs	r3, #3
 800121a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

		uint8_t led_values = pow(2, lidar_ranges);
 800121e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f966 	bl	80004f4 <__aeabi_ui2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	ec43 2b11 	vmov	d1, r2, r3
 8001230:	ed9f 0b25 	vldr	d0, [pc, #148]	@ 80012c8 <main+0x428>
 8001234:	f005 febe 	bl	8006fb4 <pow>
 8001238:	ec53 2b10 	vmov	r2, r3, d0
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fc82 	bl	8000b48 <__aeabi_d2uiz>
 8001244:	4603      	mov	r3, r0
 8001246:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

		led_register->led_groups.led_set_of_4 = led_values;
 800124a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	b2d9      	uxtb	r1, r3
 8001254:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001256:	7813      	ldrb	r3, [r2, #0]
 8001258:	f361 1307 	bfi	r3, r1, #4, #4
 800125c:	7013      	strb	r3, [r2, #0]

		volatile int read_values_now = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]

		if (last_period > 4000)
 8001262:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <main+0x438>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800126a:	d903      	bls.n	8001274 <main+0x3d4>
			last_period = 5000;
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <main+0x438>)
 800126e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001272:	801a      	strh	r2, [r3, #0]
		if (lidar_distance > 4000)
 8001274:	893b      	ldrh	r3, [r7, #8]
 8001276:	b29b      	uxth	r3, r3
 8001278:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800127c:	d902      	bls.n	8001284 <main+0x3e4>
			lidar_distance = 5500;
 800127e:	f241 537c 	movw	r3, #5500	@ 0x157c
 8001282:	813b      	strh	r3, [r7, #8]

		sprintf(string_to_send, "%hu,%hu,%hd,%hd,%hd\r\n", last_period, lidar_distance*10, roll_rate, pitch_rate, yaw_rate);
 8001284:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <main+0x438>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	461c      	mov	r4, r3
 800128a:	893b      	ldrh	r3, [r7, #8]
 800128c:	b29b      	uxth	r3, r3
 800128e:	461a      	mov	r2, r3
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	461d      	mov	r5, r3
 800129a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 800129e:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 80012a2:	f9b7 1060 	ldrsh.w	r1, [r7, #96]	@ 0x60
 80012a6:	f107 0018 	add.w	r0, r7, #24
 80012aa:	9102      	str	r1, [sp, #8]
 80012ac:	9201      	str	r2, [sp, #4]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	462b      	mov	r3, r5
 80012b2:	4622      	mov	r2, r4
 80012b4:	4909      	ldr	r1, [pc, #36]	@ (80012dc <main+0x43c>)
 80012b6:	f005 f9dd 	bl	8006674 <siprintf>

		SerialOutputString(string_to_send, &USART1_PORT);
 80012ba:	f107 0318 	add.w	r3, r7, #24
 80012be:	4908      	ldr	r1, [pc, #32]	@ (80012e0 <main+0x440>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fb4c 	bl	800195e <SerialOutputString>
	while (1){
 80012c6:	e65a      	b.n	8000f7e <main+0xde>
 80012c8:	00000000 	.word	0x00000000
 80012cc:	40000000 	.word	0x40000000
 80012d0:	200000c4 	.word	0x200000c4
 80012d4:	51eb851f 	.word	0x51eb851f
 80012d8:	20000506 	.word	0x20000506
 80012dc:	08007edc 	.word	0x08007edc
 80012e0:	20000000 	.word	0x20000000

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b09e      	sub	sp, #120	@ 0x78
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80012ee:	2228      	movs	r2, #40	@ 0x28
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f005 f9de 	bl	80066b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001308:	463b      	mov	r3, r7
 800130a:	223c      	movs	r2, #60	@ 0x3c
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f005 f9d0 	bl	80066b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001314:	2303      	movs	r3, #3
 8001316:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001318:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800131c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001322:	2301      	movs	r3, #1
 8001324:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001326:	2310      	movs	r3, #16
 8001328:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132a:	2302      	movs	r3, #2
 800132c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001332:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001334:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001338:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800133e:	4618      	mov	r0, r3
 8001340:	f001 ffa2 	bl	8003288 <HAL_RCC_OscConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800134a:	f000 fa29 	bl	80017a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134e:	230f      	movs	r3, #15
 8001350:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001352:	2302      	movs	r3, #2
 8001354:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800135e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001364:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001368:	2101      	movs	r1, #1
 800136a:	4618      	mov	r0, r3
 800136c:	f002 ffca 	bl	8004304 <HAL_RCC_ClockConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001376:	f000 fa13 	bl	80017a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <SystemClock_Config+0xc4>)
 800137c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001382:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001386:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001388:	2300      	movs	r3, #0
 800138a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	4618      	mov	r0, r3
 8001390:	f003 f99e 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800139a:	f000 fa01 	bl	80017a0 <Error_Handler>
  }
}
 800139e:	bf00      	nop
 80013a0:	3778      	adds	r7, #120	@ 0x78
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	00021020 	.word	0x00021020

080013ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001424 <MX_I2C1_Init+0x78>)
 80013b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001428 <MX_I2C1_Init+0x7c>)
 80013ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013bc:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c2:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013ce:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013da:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013e6:	480e      	ldr	r0, [pc, #56]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013e8:	f001 f86e 	bl	80024c8 <HAL_I2C_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013f2:	f000 f9d5 	bl	80017a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013f6:	2100      	movs	r1, #0
 80013f8:	4809      	ldr	r0, [pc, #36]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013fa:	f001 fddb 	bl	8002fb4 <HAL_I2CEx_ConfigAnalogFilter>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001404:	f000 f9cc 	bl	80017a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001408:	2100      	movs	r1, #0
 800140a:	4805      	ldr	r0, [pc, #20]	@ (8001420 <MX_I2C1_Init+0x74>)
 800140c:	f001 fe1d 	bl	800304a <HAL_I2CEx_ConfigDigitalFilter>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001416:	f000 f9c3 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200000c4 	.word	0x200000c4
 8001424:	40005400 	.word	0x40005400
 8001428:	2000090e 	.word	0x2000090e

0800142c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <MX_SPI1_Init+0x74>)
 8001432:	4a1c      	ldr	r2, [pc, #112]	@ (80014a4 <MX_SPI1_Init+0x78>)
 8001434:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001436:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <MX_SPI1_Init+0x74>)
 8001438:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800143c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <MX_SPI1_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <MX_SPI1_Init+0x74>)
 8001446:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800144a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800144c:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_SPI1_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001452:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <MX_SPI1_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_SPI1_Init+0x74>)
 800145a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800145e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <MX_SPI1_Init+0x74>)
 8001462:	2208      	movs	r2, #8
 8001464:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <MX_SPI1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <MX_SPI1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <MX_SPI1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001478:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <MX_SPI1_Init+0x74>)
 800147a:	2207      	movs	r2, #7
 800147c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800147e:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <MX_SPI1_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <MX_SPI1_Init+0x74>)
 8001486:	2208      	movs	r2, #8
 8001488:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <MX_SPI1_Init+0x74>)
 800148c:	f003 fad0 	bl	8004a30 <HAL_SPI_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001496:	f000 f983 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000118 	.word	0x20000118
 80014a4:	40013000 	.word	0x40013000

080014a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	@ 0x30
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014d4:	4b2d      	ldr	r3, [pc, #180]	@ (800158c <MX_TIM1_Init+0xe4>)
 80014d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001590 <MX_TIM1_Init+0xe8>)
 80014d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80014da:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <MX_TIM1_Init+0xe4>)
 80014dc:	222f      	movs	r2, #47	@ 0x2f
 80014de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b2a      	ldr	r3, [pc, #168]	@ (800158c <MX_TIM1_Init+0xe4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014e6:	4b29      	ldr	r3, [pc, #164]	@ (800158c <MX_TIM1_Init+0xe4>)
 80014e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ee:	4b27      	ldr	r3, [pc, #156]	@ (800158c <MX_TIM1_Init+0xe4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014f4:	4b25      	ldr	r3, [pc, #148]	@ (800158c <MX_TIM1_Init+0xe4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fa:	4b24      	ldr	r3, [pc, #144]	@ (800158c <MX_TIM1_Init+0xe4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001500:	4822      	ldr	r0, [pc, #136]	@ (800158c <MX_TIM1_Init+0xe4>)
 8001502:	f003 fb40 	bl	8004b86 <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 800150c:	f000 f948 	bl	80017a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001514:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001516:	f107 0320 	add.w	r3, r7, #32
 800151a:	4619      	mov	r1, r3
 800151c:	481b      	ldr	r0, [pc, #108]	@ (800158c <MX_TIM1_Init+0xe4>)
 800151e:	f004 f955 	bl	80057cc <HAL_TIM_ConfigClockSource>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001528:	f000 f93a 	bl	80017a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800152c:	4817      	ldr	r0, [pc, #92]	@ (800158c <MX_TIM1_Init+0xe4>)
 800152e:	f003 fcd9 	bl	8004ee4 <HAL_TIM_IC_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001538:	f000 f932 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	480f      	ldr	r0, [pc, #60]	@ (800158c <MX_TIM1_Init+0xe4>)
 8001550:	f004 ffb6 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800155a:	f000 f921 	bl	80017a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800155e:	230a      	movs	r3, #10
 8001560:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001562:	2301      	movs	r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2200      	movs	r2, #0
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_TIM1_Init+0xe4>)
 8001576:	f003 ff78 	bl	800546a <HAL_TIM_IC_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001580:	f000 f90e 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3730      	adds	r7, #48	@ 0x30
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2000017c 	.word	0x2000017c
 8001590:	40012c00 	.word	0x40012c00

08001594 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	@ 0x28
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a6:	463b      	mov	r3, r7
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	615a      	str	r2, [r3, #20]
 80015b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015b8:	4b28      	ldr	r3, [pc, #160]	@ (800165c <MX_TIM2_Init+0xc8>)
 80015ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80015c0:	4b26      	ldr	r3, [pc, #152]	@ (800165c <MX_TIM2_Init+0xc8>)
 80015c2:	222f      	movs	r2, #47	@ 0x2f
 80015c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b25      	ldr	r3, [pc, #148]	@ (800165c <MX_TIM2_Init+0xc8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80015cc:	4b23      	ldr	r3, [pc, #140]	@ (800165c <MX_TIM2_Init+0xc8>)
 80015ce:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80015d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d4:	4b21      	ldr	r3, [pc, #132]	@ (800165c <MX_TIM2_Init+0xc8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015da:	4b20      	ldr	r3, [pc, #128]	@ (800165c <MX_TIM2_Init+0xc8>)
 80015dc:	2280      	movs	r2, #128	@ 0x80
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015e0:	481e      	ldr	r0, [pc, #120]	@ (800165c <MX_TIM2_Init+0xc8>)
 80015e2:	f003 fb27 	bl	8004c34 <HAL_TIM_PWM_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80015ec:	f000 f8d8 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	4817      	ldr	r0, [pc, #92]	@ (800165c <MX_TIM2_Init+0xc8>)
 8001600:	f004 ff5e 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800160a:	f000 f8c9 	bl	80017a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160e:	2360      	movs	r3, #96	@ 0x60
 8001610:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8001612:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001616:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	480d      	ldr	r0, [pc, #52]	@ (800165c <MX_TIM2_Init+0xc8>)
 8001628:	f003 ffbc 	bl	80055a4 <HAL_TIM_PWM_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001632:	f000 f8b5 	bl	80017a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001636:	463b      	mov	r3, r7
 8001638:	2204      	movs	r2, #4
 800163a:	4619      	mov	r1, r3
 800163c:	4807      	ldr	r0, [pc, #28]	@ (800165c <MX_TIM2_Init+0xc8>)
 800163e:	f003 ffb1 	bl	80055a4 <HAL_TIM_PWM_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001648:	f000 f8aa 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800164c:	4803      	ldr	r0, [pc, #12]	@ (800165c <MX_TIM2_Init+0xc8>)
 800164e:	f000 fac5 	bl	8001bdc <HAL_TIM_MspPostInit>

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	@ 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200001c8 	.word	0x200001c8

08001660 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001664:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <MX_USB_PCD_Init+0x3c>)
 8001666:	4a0e      	ldr	r2, [pc, #56]	@ (80016a0 <MX_USB_PCD_Init+0x40>)
 8001668:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800166a:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <MX_USB_PCD_Init+0x3c>)
 800166c:	2208      	movs	r2, #8
 800166e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001670:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <MX_USB_PCD_Init+0x3c>)
 8001672:	2202      	movs	r2, #2
 8001674:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <MX_USB_PCD_Init+0x3c>)
 8001678:	2202      	movs	r2, #2
 800167a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800167c:	4b07      	ldr	r3, [pc, #28]	@ (800169c <MX_USB_PCD_Init+0x3c>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <MX_USB_PCD_Init+0x3c>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001688:	4804      	ldr	r0, [pc, #16]	@ (800169c <MX_USB_PCD_Init+0x3c>)
 800168a:	f001 fd2a 	bl	80030e2 <HAL_PCD_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001694:	f000 f884 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000214 	.word	0x20000214
 80016a0:	40005c00 	.word	0x40005c00

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	@ 0x28
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ba:	4b37      	ldr	r3, [pc, #220]	@ (8001798 <MX_GPIO_Init+0xf4>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	4a36      	ldr	r2, [pc, #216]	@ (8001798 <MX_GPIO_Init+0xf4>)
 80016c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016c4:	6153      	str	r3, [r2, #20]
 80016c6:	4b34      	ldr	r3, [pc, #208]	@ (8001798 <MX_GPIO_Init+0xf4>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	4b31      	ldr	r3, [pc, #196]	@ (8001798 <MX_GPIO_Init+0xf4>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	4a30      	ldr	r2, [pc, #192]	@ (8001798 <MX_GPIO_Init+0xf4>)
 80016d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016dc:	6153      	str	r3, [r2, #20]
 80016de:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <MX_GPIO_Init+0xf4>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <MX_GPIO_Init+0xf4>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001798 <MX_GPIO_Init+0xf4>)
 80016f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016f4:	6153      	str	r3, [r2, #20]
 80016f6:	4b28      	ldr	r3, [pc, #160]	@ (8001798 <MX_GPIO_Init+0xf4>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <MX_GPIO_Init+0xf4>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	4a24      	ldr	r2, [pc, #144]	@ (8001798 <MX_GPIO_Init+0xf4>)
 8001708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800170c:	6153      	str	r3, [r2, #20]
 800170e:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <MX_GPIO_Init+0xf4>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b1f      	ldr	r3, [pc, #124]	@ (8001798 <MX_GPIO_Init+0xf4>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4a1e      	ldr	r2, [pc, #120]	@ (8001798 <MX_GPIO_Init+0xf4>)
 8001720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001724:	6153      	str	r3, [r2, #20]
 8001726:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <MX_GPIO_Init+0xf4>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001732:	2200      	movs	r2, #0
 8001734:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8001738:	4818      	ldr	r0, [pc, #96]	@ (800179c <MX_GPIO_Init+0xf8>)
 800173a:	f000 fead 	bl	8002498 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800173e:	2337      	movs	r3, #55	@ 0x37
 8001740:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001742:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4619      	mov	r1, r3
 8001752:	4812      	ldr	r0, [pc, #72]	@ (800179c <MX_GPIO_Init+0xf8>)
 8001754:	f000 fd0e 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001758:	f64f 7308 	movw	r3, #65288	@ 0xff08
 800175c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	480a      	ldr	r0, [pc, #40]	@ (800179c <MX_GPIO_Init+0xf8>)
 8001772:	f000 fcff 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001776:	2301      	movs	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800178c:	f000 fcf2 	bl	8002174 <HAL_GPIO_Init>

}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	@ 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	48001000 	.word	0x48001000

080017a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a4:	b672      	cpsid	i
}
 80017a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <Error_Handler+0x8>

080017ac <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af04      	add	r7, sp, #16
 80017b2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef return_value = 0x00;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_1 = 0b00001111;
 80017b8:	230f      	movs	r3, #15
 80017ba:	73bb      	strb	r3, [r7, #14]
	// Enable x, y, z and turn off power down:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 80017bc:	230a      	movs	r3, #10
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	f107 030e 	add.w	r3, r7, #14
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2301      	movs	r3, #1
 80017cc:	2220      	movs	r2, #32
 80017ce:	21d2      	movs	r1, #210	@ 0xd2
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 ff09 	bl	80025e8 <HAL_I2C_Mem_Write>
 80017d6:	4603      	mov	r3, r0
 80017d8:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_2 = 0b00000000;
 80017da:	2300      	movs	r3, #0
 80017dc:	737b      	strb	r3, [r7, #13]
	// If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 80017de:	230a      	movs	r3, #10
 80017e0:	9302      	str	r3, [sp, #8]
 80017e2:	2301      	movs	r3, #1
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	f107 030d 	add.w	r3, r7, #13
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2301      	movs	r3, #1
 80017ee:	2221      	movs	r2, #33	@ 0x21
 80017f0:	21d2      	movs	r1, #210	@ 0xd2
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 fef8 	bl	80025e8 <HAL_I2C_Mem_Write>
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]

	// Configure CTRL_REG3 to generate data ready interrupt on INT2
	// No interrupts used on INT1, if you'd like to configure INT1
	// or INT2 otherwise, consult the datasheet:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 80017fc:	230a      	movs	r3, #10
 80017fe:	9302      	str	r3, [sp, #8]
 8001800:	2301      	movs	r3, #1
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	f107 030d 	add.w	r3, r7, #13
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2301      	movs	r3, #1
 800180c:	2222      	movs	r2, #34	@ 0x22
 800180e:	21d2      	movs	r1, #210	@ 0xd2
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 fee9 	bl	80025e8 <HAL_I2C_Mem_Write>
 8001816:	4603      	mov	r3, r0
 8001818:	73fb      	strb	r3, [r7, #15]
	// CTRL_REG5 controls high-pass filtering of outputs, use it
	// if you'd like:
	//HAL_I2C_Mem_Write(&hi2c1, gyro_wr, L3G4200D_CTRL_REG5, 1, &reg_2, 10);

	// reset lidar board
	uint8_t reset_value = 0x00;
 800181a:	2300      	movs	r3, #0
 800181c:	733b      	strb	r3, [r7, #12]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 800181e:	230a      	movs	r3, #10
 8001820:	9302      	str	r3, [sp, #8]
 8001822:	2301      	movs	r3, #1
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2301      	movs	r3, #1
 800182e:	2200      	movs	r2, #0
 8001830:	21c4      	movs	r1, #196	@ 0xc4
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fed8 	bl	80025e8 <HAL_I2C_Mem_Write>
 8001838:	4603      	mov	r3, r0
 800183a:	73fb      	strb	r3, [r7, #15]
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	635a      	str	r2, [r3, #52]	@ 0x34

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001856:	4b34      	ldr	r3, [pc, #208]	@ (8001928 <SerialInitialise+0xe4>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a33      	ldr	r2, [pc, #204]	@ (8001928 <SerialInitialise+0xe4>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001860:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001862:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <SerialInitialise+0xe4>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	4a30      	ldr	r2, [pc, #192]	@ (8001928 <SerialInitialise+0xe4>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d106      	bne.n	8001884 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8001876:	4b2c      	ldr	r3, [pc, #176]	@ (8001928 <SerialInitialise+0xe4>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	4a2b      	ldr	r2, [pc, #172]	@ (8001928 <SerialInitialise+0xe4>)
 800187c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001880:	6153      	str	r3, [r2, #20]
		break;
 8001882:	e000      	b.n	8001886 <SerialInitialise+0x42>
	default:
		break;
 8001884:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	6a12      	ldr	r2, [r2, #32]
 800188e:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001898:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	6959      	ldr	r1, [r3, #20]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d821      	bhi.n	800190a <SerialInitialise+0xc6>
 80018c6:	a201      	add	r2, pc, #4	@ (adr r2, 80018cc <SerialInitialise+0x88>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	080018e1 	.word	0x080018e1
 80018d0:	080018e9 	.word	0x080018e9
 80018d4:	080018f1 	.word	0x080018f1
 80018d8:	080018f9 	.word	0x080018f9
 80018dc:	08001901 	.word	0x08001901
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2246      	movs	r2, #70	@ 0x46
 80018e4:	801a      	strh	r2, [r3, #0]
		break;
 80018e6:	e010      	b.n	800190a <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2246      	movs	r2, #70	@ 0x46
 80018ec:	801a      	strh	r2, [r3, #0]
		break;
 80018ee:	e00c      	b.n	800190a <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2246      	movs	r2, #70	@ 0x46
 80018f4:	801a      	strh	r2, [r3, #0]
		break;
 80018f6:	e008      	b.n	800190a <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	2246      	movs	r2, #70	@ 0x46
 80018fc:	801a      	strh	r2, [r3, #0]
		break;
 80018fe:	e004      	b.n	800190a <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8001906:	801a      	strh	r2, [r3, #0]
		break;
 8001908:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f042 020d 	orr.w	r2, r2, #13
 8001918:	601a      	str	r2, [r3, #0]
}
 800191a:	bf00      	nop
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8001938:	bf00      	nop
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f8      	beq.n	800193a <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	79fa      	ldrb	r2, [r7, #7]
 800194e:	b292      	uxth	r2, r2
 8001950:	801a      	strh	r2, [r3, #0]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 800196c:	e00b      	b.n	8001986 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	6839      	ldr	r1, [r7, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ffd9 	bl	800192c <SerialOutputChar>
		counter++;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3301      	adds	r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
		pt++;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3301      	adds	r3, #1
 8001984:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1ef      	bne.n	800196e <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	4798      	blx	r3
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <HAL_MspInit+0x44>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	4a0e      	ldr	r2, [pc, #56]	@ (80019ec <HAL_MspInit+0x44>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6193      	str	r3, [r2, #24]
 80019ba:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <HAL_MspInit+0x44>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_MspInit+0x44>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	4a08      	ldr	r2, [pc, #32]	@ (80019ec <HAL_MspInit+0x44>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d0:	61d3      	str	r3, [r2, #28]
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_MspInit+0x44>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019de:	2007      	movs	r0, #7
 80019e0:	f000 fb86 	bl	80020f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	@ 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a17      	ldr	r2, [pc, #92]	@ (8001a6c <HAL_I2C_MspInit+0x7c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d127      	bne.n	8001a62 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <HAL_I2C_MspInit+0x80>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	4a16      	ldr	r2, [pc, #88]	@ (8001a70 <HAL_I2C_MspInit+0x80>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a1c:	6153      	str	r3, [r2, #20]
 8001a1e:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <HAL_I2C_MspInit+0x80>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001a2a:	23c0      	movs	r3, #192	@ 0xc0
 8001a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2e:	2312      	movs	r3, #18
 8001a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a36:	2303      	movs	r3, #3
 8001a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	480b      	ldr	r0, [pc, #44]	@ (8001a74 <HAL_I2C_MspInit+0x84>)
 8001a46:	f000 fb95 	bl	8002174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a4a:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <HAL_I2C_MspInit+0x80>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	4a08      	ldr	r2, [pc, #32]	@ (8001a70 <HAL_I2C_MspInit+0x80>)
 8001a50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a54:	61d3      	str	r3, [r2, #28]
 8001a56:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_I2C_MspInit+0x80>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	@ 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	40021000 	.word	0x40021000
 8001a74:	48000400 	.word	0x48000400

08001a78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	@ 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a17      	ldr	r2, [pc, #92]	@ (8001af4 <HAL_SPI_MspInit+0x7c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d128      	bne.n	8001aec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a9a:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <HAL_SPI_MspInit+0x80>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	4a16      	ldr	r2, [pc, #88]	@ (8001af8 <HAL_SPI_MspInit+0x80>)
 8001aa0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001aa4:	6193      	str	r3, [r2, #24]
 8001aa6:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <HAL_SPI_MspInit+0x80>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <HAL_SPI_MspInit+0x80>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	4a10      	ldr	r2, [pc, #64]	@ (8001af8 <HAL_SPI_MspInit+0x80>)
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001abc:	6153      	str	r3, [r2, #20]
 8001abe:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <HAL_SPI_MspInit+0x80>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001aca:	23e0      	movs	r3, #224	@ 0xe0
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ada:	2305      	movs	r3, #5
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae8:	f000 fb44 	bl	8002174 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	@ 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40013000 	.word	0x40013000
 8001af8:	40021000 	.word	0x40021000

08001afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1c      	ldr	r2, [pc, #112]	@ (8001b8c <HAL_TIM_Base_MspInit+0x90>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d131      	bne.n	8001b82 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <HAL_TIM_Base_MspInit+0x94>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	4a1b      	ldr	r2, [pc, #108]	@ (8001b90 <HAL_TIM_Base_MspInit+0x94>)
 8001b24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b28:	6193      	str	r3, [r2, #24]
 8001b2a:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <HAL_TIM_Base_MspInit+0x94>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <HAL_TIM_Base_MspInit+0x94>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4a15      	ldr	r2, [pc, #84]	@ (8001b90 <HAL_TIM_Base_MspInit+0x94>)
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b40:	6153      	str	r3, [r2, #20]
 8001b42:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <HAL_TIM_Base_MspInit+0x94>)
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b60:	2306      	movs	r3, #6
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b6e:	f000 fb01 	bl	8002174 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	201b      	movs	r0, #27
 8001b78:	f000 fac5 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b7c:	201b      	movs	r0, #27
 8001b7e:	f000 fade 	bl	800213e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	3728      	adds	r7, #40	@ 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40012c00 	.word	0x40012c00
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ba4:	d113      	bne.n	8001bce <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <HAL_TIM_PWM_MspInit+0x44>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd8 <HAL_TIM_PWM_MspInit+0x44>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <HAL_TIM_PWM_MspInit+0x44>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	201c      	movs	r0, #28
 8001bc4:	f000 fa9f 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bc8:	201c      	movs	r0, #28
 8001bca:	f000 fab8 	bl	800213e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 030c 	add.w	r3, r7, #12
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bfc:	d11d      	bne.n	8001c3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <HAL_TIM_MspPostInit+0x68>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	4a10      	ldr	r2, [pc, #64]	@ (8001c44 <HAL_TIM_MspPostInit+0x68>)
 8001c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c08:	6153      	str	r3, [r2, #20]
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <HAL_TIM_MspPostInit+0x68>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001c16:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001c1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	4619      	mov	r1, r3
 8001c32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c36:	f000 fa9d 	bl	8002174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c3a:	bf00      	nop
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000

08001c48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	@ 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a18      	ldr	r2, [pc, #96]	@ (8001cc8 <HAL_PCD_MspInit+0x80>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d129      	bne.n	8001cbe <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <HAL_PCD_MspInit+0x84>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	4a17      	ldr	r2, [pc, #92]	@ (8001ccc <HAL_PCD_MspInit+0x84>)
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c74:	6153      	str	r3, [r2, #20]
 8001c76:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <HAL_PCD_MspInit+0x84>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001c82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001c94:	230e      	movs	r3, #14
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca2:	f000 fa67 	bl	8002174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001ca6:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <HAL_PCD_MspInit+0x84>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a08      	ldr	r2, [pc, #32]	@ (8001ccc <HAL_PCD_MspInit+0x84>)
 8001cac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cb0:	61d3      	str	r3, [r2, #28]
 8001cb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <HAL_PCD_MspInit+0x84>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001cbe:	bf00      	nop
 8001cc0:	3728      	adds	r7, #40	@ 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40005c00 	.word	0x40005c00
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <NMI_Handler+0x4>

08001cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <HardFault_Handler+0x4>

08001ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <MemManage_Handler+0x4>

08001ce8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <BusFault_Handler+0x4>

08001cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <UsageFault_Handler+0x4>

08001cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d26:	f000 f8cf 	bl	8001ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d34:	4802      	ldr	r0, [pc, #8]	@ (8001d40 <TIM1_CC_IRQHandler+0x10>)
 8001d36:	f003 fa79 	bl	800522c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000017c 	.word	0x2000017c

08001d44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d48:	4802      	ldr	r0, [pc, #8]	@ (8001d54 <TIM2_IRQHandler+0x10>)
 8001d4a:	f003 fa6f 	bl	800522c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200001c8 	.word	0x200001c8

08001d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d60:	4a14      	ldr	r2, [pc, #80]	@ (8001db4 <_sbrk+0x5c>)
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <_sbrk+0x60>)
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d6c:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d74:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <_sbrk+0x64>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <_sbrk+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	@ (8001dbc <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d88:	f004 fc9c 	bl	80066c4 <__errno>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	220c      	movs	r2, #12
 8001d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d96:	e009      	b.n	8001dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a05      	ldr	r2, [pc, #20]	@ (8001dbc <_sbrk+0x64>)
 8001da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000a000 	.word	0x2000a000
 8001db8:	00000400 	.word	0x00000400
 8001dbc:	20000508 	.word	0x20000508
 8001dc0:	20000658 	.word	0x20000658

08001dc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <SystemInit+0x20>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dce:	4a05      	ldr	r2, [pc, #20]	@ (8001de4 <SystemInit+0x20>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e20 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dec:	f7ff ffea 	bl	8001dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df0:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001df2:	490d      	ldr	r1, [pc, #52]	@ (8001e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <LoopForever+0xe>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e08:	4c0a      	ldr	r4, [pc, #40]	@ (8001e34 <LoopForever+0x16>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e16:	f004 fc5b 	bl	80066d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e1a:	f7ff f841 	bl	8000ea0 <main>

08001e1e <LoopForever>:

LoopForever:
    b LoopForever
 8001e1e:	e7fe      	b.n	8001e1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e20:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001e2c:	08007fb0 	.word	0x08007fb0
  ldr r2, =_sbss
 8001e30:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001e34:	20000658 	.word	0x20000658

08001e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_2_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <HAL_Init+0x28>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a07      	ldr	r2, [pc, #28]	@ (8001e64 <HAL_Init+0x28>)
 8001e46:	f043 0310 	orr.w	r3, r3, #16
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f000 f94f 	bl	80020f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f000 f808 	bl	8001e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e58:	f7ff fda6 	bl	80019a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000

08001e68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e70:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <HAL_InitTick+0x54>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <HAL_InitTick+0x58>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f967 	bl	800215a <HAL_SYSTICK_Config>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00e      	b.n	8001eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b0f      	cmp	r3, #15
 8001e9a:	d80a      	bhi.n	8001eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ea4:	f000 f92f 	bl	8002106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea8:	4a06      	ldr	r2, [pc, #24]	@ (8001ec4 <HAL_InitTick+0x5c>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000038 	.word	0x20000038
 8001ec0:	20000040 	.word	0x20000040
 8001ec4:	2000003c 	.word	0x2000003c

08001ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_IncTick+0x20>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_IncTick+0x24>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <HAL_IncTick+0x24>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000040 	.word	0x20000040
 8001eec:	2000050c 	.word	0x2000050c

08001ef0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <HAL_GetTick+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	2000050c 	.word	0x2000050c

08001f08 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff ffee 	bl	8001ef0 <HAL_GetTick>
 8001f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f20:	d005      	beq.n	8001f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_Delay+0x44>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f2e:	bf00      	nop
 8001f30:	f7ff ffde 	bl	8001ef0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d8f7      	bhi.n	8001f30 <HAL_Delay+0x28>
  {
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000040 	.word	0x20000040

08001f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	@ (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	f003 0307 	and.w	r3, r3, #7
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db0b      	blt.n	8001fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	4907      	ldr	r1, [pc, #28]	@ (8001fec <__NVIC_EnableIRQ+0x38>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db0a      	blt.n	800201a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	490c      	ldr	r1, [pc, #48]	@ (800203c <__NVIC_SetPriority+0x4c>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	440b      	add	r3, r1
 8002014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002018:	e00a      	b.n	8002030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	@ (8002040 <__NVIC_SetPriority+0x50>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	440b      	add	r3, r1
 800202e:	761a      	strb	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	@ 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f1c3 0307 	rsb	r3, r3, #7
 800205e:	2b04      	cmp	r3, #4
 8002060:	bf28      	it	cs
 8002062:	2304      	movcs	r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3304      	adds	r3, #4
 800206a:	2b06      	cmp	r3, #6
 800206c:	d902      	bls.n	8002074 <NVIC_EncodePriority+0x30>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3b03      	subs	r3, #3
 8002072:	e000      	b.n	8002076 <NVIC_EncodePriority+0x32>
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	401a      	ands	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	@ 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020bc:	d301      	bcc.n	80020c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020be:	2301      	movs	r3, #1
 80020c0:	e00f      	b.n	80020e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c2:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <SysTick_Config+0x40>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ca:	210f      	movs	r1, #15
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020d0:	f7ff ff8e 	bl	8001ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d4:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <SysTick_Config+0x40>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020da:	4b04      	ldr	r3, [pc, #16]	@ (80020ec <SysTick_Config+0x40>)
 80020dc:	2207      	movs	r2, #7
 80020de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	e000e010 	.word	0xe000e010

080020f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff29 	bl	8001f50 <__NVIC_SetPriorityGrouping>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002118:	f7ff ff3e 	bl	8001f98 <__NVIC_GetPriorityGrouping>
 800211c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	6978      	ldr	r0, [r7, #20]
 8002124:	f7ff ff8e 	bl	8002044 <NVIC_EncodePriority>
 8002128:	4602      	mov	r2, r0
 800212a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff5d 	bl	8001ff0 <__NVIC_SetPriority>
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff31 	bl	8001fb4 <__NVIC_EnableIRQ>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ffa2 	bl	80020ac <SysTick_Config>
 8002168:	4603      	mov	r3, r0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002182:	e154      	b.n	800242e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2101      	movs	r1, #1
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8146 	beq.w	8002428 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d005      	beq.n	80021b4 <HAL_GPIO_Init+0x40>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d130      	bne.n	8002216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ea:	2201      	movs	r2, #1
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f003 0201 	and.w	r2, r3, #1
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b03      	cmp	r3, #3
 8002220:	d017      	beq.n	8002252 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d123      	bne.n	80022a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	08da      	lsrs	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3208      	adds	r2, #8
 8002266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	6939      	ldr	r1, [r7, #16]
 80022a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0203 	and.w	r2, r3, #3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 80a0 	beq.w	8002428 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e8:	4b58      	ldr	r3, [pc, #352]	@ (800244c <HAL_GPIO_Init+0x2d8>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a57      	ldr	r2, [pc, #348]	@ (800244c <HAL_GPIO_Init+0x2d8>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b55      	ldr	r3, [pc, #340]	@ (800244c <HAL_GPIO_Init+0x2d8>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002300:	4a53      	ldr	r2, [pc, #332]	@ (8002450 <HAL_GPIO_Init+0x2dc>)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	220f      	movs	r2, #15
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800232a:	d019      	beq.n	8002360 <HAL_GPIO_Init+0x1ec>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a49      	ldr	r2, [pc, #292]	@ (8002454 <HAL_GPIO_Init+0x2e0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <HAL_GPIO_Init+0x1e8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a48      	ldr	r2, [pc, #288]	@ (8002458 <HAL_GPIO_Init+0x2e4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00d      	beq.n	8002358 <HAL_GPIO_Init+0x1e4>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a47      	ldr	r2, [pc, #284]	@ (800245c <HAL_GPIO_Init+0x2e8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d007      	beq.n	8002354 <HAL_GPIO_Init+0x1e0>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a46      	ldr	r2, [pc, #280]	@ (8002460 <HAL_GPIO_Init+0x2ec>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d101      	bne.n	8002350 <HAL_GPIO_Init+0x1dc>
 800234c:	2304      	movs	r3, #4
 800234e:	e008      	b.n	8002362 <HAL_GPIO_Init+0x1ee>
 8002350:	2305      	movs	r3, #5
 8002352:	e006      	b.n	8002362 <HAL_GPIO_Init+0x1ee>
 8002354:	2303      	movs	r3, #3
 8002356:	e004      	b.n	8002362 <HAL_GPIO_Init+0x1ee>
 8002358:	2302      	movs	r3, #2
 800235a:	e002      	b.n	8002362 <HAL_GPIO_Init+0x1ee>
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <HAL_GPIO_Init+0x1ee>
 8002360:	2300      	movs	r3, #0
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	f002 0203 	and.w	r2, r2, #3
 8002368:	0092      	lsls	r2, r2, #2
 800236a:	4093      	lsls	r3, r2
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002372:	4937      	ldr	r1, [pc, #220]	@ (8002450 <HAL_GPIO_Init+0x2dc>)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002380:	4b38      	ldr	r3, [pc, #224]	@ (8002464 <HAL_GPIO_Init+0x2f0>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43db      	mvns	r3, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002464 <HAL_GPIO_Init+0x2f0>)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002464 <HAL_GPIO_Init+0x2f0>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023ce:	4a25      	ldr	r2, [pc, #148]	@ (8002464 <HAL_GPIO_Init+0x2f0>)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023d4:	4b23      	ldr	r3, [pc, #140]	@ (8002464 <HAL_GPIO_Init+0x2f0>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002464 <HAL_GPIO_Init+0x2f0>)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023fe:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <HAL_GPIO_Init+0x2f0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002422:	4a10      	ldr	r2, [pc, #64]	@ (8002464 <HAL_GPIO_Init+0x2f0>)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3301      	adds	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	f47f aea3 	bne.w	8002184 <HAL_GPIO_Init+0x10>
  }
}
 800243e:	bf00      	nop
 8002440:	bf00      	nop
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	40021000 	.word	0x40021000
 8002450:	40010000 	.word	0x40010000
 8002454:	48000400 	.word	0x48000400
 8002458:	48000800 	.word	0x48000800
 800245c:	48000c00 	.word	0x48000c00
 8002460:	48001000 	.word	0x48001000
 8002464:	40010400 	.word	0x40010400

08002468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	887b      	ldrh	r3, [r7, #2]
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
 8002484:	e001      	b.n	800248a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800248a:	7bfb      	ldrb	r3, [r7, #15]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	807b      	strh	r3, [r7, #2]
 80024a4:	4613      	mov	r3, r2
 80024a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a8:	787b      	ldrb	r3, [r7, #1]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024b4:	e002      	b.n	80024bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e081      	b.n	80025de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff fa7e 	bl	80019f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2224      	movs	r2, #36	@ 0x24
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0201 	bic.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002518:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002528:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d107      	bne.n	8002542 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	e006      	b.n	8002550 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800254e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d104      	bne.n	8002562 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002560:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002574:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002584:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69d9      	ldr	r1, [r3, #28]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1a      	ldr	r2, [r3, #32]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	817b      	strh	r3, [r7, #10]
 80025fa:	460b      	mov	r3, r1
 80025fc:	813b      	strh	r3, [r7, #8]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b20      	cmp	r3, #32
 800260c:	f040 80f9 	bne.w	8002802 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_I2C_Mem_Write+0x34>
 8002616:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002622:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0ed      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_I2C_Mem_Write+0x4e>
 8002632:	2302      	movs	r3, #2
 8002634:	e0e6      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800263e:	f7ff fc57 	bl	8001ef0 <HAL_GetTick>
 8002642:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2319      	movs	r3, #25
 800264a:	2201      	movs	r2, #1
 800264c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 fac3 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0d1      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2221      	movs	r2, #33	@ 0x21
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2240      	movs	r2, #64	@ 0x40
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002680:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002688:	88f8      	ldrh	r0, [r7, #6]
 800268a:	893a      	ldrh	r2, [r7, #8]
 800268c:	8979      	ldrh	r1, [r7, #10]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	4603      	mov	r3, r0
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f9d3 	bl	8002a44 <I2C_RequestMemoryWrite>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0a9      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2bff      	cmp	r3, #255	@ 0xff
 80026b8:	d90e      	bls.n	80026d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	22ff      	movs	r2, #255	@ 0xff
 80026be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	8979      	ldrh	r1, [r7, #10]
 80026c8:	2300      	movs	r3, #0
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 fc3d 	bl	8002f50 <I2C_TransferConfig>
 80026d6:	e00f      	b.n	80026f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	8979      	ldrh	r1, [r7, #10]
 80026ea:	2300      	movs	r3, #0
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fc2c 	bl	8002f50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fabc 	bl	8002c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e07b      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d034      	beq.n	80027b0 <HAL_I2C_Mem_Write+0x1c8>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274a:	2b00      	cmp	r3, #0
 800274c:	d130      	bne.n	80027b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002754:	2200      	movs	r2, #0
 8002756:	2180      	movs	r1, #128	@ 0x80
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fa3f 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e04d      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276c:	b29b      	uxth	r3, r3
 800276e:	2bff      	cmp	r3, #255	@ 0xff
 8002770:	d90e      	bls.n	8002790 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	22ff      	movs	r2, #255	@ 0xff
 8002776:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277c:	b2da      	uxtb	r2, r3
 800277e:	8979      	ldrh	r1, [r7, #10]
 8002780:	2300      	movs	r3, #0
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 fbe1 	bl	8002f50 <I2C_TransferConfig>
 800278e:	e00f      	b.n	80027b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	8979      	ldrh	r1, [r7, #10]
 80027a2:	2300      	movs	r3, #0
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fbd0 	bl	8002f50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d19e      	bne.n	80026f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 faa2 	bl	8002d08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e01a      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2220      	movs	r2, #32
 80027d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b0a      	ldr	r3, [pc, #40]	@ (800280c <HAL_I2C_Mem_Write+0x224>)
 80027e2:	400b      	ands	r3, r1
 80027e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e000      	b.n	8002804 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002802:	2302      	movs	r3, #2
  }
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	fe00e800 	.word	0xfe00e800

08002810 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	4608      	mov	r0, r1
 800281a:	4611      	mov	r1, r2
 800281c:	461a      	mov	r2, r3
 800281e:	4603      	mov	r3, r0
 8002820:	817b      	strh	r3, [r7, #10]
 8002822:	460b      	mov	r3, r1
 8002824:	813b      	strh	r3, [r7, #8]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b20      	cmp	r3, #32
 8002834:	f040 80fd 	bne.w	8002a32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_I2C_Mem_Read+0x34>
 800283e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800284a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0f1      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_I2C_Mem_Read+0x4e>
 800285a:	2302      	movs	r3, #2
 800285c:	e0ea      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002866:	f7ff fb43 	bl	8001ef0 <HAL_GetTick>
 800286a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2319      	movs	r3, #25
 8002872:	2201      	movs	r2, #1
 8002874:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f9af 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0d5      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2222      	movs	r2, #34	@ 0x22
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2240      	movs	r2, #64	@ 0x40
 8002894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a3a      	ldr	r2, [r7, #32]
 80028a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028b0:	88f8      	ldrh	r0, [r7, #6]
 80028b2:	893a      	ldrh	r2, [r7, #8]
 80028b4:	8979      	ldrh	r1, [r7, #10]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	4603      	mov	r3, r0
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f913 	bl	8002aec <I2C_RequestMemoryRead>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0ad      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2bff      	cmp	r3, #255	@ 0xff
 80028e0:	d90e      	bls.n	8002900 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	22ff      	movs	r2, #255	@ 0xff
 80028e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	8979      	ldrh	r1, [r7, #10]
 80028f0:	4b52      	ldr	r3, [pc, #328]	@ (8002a3c <HAL_I2C_Mem_Read+0x22c>)
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fb29 	bl	8002f50 <I2C_TransferConfig>
 80028fe:	e00f      	b.n	8002920 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290e:	b2da      	uxtb	r2, r3
 8002910:	8979      	ldrh	r1, [r7, #10]
 8002912:	4b4a      	ldr	r3, [pc, #296]	@ (8002a3c <HAL_I2C_Mem_Read+0x22c>)
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fb18 	bl	8002f50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002926:	2200      	movs	r2, #0
 8002928:	2104      	movs	r1, #4
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f956 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e07c      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d034      	beq.n	80029e0 <HAL_I2C_Mem_Read+0x1d0>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297a:	2b00      	cmp	r3, #0
 800297c:	d130      	bne.n	80029e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002984:	2200      	movs	r2, #0
 8002986:	2180      	movs	r1, #128	@ 0x80
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f927 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e04d      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299c:	b29b      	uxth	r3, r3
 800299e:	2bff      	cmp	r3, #255	@ 0xff
 80029a0:	d90e      	bls.n	80029c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	22ff      	movs	r2, #255	@ 0xff
 80029a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	8979      	ldrh	r1, [r7, #10]
 80029b0:	2300      	movs	r3, #0
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fac9 	bl	8002f50 <I2C_TransferConfig>
 80029be:	e00f      	b.n	80029e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	8979      	ldrh	r1, [r7, #10]
 80029d2:	2300      	movs	r3, #0
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fab8 	bl	8002f50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d19a      	bne.n	8002920 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f98a 	bl	8002d08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e01a      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2220      	movs	r2, #32
 8002a04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <HAL_I2C_Mem_Read+0x230>)
 8002a12:	400b      	ands	r3, r1
 8002a14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e000      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
  }
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	80002400 	.word	0x80002400
 8002a40:	fe00e800 	.word	0xfe00e800

08002a44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	4608      	mov	r0, r1
 8002a4e:	4611      	mov	r1, r2
 8002a50:	461a      	mov	r2, r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	817b      	strh	r3, [r7, #10]
 8002a56:	460b      	mov	r3, r1
 8002a58:	813b      	strh	r3, [r7, #8]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	8979      	ldrh	r1, [r7, #10]
 8002a64:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <I2C_RequestMemoryWrite+0xa4>)
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fa6f 	bl	8002f50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	69b9      	ldr	r1, [r7, #24]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f8ff 	bl	8002c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e02c      	b.n	8002ae0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d105      	bne.n	8002a98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a8c:	893b      	ldrh	r3, [r7, #8]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a96:	e015      	b.n	8002ac4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a98:	893b      	ldrh	r3, [r7, #8]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	69b9      	ldr	r1, [r7, #24]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f8e5 	bl	8002c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e012      	b.n	8002ae0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aba:	893b      	ldrh	r3, [r7, #8]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2200      	movs	r2, #0
 8002acc:	2180      	movs	r1, #128	@ 0x80
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f884 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	80002000 	.word	0x80002000

08002aec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	4608      	mov	r0, r1
 8002af6:	4611      	mov	r1, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	817b      	strh	r3, [r7, #10]
 8002afe:	460b      	mov	r3, r1
 8002b00:	813b      	strh	r3, [r7, #8]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	8979      	ldrh	r1, [r7, #10]
 8002b0c:	4b20      	ldr	r3, [pc, #128]	@ (8002b90 <I2C_RequestMemoryRead+0xa4>)
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	2300      	movs	r3, #0
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fa1c 	bl	8002f50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b18:	69fa      	ldr	r2, [r7, #28]
 8002b1a:	69b9      	ldr	r1, [r7, #24]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f8ac 	bl	8002c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e02c      	b.n	8002b86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d105      	bne.n	8002b3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b32:	893b      	ldrh	r3, [r7, #8]
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b3c:	e015      	b.n	8002b6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b3e:	893b      	ldrh	r3, [r7, #8]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	69b9      	ldr	r1, [r7, #24]
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f892 	bl	8002c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e012      	b.n	8002b86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b60:	893b      	ldrh	r3, [r7, #8]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2140      	movs	r1, #64	@ 0x40
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f831 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	80002000 	.word	0x80002000

08002b94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d103      	bne.n	8002bb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d007      	beq.n	8002bd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	619a      	str	r2, [r3, #24]
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bec:	e031      	b.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bf4:	d02d      	beq.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf6:	f7ff f97b 	bl	8001ef0 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d302      	bcc.n	8002c0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d122      	bne.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4013      	ands	r3, r2
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d113      	bne.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	f043 0220 	orr.w	r2, r3, #32
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00f      	b.n	8002c72 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d0be      	beq.n	8002bee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c86:	e033      	b.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f87f 	bl	8002d90 <I2C_IsErrorOccurred>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e031      	b.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ca2:	d025      	beq.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca4:	f7ff f924 	bl	8001ef0 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d302      	bcc.n	8002cba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d11a      	bne.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d013      	beq.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e007      	b.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d1c4      	bne.n	8002c88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d14:	e02f      	b.n	8002d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f838 	bl	8002d90 <I2C_IsErrorOccurred>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e02d      	b.n	8002d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2a:	f7ff f8e1 	bl	8001ef0 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d302      	bcc.n	8002d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d11a      	bne.n	8002d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d013      	beq.n	8002d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	f043 0220 	orr.w	r2, r3, #32
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e007      	b.n	8002d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d1c8      	bne.n	8002d16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	@ 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d068      	beq.n	8002e8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dc4:	e049      	b.n	8002e5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dcc:	d045      	beq.n	8002e5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dce:	f7ff f88f 	bl	8001ef0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <I2C_IsErrorOccurred+0x54>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d13a      	bne.n	8002e5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002df6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e06:	d121      	bne.n	8002e4c <I2C_IsErrorOccurred+0xbc>
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e0e:	d01d      	beq.n	8002e4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e10:	7cfb      	ldrb	r3, [r7, #19]
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d01a      	beq.n	8002e4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e26:	f7ff f863 	bl	8001ef0 <HAL_GetTick>
 8002e2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e2c:	e00e      	b.n	8002e4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e2e:	f7ff f85f 	bl	8001ef0 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b19      	cmp	r3, #25
 8002e3a:	d907      	bls.n	8002e4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	f043 0320 	orr.w	r3, r3, #32
 8002e42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002e4a:	e006      	b.n	8002e5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	d1e9      	bne.n	8002e2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d003      	beq.n	8002e70 <I2C_IsErrorOccurred+0xe0>
 8002e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0aa      	beq.n	8002dc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d103      	bne.n	8002e80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00b      	beq.n	8002eb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002eb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	f043 0308 	orr.w	r3, r3, #8
 8002ec8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ed2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	f043 0302 	orr.w	r3, r3, #2
 8002eea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ef4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01c      	beq.n	8002f3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff fe45 	bl	8002b94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b0d      	ldr	r3, [pc, #52]	@ (8002f4c <I2C_IsErrorOccurred+0x1bc>)
 8002f16:	400b      	ands	r3, r1
 8002f18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3728      	adds	r7, #40	@ 0x28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	fe00e800 	.word	0xfe00e800

08002f50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	817b      	strh	r3, [r7, #10]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f62:	897b      	ldrh	r3, [r7, #10]
 8002f64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f68:	7a7b      	ldrb	r3, [r7, #9]
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	0d5b      	lsrs	r3, r3, #21
 8002f8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002f8e:	4b08      	ldr	r3, [pc, #32]	@ (8002fb0 <I2C_TransferConfig+0x60>)
 8002f90:	430b      	orrs	r3, r1
 8002f92:	43db      	mvns	r3, r3
 8002f94:	ea02 0103 	and.w	r1, r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	03ff63ff 	.word	0x03ff63ff

08002fb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d138      	bne.n	800303c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e032      	b.n	800303e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2224      	movs	r2, #36	@ 0x24
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003006:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6819      	ldr	r1, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e000      	b.n	800303e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
  }
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b20      	cmp	r3, #32
 800305e:	d139      	bne.n	80030d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800306a:	2302      	movs	r3, #2
 800306c:	e033      	b.n	80030d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2224      	movs	r2, #36	@ 0x24
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0201 	bic.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800309c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e4:	b08b      	sub	sp, #44	@ 0x2c
 80030e6:	af06      	add	r7, sp, #24
 80030e8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0c4      	b.n	800327e <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7fe fd9d 	bl	8001c48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2203      	movs	r2, #3
 8003112:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f003 fa6e 	bl	80065fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]
 8003124:	e040      	b.n	80031a8 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	440b      	add	r3, r1
 8003136:	3301      	adds	r3, #1
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	440b      	add	r3, r1
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	440b      	add	r3, r1
 8003160:	3303      	adds	r3, #3
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	3338      	adds	r3, #56	@ 0x38
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	440b      	add	r3, r1
 8003188:	333c      	adds	r3, #60	@ 0x3c
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	440b      	add	r3, r1
 800319c:	3340      	adds	r3, #64	@ 0x40
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	3301      	adds	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d3b9      	bcc.n	8003126 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	73fb      	strb	r3, [r7, #15]
 80031b6:	e044      	b.n	8003242 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	440b      	add	r3, r1
 80031dc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	440b      	add	r3, r1
 80031f2:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031fa:	7bfa      	ldrb	r2, [r7, #15]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	440b      	add	r3, r1
 800321e:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	3301      	adds	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	7bfa      	ldrb	r2, [r7, #15]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d3b5      	bcc.n	80031b8 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	603b      	str	r3, [r7, #0]
 8003252:	687e      	ldr	r6, [r7, #4]
 8003254:	466d      	mov	r5, sp
 8003256:	f106 0410 	add.w	r4, r6, #16
 800325a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800325c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	602b      	str	r3, [r5, #0]
 8003262:	1d33      	adds	r3, r6, #4
 8003264:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003266:	6838      	ldr	r0, [r7, #0]
 8003268:	f003 f9e3 	bl	8006632 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800328e:	af00      	add	r7, sp, #0
 8003290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003294:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003298:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800329a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f001 b823 	b.w	80042f4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 817d 	beq.w	80035be <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032c4:	4bbc      	ldr	r3, [pc, #752]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 030c 	and.w	r3, r3, #12
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d00c      	beq.n	80032ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032d0:	4bb9      	ldr	r3, [pc, #740]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d15c      	bne.n	8003396 <HAL_RCC_OscConfig+0x10e>
 80032dc:	4bb6      	ldr	r3, [pc, #728]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032e8:	d155      	bne.n	8003396 <HAL_RCC_OscConfig+0x10e>
 80032ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032ee:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d102      	bne.n	800331c <HAL_RCC_OscConfig+0x94>
 8003316:	4ba8      	ldr	r3, [pc, #672]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	e015      	b.n	8003348 <HAL_RCC_OscConfig+0xc0>
 800331c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003320:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003330:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003334:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003338:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003344:	4b9c      	ldr	r3, [pc, #624]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800334c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003350:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003354:	fa92 f2a2 	rbit	r2, r2
 8003358:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800335c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003360:	fab2 f282 	clz	r2, r2
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	f042 0220 	orr.w	r2, r2, #32
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	f002 021f 	and.w	r2, r2, #31
 8003370:	2101      	movs	r1, #1
 8003372:	fa01 f202 	lsl.w	r2, r1, r2
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 811f 	beq.w	80035bc <HAL_RCC_OscConfig+0x334>
 800337e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003382:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f040 8116 	bne.w	80035bc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	f000 bfaf 	b.w	80042f4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a6:	d106      	bne.n	80033b6 <HAL_RCC_OscConfig+0x12e>
 80033a8:	4b83      	ldr	r3, [pc, #524]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a82      	ldr	r2, [pc, #520]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 80033ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	e036      	b.n	8003424 <HAL_RCC_OscConfig+0x19c>
 80033b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x158>
 80033c6:	4b7c      	ldr	r3, [pc, #496]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a7b      	ldr	r2, [pc, #492]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 80033cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b79      	ldr	r3, [pc, #484]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a78      	ldr	r2, [pc, #480]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 80033d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e021      	b.n	8003424 <HAL_RCC_OscConfig+0x19c>
 80033e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x184>
 80033f2:	4b71      	ldr	r3, [pc, #452]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a70      	ldr	r2, [pc, #448]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b6e      	ldr	r3, [pc, #440]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6d      	ldr	r2, [pc, #436]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0x19c>
 800340c:	4b6a      	ldr	r3, [pc, #424]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a69      	ldr	r2, [pc, #420]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b67      	ldr	r3, [pc, #412]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a66      	ldr	r2, [pc, #408]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003422:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003424:	4b64      	ldr	r3, [pc, #400]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 8003426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003428:	f023 020f 	bic.w	r2, r3, #15
 800342c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003430:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	495f      	ldr	r1, [pc, #380]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 800343a:	4313      	orrs	r3, r2
 800343c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800343e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003442:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d059      	beq.n	8003502 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fe fd4f 	bl	8001ef0 <HAL_GetTick>
 8003452:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	e00a      	b.n	800346e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003458:	f7fe fd4a 	bl	8001ef0 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b64      	cmp	r3, #100	@ 0x64
 8003466:	d902      	bls.n	800346e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	f000 bf43 	b.w	80042f4 <HAL_RCC_OscConfig+0x106c>
 800346e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003472:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003482:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	d102      	bne.n	80034a0 <HAL_RCC_OscConfig+0x218>
 800349a:	4b47      	ldr	r3, [pc, #284]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	e015      	b.n	80034cc <HAL_RCC_OscConfig+0x244>
 80034a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034a4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80034b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034b8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80034bc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80034c8:	4b3b      	ldr	r3, [pc, #236]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034d0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80034d4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80034d8:	fa92 f2a2 	rbit	r2, r2
 80034dc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80034e0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80034e4:	fab2 f282 	clz	r2, r2
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	f042 0220 	orr.w	r2, r2, #32
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	f002 021f 	and.w	r2, r2, #31
 80034f4:	2101      	movs	r1, #1
 80034f6:	fa01 f202 	lsl.w	r2, r1, r2
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0ab      	beq.n	8003458 <HAL_RCC_OscConfig+0x1d0>
 8003500:	e05d      	b.n	80035be <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003502:	f7fe fcf5 	bl	8001ef0 <HAL_GetTick>
 8003506:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350a:	e00a      	b.n	8003522 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800350c:	f7fe fcf0 	bl	8001ef0 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b64      	cmp	r3, #100	@ 0x64
 800351a:	d902      	bls.n	8003522 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	f000 bee9 	b.w	80042f4 <HAL_RCC_OscConfig+0x106c>
 8003522:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003526:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003536:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d102      	bne.n	8003554 <HAL_RCC_OscConfig+0x2cc>
 800354e:	4b1a      	ldr	r3, [pc, #104]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	e015      	b.n	8003580 <HAL_RCC_OscConfig+0x2f8>
 8003554:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003558:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003568:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800356c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003570:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800357c:	4b0e      	ldr	r3, [pc, #56]	@ (80035b8 <HAL_RCC_OscConfig+0x330>)
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003584:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003588:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800358c:	fa92 f2a2 	rbit	r2, r2
 8003590:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003594:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003598:	fab2 f282 	clz	r2, r2
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	f042 0220 	orr.w	r2, r2, #32
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	f002 021f 	and.w	r2, r2, #31
 80035a8:	2101      	movs	r1, #1
 80035aa:	fa01 f202 	lsl.w	r2, r1, r2
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1ab      	bne.n	800350c <HAL_RCC_OscConfig+0x284>
 80035b4:	e003      	b.n	80035be <HAL_RCC_OscConfig+0x336>
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 817d 	beq.w	80038ce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035d4:	4ba6      	ldr	r3, [pc, #664]	@ (8003870 <HAL_RCC_OscConfig+0x5e8>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 030c 	and.w	r3, r3, #12
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035e0:	4ba3      	ldr	r3, [pc, #652]	@ (8003870 <HAL_RCC_OscConfig+0x5e8>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d172      	bne.n	80036d2 <HAL_RCC_OscConfig+0x44a>
 80035ec:	4ba0      	ldr	r3, [pc, #640]	@ (8003870 <HAL_RCC_OscConfig+0x5e8>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d16c      	bne.n	80036d2 <HAL_RCC_OscConfig+0x44a>
 80035f8:	2302      	movs	r3, #2
 80035fa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800360a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360e:	fab3 f383 	clz	r3, r3
 8003612:	b2db      	uxtb	r3, r3
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	d102      	bne.n	8003628 <HAL_RCC_OscConfig+0x3a0>
 8003622:	4b93      	ldr	r3, [pc, #588]	@ (8003870 <HAL_RCC_OscConfig+0x5e8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	e013      	b.n	8003650 <HAL_RCC_OscConfig+0x3c8>
 8003628:	2302      	movs	r3, #2
 800362a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800363a:	2302      	movs	r3, #2
 800363c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003640:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003644:	fa93 f3a3 	rbit	r3, r3
 8003648:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800364c:	4b88      	ldr	r3, [pc, #544]	@ (8003870 <HAL_RCC_OscConfig+0x5e8>)
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	2202      	movs	r2, #2
 8003652:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003656:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800365a:	fa92 f2a2 	rbit	r2, r2
 800365e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003662:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003666:	fab2 f282 	clz	r2, r2
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	f042 0220 	orr.w	r2, r2, #32
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	f002 021f 	and.w	r2, r2, #31
 8003676:	2101      	movs	r1, #1
 8003678:	fa01 f202 	lsl.w	r2, r1, r2
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_RCC_OscConfig+0x410>
 8003682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003686:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d002      	beq.n	8003698 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	f000 be2e 	b.w	80042f4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003698:	4b75      	ldr	r3, [pc, #468]	@ (8003870 <HAL_RCC_OscConfig+0x5e8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	21f8      	movs	r1, #248	@ 0xf8
 80036ae:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80036b6:	fa91 f1a1 	rbit	r1, r1
 80036ba:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80036be:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80036c2:	fab1 f181 	clz	r1, r1
 80036c6:	b2c9      	uxtb	r1, r1
 80036c8:	408b      	lsls	r3, r1
 80036ca:	4969      	ldr	r1, [pc, #420]	@ (8003870 <HAL_RCC_OscConfig+0x5e8>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d0:	e0fd      	b.n	80038ce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8088 	beq.w	80037f4 <HAL_RCC_OscConfig+0x56c>
 80036e4:	2301      	movs	r3, #1
 80036e6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80036f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003704:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	461a      	mov	r2, r3
 800370c:	2301      	movs	r3, #1
 800370e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003710:	f7fe fbee 	bl	8001ef0 <HAL_GetTick>
 8003714:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003718:	e00a      	b.n	8003730 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371a:	f7fe fbe9 	bl	8001ef0 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d902      	bls.n	8003730 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	f000 bde2 	b.w	80042f4 <HAL_RCC_OscConfig+0x106c>
 8003730:	2302      	movs	r3, #2
 8003732:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003742:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	d102      	bne.n	8003760 <HAL_RCC_OscConfig+0x4d8>
 800375a:	4b45      	ldr	r3, [pc, #276]	@ (8003870 <HAL_RCC_OscConfig+0x5e8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	e013      	b.n	8003788 <HAL_RCC_OscConfig+0x500>
 8003760:	2302      	movs	r3, #2
 8003762:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003772:	2302      	movs	r3, #2
 8003774:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003778:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800377c:	fa93 f3a3 	rbit	r3, r3
 8003780:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003784:	4b3a      	ldr	r3, [pc, #232]	@ (8003870 <HAL_RCC_OscConfig+0x5e8>)
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	2202      	movs	r2, #2
 800378a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800378e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003792:	fa92 f2a2 	rbit	r2, r2
 8003796:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800379a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800379e:	fab2 f282 	clz	r2, r2
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	f042 0220 	orr.w	r2, r2, #32
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	f002 021f 	and.w	r2, r2, #31
 80037ae:	2101      	movs	r1, #1
 80037b0:	fa01 f202 	lsl.w	r2, r1, r2
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0af      	beq.n	800371a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003870 <HAL_RCC_OscConfig+0x5e8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	21f8      	movs	r1, #248	@ 0xf8
 80037d0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80037d8:	fa91 f1a1 	rbit	r1, r1
 80037dc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80037e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80037e4:	fab1 f181 	clz	r1, r1
 80037e8:	b2c9      	uxtb	r1, r1
 80037ea:	408b      	lsls	r3, r1
 80037ec:	4920      	ldr	r1, [pc, #128]	@ (8003870 <HAL_RCC_OscConfig+0x5e8>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]
 80037f2:	e06c      	b.n	80038ce <HAL_RCC_OscConfig+0x646>
 80037f4:	2301      	movs	r3, #1
 80037f6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80037fe:	fa93 f3a3 	rbit	r3, r3
 8003802:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003806:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003814:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	461a      	mov	r2, r3
 800381c:	2300      	movs	r3, #0
 800381e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fe fb66 	bl	8001ef0 <HAL_GetTick>
 8003824:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800382a:	f7fe fb61 	bl	8001ef0 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d902      	bls.n	8003840 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	f000 bd5a 	b.w	80042f4 <HAL_RCC_OscConfig+0x106c>
 8003840:	2302      	movs	r3, #2
 8003842:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003852:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	b2db      	uxtb	r3, r3
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b01      	cmp	r3, #1
 8003868:	d104      	bne.n	8003874 <HAL_RCC_OscConfig+0x5ec>
 800386a:	4b01      	ldr	r3, [pc, #4]	@ (8003870 <HAL_RCC_OscConfig+0x5e8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	e015      	b.n	800389c <HAL_RCC_OscConfig+0x614>
 8003870:	40021000 	.word	0x40021000
 8003874:	2302      	movs	r3, #2
 8003876:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800387e:	fa93 f3a3 	rbit	r3, r3
 8003882:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003886:	2302      	movs	r3, #2
 8003888:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800388c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003898:	4bc8      	ldr	r3, [pc, #800]	@ (8003bbc <HAL_RCC_OscConfig+0x934>)
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	2202      	movs	r2, #2
 800389e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80038a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80038a6:	fa92 f2a2 	rbit	r2, r2
 80038aa:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80038ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80038b2:	fab2 f282 	clz	r2, r2
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	f042 0220 	orr.w	r2, r2, #32
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	f002 021f 	and.w	r2, r2, #31
 80038c2:	2101      	movs	r1, #1
 80038c4:	fa01 f202 	lsl.w	r2, r1, r2
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1ad      	bne.n	800382a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8110 	beq.w	8003b04 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d079      	beq.n	80039e8 <HAL_RCC_OscConfig+0x760>
 80038f4:	2301      	movs	r3, #1
 80038f6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390a:	fab3 f383 	clz	r3, r3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	4bab      	ldr	r3, [pc, #684]	@ (8003bc0 <HAL_RCC_OscConfig+0x938>)
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	461a      	mov	r2, r3
 800391a:	2301      	movs	r3, #1
 800391c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391e:	f7fe fae7 	bl	8001ef0 <HAL_GetTick>
 8003922:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003926:	e00a      	b.n	800393e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003928:	f7fe fae2 	bl	8001ef0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d902      	bls.n	800393e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	f000 bcdb 	b.w	80042f4 <HAL_RCC_OscConfig+0x106c>
 800393e:	2302      	movs	r3, #2
 8003940:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003948:	fa93 f3a3 	rbit	r3, r3
 800394c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003954:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003958:	2202      	movs	r2, #2
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003960:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	fa93 f2a3 	rbit	r2, r3
 800396a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800397c:	2202      	movs	r2, #2
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	fa93 f2a3 	rbit	r2, r3
 800398e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003992:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003996:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003998:	4b88      	ldr	r3, [pc, #544]	@ (8003bbc <HAL_RCC_OscConfig+0x934>)
 800399a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800399c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80039a4:	2102      	movs	r1, #2
 80039a6:	6019      	str	r1, [r3, #0]
 80039a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	fa93 f1a3 	rbit	r1, r3
 80039b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80039be:	6019      	str	r1, [r3, #0]
  return result;
 80039c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	fab3 f383 	clz	r3, r3
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	2101      	movs	r1, #1
 80039dc:	fa01 f303 	lsl.w	r3, r1, r3
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0a0      	beq.n	8003928 <HAL_RCC_OscConfig+0x6a0>
 80039e6:	e08d      	b.n	8003b04 <HAL_RCC_OscConfig+0x87c>
 80039e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	fa93 f2a3 	rbit	r2, r3
 8003a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a06:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003a0a:	601a      	str	r2, [r3, #0]
  return result;
 8003a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a10:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003a14:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a16:	fab3 f383 	clz	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4b68      	ldr	r3, [pc, #416]	@ (8003bc0 <HAL_RCC_OscConfig+0x938>)
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	461a      	mov	r2, r3
 8003a26:	2300      	movs	r3, #0
 8003a28:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2a:	f7fe fa61 	bl	8001ef0 <HAL_GetTick>
 8003a2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a34:	f7fe fa5c 	bl	8001ef0 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d902      	bls.n	8003a4a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	f000 bc55 	b.w	80042f4 <HAL_RCC_OscConfig+0x106c>
 8003a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a52:	2202      	movs	r2, #2
 8003a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	fa93 f2a3 	rbit	r2, r3
 8003a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a68:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a72:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a76:	2202      	movs	r2, #2
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	fa93 f2a3 	rbit	r2, r3
 8003a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a96:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	fa93 f2a3 	rbit	r2, r3
 8003aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003ab4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab6:	4b41      	ldr	r3, [pc, #260]	@ (8003bbc <HAL_RCC_OscConfig+0x934>)
 8003ab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003abe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	6019      	str	r1, [r3, #0]
 8003ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	fa93 f1a3 	rbit	r1, r3
 8003ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003adc:	6019      	str	r1, [r3, #0]
  return result;
 8003ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	fab3 f383 	clz	r3, r3
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	2101      	movs	r1, #1
 8003afa:	fa01 f303 	lsl.w	r3, r1, r3
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d197      	bne.n	8003a34 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 81a1 	beq.w	8003e5c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b20:	4b26      	ldr	r3, [pc, #152]	@ (8003bbc <HAL_RCC_OscConfig+0x934>)
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d116      	bne.n	8003b5a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2c:	4b23      	ldr	r3, [pc, #140]	@ (8003bbc <HAL_RCC_OscConfig+0x934>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	4a22      	ldr	r2, [pc, #136]	@ (8003bbc <HAL_RCC_OscConfig+0x934>)
 8003b32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b36:	61d3      	str	r3, [r2, #28]
 8003b38:	4b20      	ldr	r3, [pc, #128]	@ (8003bbc <HAL_RCC_OscConfig+0x934>)
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b44:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b4e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003b52:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b54:	2301      	movs	r3, #1
 8003b56:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc4 <HAL_RCC_OscConfig+0x93c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11a      	bne.n	8003b9c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b66:	4b17      	ldr	r3, [pc, #92]	@ (8003bc4 <HAL_RCC_OscConfig+0x93c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a16      	ldr	r2, [pc, #88]	@ (8003bc4 <HAL_RCC_OscConfig+0x93c>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b72:	f7fe f9bd 	bl	8001ef0 <HAL_GetTick>
 8003b76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7a:	e009      	b.n	8003b90 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7c:	f7fe f9b8 	bl	8001ef0 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b64      	cmp	r3, #100	@ 0x64
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e3b1      	b.n	80042f4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc4 <HAL_RCC_OscConfig+0x93c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0ef      	beq.n	8003b7c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d10d      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x940>
 8003bac:	4b03      	ldr	r3, [pc, #12]	@ (8003bbc <HAL_RCC_OscConfig+0x934>)
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	4a02      	ldr	r2, [pc, #8]	@ (8003bbc <HAL_RCC_OscConfig+0x934>)
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	6213      	str	r3, [r2, #32]
 8003bb8:	e03c      	b.n	8003c34 <HAL_RCC_OscConfig+0x9ac>
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	10908120 	.word	0x10908120
 8003bc4:	40007000 	.word	0x40007000
 8003bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10c      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x96a>
 8003bd8:	4bc1      	ldr	r3, [pc, #772]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	4ac0      	ldr	r2, [pc, #768]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	6213      	str	r3, [r2, #32]
 8003be4:	4bbe      	ldr	r3, [pc, #760]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	4abd      	ldr	r2, [pc, #756]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003bea:	f023 0304 	bic.w	r3, r3, #4
 8003bee:	6213      	str	r3, [r2, #32]
 8003bf0:	e020      	b.n	8003c34 <HAL_RCC_OscConfig+0x9ac>
 8003bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b05      	cmp	r3, #5
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x994>
 8003c02:	4bb7      	ldr	r3, [pc, #732]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	4ab6      	ldr	r2, [pc, #728]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	6213      	str	r3, [r2, #32]
 8003c0e:	4bb4      	ldr	r3, [pc, #720]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	4ab3      	ldr	r2, [pc, #716]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	6213      	str	r3, [r2, #32]
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0x9ac>
 8003c1c:	4bb0      	ldr	r3, [pc, #704]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4aaf      	ldr	r2, [pc, #700]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	6213      	str	r3, [r2, #32]
 8003c28:	4bad      	ldr	r3, [pc, #692]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	4aac      	ldr	r2, [pc, #688]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003c2e:	f023 0304 	bic.w	r3, r3, #4
 8003c32:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8081 	beq.w	8003d48 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c46:	f7fe f953 	bl	8001ef0 <HAL_GetTick>
 8003c4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4e:	e00b      	b.n	8003c68 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fe f94e 	bl	8001ef0 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e345      	b.n	80042f4 <HAL_RCC_OscConfig+0x106c>
 8003c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003c70:	2202      	movs	r2, #2
 8003c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c78:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	fa93 f2a3 	rbit	r2, r3
 8003c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c86:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c90:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c94:	2202      	movs	r2, #2
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c9c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	fa93 f2a3 	rbit	r2, r3
 8003ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003caa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003cae:	601a      	str	r2, [r3, #0]
  return result;
 8003cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003cb8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cba:	fab3 f383 	clz	r3, r3
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f043 0302 	orr.w	r3, r3, #2
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d102      	bne.n	8003cd4 <HAL_RCC_OscConfig+0xa4c>
 8003cce:	4b84      	ldr	r3, [pc, #528]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	e013      	b.n	8003cfc <HAL_RCC_OscConfig+0xa74>
 8003cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003cdc:	2202      	movs	r2, #2
 8003cde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	fa93 f2a3 	rbit	r2, r3
 8003cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	4b79      	ldr	r3, [pc, #484]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d00:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003d04:	2102      	movs	r1, #2
 8003d06:	6011      	str	r1, [r2, #0]
 8003d08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d0c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	fa92 f1a2 	rbit	r1, r2
 8003d16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d1a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003d1e:	6011      	str	r1, [r2, #0]
  return result;
 8003d20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d24:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	fab2 f282 	clz	r2, r2
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	f002 021f 	and.w	r2, r2, #31
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d084      	beq.n	8003c50 <HAL_RCC_OscConfig+0x9c8>
 8003d46:	e07f      	b.n	8003e48 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d48:	f7fe f8d2 	bl	8001ef0 <HAL_GetTick>
 8003d4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d50:	e00b      	b.n	8003d6a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fe f8cd 	bl	8001ef0 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e2c4      	b.n	80042f4 <HAL_RCC_OscConfig+0x106c>
 8003d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003d72:	2202      	movs	r2, #2
 8003d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d7a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	fa93 f2a3 	rbit	r2, r3
 8003d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d88:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d92:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d96:	2202      	movs	r2, #2
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	fa93 f2a3 	rbit	r2, r3
 8003da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003db0:	601a      	str	r2, [r3, #0]
  return result;
 8003db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003dba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dbc:	fab3 f383 	clz	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f043 0302 	orr.w	r3, r3, #2
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d102      	bne.n	8003dd6 <HAL_RCC_OscConfig+0xb4e>
 8003dd0:	4b43      	ldr	r3, [pc, #268]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	e013      	b.n	8003dfe <HAL_RCC_OscConfig+0xb76>
 8003dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dda:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003dde:	2202      	movs	r2, #2
 8003de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	fa93 f2a3 	rbit	r2, r3
 8003df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	4b39      	ldr	r3, [pc, #228]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e02:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003e06:	2102      	movs	r1, #2
 8003e08:	6011      	str	r1, [r2, #0]
 8003e0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e0e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	fa92 f1a2 	rbit	r1, r2
 8003e18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e1c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003e20:	6011      	str	r1, [r2, #0]
  return result;
 8003e22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e26:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	fab2 f282 	clz	r2, r2
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	f002 021f 	and.w	r2, r2, #31
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d184      	bne.n	8003d52 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e48:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e50:	4b23      	ldr	r3, [pc, #140]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	4a22      	ldr	r2, [pc, #136]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8242 	beq.w	80042f2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ee0 <HAL_RCC_OscConfig+0xc58>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	f000 8213 	beq.w	80042a2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	f040 8162 	bne.w	8004152 <HAL_RCC_OscConfig+0xeca>
 8003e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e92:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e96:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	fa93 f2a3 	rbit	r2, r3
 8003eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003eb2:	601a      	str	r2, [r3, #0]
  return result;
 8003eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003ebc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ec8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	461a      	mov	r2, r3
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fe f80c 	bl	8001ef0 <HAL_GetTick>
 8003ed8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003edc:	e00c      	b.n	8003ef8 <HAL_RCC_OscConfig+0xc70>
 8003ede:	bf00      	nop
 8003ee0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fe f804 	bl	8001ef0 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e1fd      	b.n	80042f4 <HAL_RCC_OscConfig+0x106c>
 8003ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003efc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003f00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	fa93 f2a3 	rbit	r2, r3
 8003f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f18:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003f1c:	601a      	str	r2, [r3, #0]
  return result;
 8003f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f22:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003f26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f28:	fab3 f383 	clz	r3, r3
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d102      	bne.n	8003f42 <HAL_RCC_OscConfig+0xcba>
 8003f3c:	4bb0      	ldr	r3, [pc, #704]	@ (8004200 <HAL_RCC_OscConfig+0xf78>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	e027      	b.n	8003f92 <HAL_RCC_OscConfig+0xd0a>
 8003f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f46:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003f4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f54:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	fa93 f2a3 	rbit	r2, r3
 8003f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f62:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f6c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003f70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f7a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	fa93 f2a3 	rbit	r2, r3
 8003f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f88:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	4b9c      	ldr	r3, [pc, #624]	@ (8004200 <HAL_RCC_OscConfig+0xf78>)
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f96:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003f9a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f9e:	6011      	str	r1, [r2, #0]
 8003fa0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fa4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	fa92 f1a2 	rbit	r1, r2
 8003fae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fb2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003fb6:	6011      	str	r1, [r2, #0]
  return result;
 8003fb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fbc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	fab2 f282 	clz	r2, r2
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	f042 0220 	orr.w	r2, r2, #32
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	f002 021f 	and.w	r2, r2, #31
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd8:	4013      	ands	r3, r2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d182      	bne.n	8003ee4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fde:	4b88      	ldr	r3, [pc, #544]	@ (8004200 <HAL_RCC_OscConfig+0xf78>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	430b      	orrs	r3, r1
 8004000:	497f      	ldr	r1, [pc, #508]	@ (8004200 <HAL_RCC_OscConfig+0xf78>)
 8004002:	4313      	orrs	r3, r2
 8004004:	604b      	str	r3, [r1, #4]
 8004006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800400a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800400e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004012:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004018:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	fa93 f2a3 	rbit	r2, r3
 8004022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004026:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800402a:	601a      	str	r2, [r3, #0]
  return result;
 800402c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004030:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004034:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004036:	fab3 f383 	clz	r3, r3
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004040:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	461a      	mov	r2, r3
 8004048:	2301      	movs	r3, #1
 800404a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fd ff50 	bl	8001ef0 <HAL_GetTick>
 8004050:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004054:	e009      	b.n	800406a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004056:	f7fd ff4b 	bl	8001ef0 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e144      	b.n	80042f4 <HAL_RCC_OscConfig+0x106c>
 800406a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800406e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004072:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004076:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800407c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	fa93 f2a3 	rbit	r2, r3
 8004086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800408a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800408e:	601a      	str	r2, [r3, #0]
  return result;
 8004090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004094:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004098:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800409a:	fab3 f383 	clz	r3, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d102      	bne.n	80040b4 <HAL_RCC_OscConfig+0xe2c>
 80040ae:	4b54      	ldr	r3, [pc, #336]	@ (8004200 <HAL_RCC_OscConfig+0xf78>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	e027      	b.n	8004104 <HAL_RCC_OscConfig+0xe7c>
 80040b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80040bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	fa93 f2a3 	rbit	r2, r3
 80040d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040de:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80040e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ec:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	fa93 f2a3 	rbit	r2, r3
 80040f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040fa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	4b3f      	ldr	r3, [pc, #252]	@ (8004200 <HAL_RCC_OscConfig+0xf78>)
 8004102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004104:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004108:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800410c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004110:	6011      	str	r1, [r2, #0]
 8004112:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004116:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	fa92 f1a2 	rbit	r1, r2
 8004120:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004124:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004128:	6011      	str	r1, [r2, #0]
  return result;
 800412a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800412e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	fab2 f282 	clz	r2, r2
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	f042 0220 	orr.w	r2, r2, #32
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	f002 021f 	and.w	r2, r2, #31
 8004144:	2101      	movs	r1, #1
 8004146:	fa01 f202 	lsl.w	r2, r1, r2
 800414a:	4013      	ands	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d082      	beq.n	8004056 <HAL_RCC_OscConfig+0xdce>
 8004150:	e0cf      	b.n	80042f2 <HAL_RCC_OscConfig+0x106a>
 8004152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004156:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800415a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800415e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004164:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	fa93 f2a3 	rbit	r2, r3
 800416e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004172:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004176:	601a      	str	r2, [r3, #0]
  return result;
 8004178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800417c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004180:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004182:	fab3 f383 	clz	r3, r3
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800418c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	461a      	mov	r2, r3
 8004194:	2300      	movs	r3, #0
 8004196:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004198:	f7fd feaa 	bl	8001ef0 <HAL_GetTick>
 800419c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a0:	e009      	b.n	80041b6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a2:	f7fd fea5 	bl	8001ef0 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e09e      	b.n	80042f4 <HAL_RCC_OscConfig+0x106c>
 80041b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ba:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80041be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	fa93 f2a3 	rbit	r2, r3
 80041d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80041da:	601a      	str	r2, [r3, #0]
  return result;
 80041dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80041e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d104      	bne.n	8004204 <HAL_RCC_OscConfig+0xf7c>
 80041fa:	4b01      	ldr	r3, [pc, #4]	@ (8004200 <HAL_RCC_OscConfig+0xf78>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	e029      	b.n	8004254 <HAL_RCC_OscConfig+0xfcc>
 8004200:	40021000 	.word	0x40021000
 8004204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004208:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800420c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004216:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	fa93 f2a3 	rbit	r2, r3
 8004220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004224:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800422e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004232:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800423c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	fa93 f2a3 	rbit	r2, r3
 8004246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800424a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	4b2b      	ldr	r3, [pc, #172]	@ (8004300 <HAL_RCC_OscConfig+0x1078>)
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004258:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800425c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004260:	6011      	str	r1, [r2, #0]
 8004262:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004266:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	fa92 f1a2 	rbit	r1, r2
 8004270:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004274:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004278:	6011      	str	r1, [r2, #0]
  return result;
 800427a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800427e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	fab2 f282 	clz	r2, r2
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	f042 0220 	orr.w	r2, r2, #32
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	f002 021f 	and.w	r2, r2, #31
 8004294:	2101      	movs	r1, #1
 8004296:	fa01 f202 	lsl.w	r2, r1, r2
 800429a:	4013      	ands	r3, r2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d180      	bne.n	80041a2 <HAL_RCC_OscConfig+0xf1a>
 80042a0:	e027      	b.n	80042f2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e01e      	b.n	80042f4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042b6:	4b12      	ldr	r3, [pc, #72]	@ (8004300 <HAL_RCC_OscConfig+0x1078>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80042c2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80042c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d10b      	bne.n	80042ee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80042d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80042da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80042de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d001      	beq.n	80042f2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40021000 	.word	0x40021000

08004304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b09e      	sub	sp, #120	@ 0x78
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e162      	b.n	80045e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800431c:	4b90      	ldr	r3, [pc, #576]	@ (8004560 <HAL_RCC_ClockConfig+0x25c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d910      	bls.n	800434c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432a:	4b8d      	ldr	r3, [pc, #564]	@ (8004560 <HAL_RCC_ClockConfig+0x25c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 0207 	bic.w	r2, r3, #7
 8004332:	498b      	ldr	r1, [pc, #556]	@ (8004560 <HAL_RCC_ClockConfig+0x25c>)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	4313      	orrs	r3, r2
 8004338:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800433a:	4b89      	ldr	r3, [pc, #548]	@ (8004560 <HAL_RCC_ClockConfig+0x25c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d001      	beq.n	800434c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e14a      	b.n	80045e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004358:	4b82      	ldr	r3, [pc, #520]	@ (8004564 <HAL_RCC_ClockConfig+0x260>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	497f      	ldr	r1, [pc, #508]	@ (8004564 <HAL_RCC_ClockConfig+0x260>)
 8004366:	4313      	orrs	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 80dc 	beq.w	8004530 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d13c      	bne.n	80043fa <HAL_RCC_ClockConfig+0xf6>
 8004380:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004384:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004388:	fa93 f3a3 	rbit	r3, r3
 800438c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800438e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004390:	fab3 f383 	clz	r3, r3
 8004394:	b2db      	uxtb	r3, r3
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d102      	bne.n	80043aa <HAL_RCC_ClockConfig+0xa6>
 80043a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004564 <HAL_RCC_ClockConfig+0x260>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	e00f      	b.n	80043ca <HAL_RCC_ClockConfig+0xc6>
 80043aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043b2:	fa93 f3a3 	rbit	r3, r3
 80043b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80043b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80043be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043c0:	fa93 f3a3 	rbit	r3, r3
 80043c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043c6:	4b67      	ldr	r3, [pc, #412]	@ (8004564 <HAL_RCC_ClockConfig+0x260>)
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043ce:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043d2:	fa92 f2a2 	rbit	r2, r2
 80043d6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80043d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80043da:	fab2 f282 	clz	r2, r2
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	f042 0220 	orr.w	r2, r2, #32
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	f002 021f 	and.w	r2, r2, #31
 80043ea:	2101      	movs	r1, #1
 80043ec:	fa01 f202 	lsl.w	r2, r1, r2
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d17b      	bne.n	80044ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e0f3      	b.n	80045e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d13c      	bne.n	800447c <HAL_RCC_ClockConfig+0x178>
 8004402:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004406:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800440a:	fa93 f3a3 	rbit	r3, r3
 800440e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004412:	fab3 f383 	clz	r3, r3
 8004416:	b2db      	uxtb	r3, r3
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b01      	cmp	r3, #1
 8004424:	d102      	bne.n	800442c <HAL_RCC_ClockConfig+0x128>
 8004426:	4b4f      	ldr	r3, [pc, #316]	@ (8004564 <HAL_RCC_ClockConfig+0x260>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	e00f      	b.n	800444c <HAL_RCC_ClockConfig+0x148>
 800442c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004430:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004434:	fa93 f3a3 	rbit	r3, r3
 8004438:	647b      	str	r3, [r7, #68]	@ 0x44
 800443a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800443e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004442:	fa93 f3a3 	rbit	r3, r3
 8004446:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004448:	4b46      	ldr	r3, [pc, #280]	@ (8004564 <HAL_RCC_ClockConfig+0x260>)
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004450:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004452:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004454:	fa92 f2a2 	rbit	r2, r2
 8004458:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800445a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800445c:	fab2 f282 	clz	r2, r2
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	f042 0220 	orr.w	r2, r2, #32
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	f002 021f 	and.w	r2, r2, #31
 800446c:	2101      	movs	r1, #1
 800446e:	fa01 f202 	lsl.w	r2, r1, r2
 8004472:	4013      	ands	r3, r2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d13a      	bne.n	80044ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0b2      	b.n	80045e2 <HAL_RCC_ClockConfig+0x2de>
 800447c:	2302      	movs	r3, #2
 800447e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004482:	fa93 f3a3 	rbit	r3, r3
 8004486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800448a:	fab3 f383 	clz	r3, r3
 800448e:	b2db      	uxtb	r3, r3
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	b2db      	uxtb	r3, r3
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d102      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x1a0>
 800449e:	4b31      	ldr	r3, [pc, #196]	@ (8004564 <HAL_RCC_ClockConfig+0x260>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	e00d      	b.n	80044c0 <HAL_RCC_ClockConfig+0x1bc>
 80044a4:	2302      	movs	r3, #2
 80044a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044aa:	fa93 f3a3 	rbit	r3, r3
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80044b0:	2302      	movs	r3, #2
 80044b2:	623b      	str	r3, [r7, #32]
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	fa93 f3a3 	rbit	r3, r3
 80044ba:	61fb      	str	r3, [r7, #28]
 80044bc:	4b29      	ldr	r3, [pc, #164]	@ (8004564 <HAL_RCC_ClockConfig+0x260>)
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	2202      	movs	r2, #2
 80044c2:	61ba      	str	r2, [r7, #24]
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	fa92 f2a2 	rbit	r2, r2
 80044ca:	617a      	str	r2, [r7, #20]
  return result;
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	fab2 f282 	clz	r2, r2
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	f042 0220 	orr.w	r2, r2, #32
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	f002 021f 	and.w	r2, r2, #31
 80044de:	2101      	movs	r1, #1
 80044e0:	fa01 f202 	lsl.w	r2, r1, r2
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e079      	b.n	80045e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <HAL_RCC_ClockConfig+0x260>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f023 0203 	bic.w	r2, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	491a      	ldr	r1, [pc, #104]	@ (8004564 <HAL_RCC_ClockConfig+0x260>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004500:	f7fd fcf6 	bl	8001ef0 <HAL_GetTick>
 8004504:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004506:	e00a      	b.n	800451e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004508:	f7fd fcf2 	bl	8001ef0 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e061      	b.n	80045e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451e:	4b11      	ldr	r3, [pc, #68]	@ (8004564 <HAL_RCC_ClockConfig+0x260>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f003 020c 	and.w	r2, r3, #12
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	429a      	cmp	r2, r3
 800452e:	d1eb      	bne.n	8004508 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004530:	4b0b      	ldr	r3, [pc, #44]	@ (8004560 <HAL_RCC_ClockConfig+0x25c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d214      	bcs.n	8004568 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b08      	ldr	r3, [pc, #32]	@ (8004560 <HAL_RCC_ClockConfig+0x25c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 0207 	bic.w	r2, r3, #7
 8004546:	4906      	ldr	r1, [pc, #24]	@ (8004560 <HAL_RCC_ClockConfig+0x25c>)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b04      	ldr	r3, [pc, #16]	@ (8004560 <HAL_RCC_ClockConfig+0x25c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d005      	beq.n	8004568 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e040      	b.n	80045e2 <HAL_RCC_ClockConfig+0x2de>
 8004560:	40022000 	.word	0x40022000
 8004564:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004574:	4b1d      	ldr	r3, [pc, #116]	@ (80045ec <HAL_RCC_ClockConfig+0x2e8>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	491a      	ldr	r1, [pc, #104]	@ (80045ec <HAL_RCC_ClockConfig+0x2e8>)
 8004582:	4313      	orrs	r3, r2
 8004584:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d009      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004592:	4b16      	ldr	r3, [pc, #88]	@ (80045ec <HAL_RCC_ClockConfig+0x2e8>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4912      	ldr	r1, [pc, #72]	@ (80045ec <HAL_RCC_ClockConfig+0x2e8>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80045a6:	f000 f829 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 80045aa:	4601      	mov	r1, r0
 80045ac:	4b0f      	ldr	r3, [pc, #60]	@ (80045ec <HAL_RCC_ClockConfig+0x2e8>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045b4:	22f0      	movs	r2, #240	@ 0xf0
 80045b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	fa92 f2a2 	rbit	r2, r2
 80045be:	60fa      	str	r2, [r7, #12]
  return result;
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	fab2 f282 	clz	r2, r2
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	40d3      	lsrs	r3, r2
 80045ca:	4a09      	ldr	r2, [pc, #36]	@ (80045f0 <HAL_RCC_ClockConfig+0x2ec>)
 80045cc:	5cd3      	ldrb	r3, [r2, r3]
 80045ce:	fa21 f303 	lsr.w	r3, r1, r3
 80045d2:	4a08      	ldr	r2, [pc, #32]	@ (80045f4 <HAL_RCC_ClockConfig+0x2f0>)
 80045d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80045d6:	4b08      	ldr	r3, [pc, #32]	@ (80045f8 <HAL_RCC_ClockConfig+0x2f4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fd fc44 	bl	8001e68 <HAL_InitTick>
  
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3778      	adds	r7, #120	@ 0x78
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000
 80045f0:	08007f0c 	.word	0x08007f0c
 80045f4:	20000038 	.word	0x20000038
 80045f8:	2000003c 	.word	0x2000003c

080045fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b08b      	sub	sp, #44	@ 0x2c
 8004600:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	2300      	movs	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	2300      	movs	r3, #0
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004616:	4b29      	ldr	r3, [pc, #164]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f003 030c 	and.w	r3, r3, #12
 8004622:	2b04      	cmp	r3, #4
 8004624:	d002      	beq.n	800462c <HAL_RCC_GetSysClockFreq+0x30>
 8004626:	2b08      	cmp	r3, #8
 8004628:	d003      	beq.n	8004632 <HAL_RCC_GetSysClockFreq+0x36>
 800462a:	e03c      	b.n	80046a6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800462c:	4b24      	ldr	r3, [pc, #144]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800462e:	623b      	str	r3, [r7, #32]
      break;
 8004630:	e03c      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004638:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 800463c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	fa92 f2a2 	rbit	r2, r2
 8004644:	607a      	str	r2, [r7, #4]
  return result;
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	fab2 f282 	clz	r2, r2
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	40d3      	lsrs	r3, r2
 8004650:	4a1c      	ldr	r2, [pc, #112]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004652:	5cd3      	ldrb	r3, [r2, r3]
 8004654:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004656:	4b19      	ldr	r3, [pc, #100]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	220f      	movs	r2, #15
 8004660:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	fa92 f2a2 	rbit	r2, r2
 8004668:	60fa      	str	r2, [r7, #12]
  return result;
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	fab2 f282 	clz	r2, r2
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	40d3      	lsrs	r3, r2
 8004674:	4a14      	ldr	r2, [pc, #80]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004676:	5cd3      	ldrb	r3, [r2, r3]
 8004678:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004684:	4a0e      	ldr	r2, [pc, #56]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	fbb2 f2f3 	udiv	r2, r2, r3
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	fb02 f303 	mul.w	r3, r2, r3
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
 8004694:	e004      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	4a0c      	ldr	r2, [pc, #48]	@ (80046cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	623b      	str	r3, [r7, #32]
      break;
 80046a4:	e002      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046a6:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046a8:	623b      	str	r3, [r7, #32]
      break;
 80046aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ac:	6a3b      	ldr	r3, [r7, #32]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	372c      	adds	r7, #44	@ 0x2c
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
 80046c0:	007a1200 	.word	0x007a1200
 80046c4:	08007f1c 	.word	0x08007f1c
 80046c8:	08007f2c 	.word	0x08007f2c
 80046cc:	003d0900 	.word	0x003d0900

080046d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b092      	sub	sp, #72	@ 0x48
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80d4 	beq.w	800489c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f4:	4b4e      	ldr	r3, [pc, #312]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10e      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004700:	4b4b      	ldr	r3, [pc, #300]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	4a4a      	ldr	r2, [pc, #296]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800470a:	61d3      	str	r3, [r2, #28]
 800470c:	4b48      	ldr	r3, [pc, #288]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471e:	4b45      	ldr	r3, [pc, #276]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d118      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800472a:	4b42      	ldr	r3, [pc, #264]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a41      	ldr	r2, [pc, #260]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004734:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004736:	f7fd fbdb 	bl	8001ef0 <HAL_GetTick>
 800473a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473c:	e008      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473e:	f7fd fbd7 	bl	8001ef0 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b64      	cmp	r3, #100	@ 0x64
 800474a:	d901      	bls.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e169      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004750:	4b38      	ldr	r3, [pc, #224]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800475c:	4b34      	ldr	r3, [pc, #208]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004764:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8084 	beq.w	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004776:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004778:	429a      	cmp	r2, r3
 800477a:	d07c      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800477c:	4b2c      	ldr	r3, [pc, #176]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004786:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800478a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478e:	fa93 f3a3 	rbit	r3, r3
 8004792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	4b26      	ldr	r3, [pc, #152]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	461a      	mov	r2, r3
 80047a6:	2301      	movs	r3, #1
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b2:	fa93 f3a3 	rbit	r3, r3
 80047b6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80047b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ba:	fab3 f383 	clz	r3, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	461a      	mov	r2, r3
 80047ca:	2300      	movs	r3, #0
 80047cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047ce:	4a18      	ldr	r2, [pc, #96]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d04b      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047de:	f7fd fb87 	bl	8001ef0 <HAL_GetTick>
 80047e2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e4:	e00a      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e6:	f7fd fb83 	bl	8001ef0 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e113      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80047fc:	2302      	movs	r3, #2
 80047fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004802:	fa93 f3a3 	rbit	r3, r3
 8004806:	627b      	str	r3, [r7, #36]	@ 0x24
 8004808:	2302      	movs	r3, #2
 800480a:	623b      	str	r3, [r7, #32]
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	fa93 f3a3 	rbit	r3, r3
 8004812:	61fb      	str	r3, [r7, #28]
  return result;
 8004814:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004816:	fab3 f383 	clz	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f043 0302 	orr.w	r3, r3, #2
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d108      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800482a:	4b01      	ldr	r3, [pc, #4]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	e00d      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004830:	40021000 	.word	0x40021000
 8004834:	40007000 	.word	0x40007000
 8004838:	10908100 	.word	0x10908100
 800483c:	2302      	movs	r3, #2
 800483e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	4b78      	ldr	r3, [pc, #480]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800484a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484c:	2202      	movs	r2, #2
 800484e:	613a      	str	r2, [r7, #16]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	fa92 f2a2 	rbit	r2, r2
 8004856:	60fa      	str	r2, [r7, #12]
  return result;
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	fab2 f282 	clz	r2, r2
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	f002 021f 	and.w	r2, r2, #31
 800486a:	2101      	movs	r1, #1
 800486c:	fa01 f202 	lsl.w	r2, r1, r2
 8004870:	4013      	ands	r3, r2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0b7      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004876:	4b6d      	ldr	r3, [pc, #436]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	496a      	ldr	r1, [pc, #424]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004884:	4313      	orrs	r3, r2
 8004886:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004888:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800488c:	2b01      	cmp	r3, #1
 800488e:	d105      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004890:	4b66      	ldr	r3, [pc, #408]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	4a65      	ldr	r2, [pc, #404]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800489a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048a8:	4b60      	ldr	r3, [pc, #384]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ac:	f023 0203 	bic.w	r2, r3, #3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	495d      	ldr	r1, [pc, #372]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d008      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048c6:	4b59      	ldr	r3, [pc, #356]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	4956      	ldr	r1, [pc, #344]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048e4:	4b51      	ldr	r3, [pc, #324]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	494e      	ldr	r1, [pc, #312]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d008      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004902:	4b4a      	ldr	r3, [pc, #296]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004906:	f023 0210 	bic.w	r2, r3, #16
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	4947      	ldr	r1, [pc, #284]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004910:	4313      	orrs	r3, r2
 8004912:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004920:	4b42      	ldr	r3, [pc, #264]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492c:	493f      	ldr	r1, [pc, #252]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800492e:	4313      	orrs	r3, r2
 8004930:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800493e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004942:	f023 0220 	bic.w	r2, r3, #32
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	4938      	ldr	r1, [pc, #224]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800494c:	4313      	orrs	r3, r2
 800494e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800495c:	4b33      	ldr	r3, [pc, #204]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800495e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004960:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	4930      	ldr	r1, [pc, #192]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800496a:	4313      	orrs	r3, r2
 800496c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b00      	cmp	r3, #0
 8004978:	d008      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800497a:	4b2c      	ldr	r3, [pc, #176]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	4929      	ldr	r1, [pc, #164]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004988:	4313      	orrs	r3, r2
 800498a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004998:	4b24      	ldr	r3, [pc, #144]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a4:	4921      	ldr	r1, [pc, #132]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d008      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049b6:	4b1d      	ldr	r3, [pc, #116]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ba:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c2:	491a      	ldr	r1, [pc, #104]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80049d4:	4b15      	ldr	r3, [pc, #84]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d8:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e0:	4912      	ldr	r1, [pc, #72]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049f2:	4b0e      	ldr	r3, [pc, #56]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fe:	490b      	ldr	r1, [pc, #44]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004a10:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a14:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a1c:	4903      	ldr	r1, [pc, #12]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3748      	adds	r7, #72	@ 0x48
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40021000 	.word	0x40021000

08004a30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e09d      	b.n	8004b7e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d108      	bne.n	8004a5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a52:	d009      	beq.n	8004a68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	61da      	str	r2, [r3, #28]
 8004a5a:	e005      	b.n	8004a68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc fff8 	bl	8001a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004aa8:	d902      	bls.n	8004ab0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e002      	b.n	8004ab6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ab4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004abe:	d007      	beq.n	8004ad0 <HAL_SPI_Init+0xa0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ac8:	d002      	beq.n	8004ad0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b12:	ea42 0103 	orr.w	r1, r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	0c1b      	lsrs	r3, r3, #16
 8004b2c:	f003 0204 	and.w	r2, r3, #4
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004b4c:	ea42 0103 	orr.w	r1, r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e049      	b.n	8004c2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d106      	bne.n	8004bb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7fc ffa5 	bl	8001afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f000 ff37 	bl	8005a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e049      	b.n	8004cda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fc ff9a 	bl	8001b94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f000 fee0 	bl	8005a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d109      	bne.n	8004d08 <HAL_TIM_PWM_Start+0x24>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	bf14      	ite	ne
 8004d00:	2301      	movne	r3, #1
 8004d02:	2300      	moveq	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	e03c      	b.n	8004d82 <HAL_TIM_PWM_Start+0x9e>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d109      	bne.n	8004d22 <HAL_TIM_PWM_Start+0x3e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	bf14      	ite	ne
 8004d1a:	2301      	movne	r3, #1
 8004d1c:	2300      	moveq	r3, #0
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	e02f      	b.n	8004d82 <HAL_TIM_PWM_Start+0x9e>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d109      	bne.n	8004d3c <HAL_TIM_PWM_Start+0x58>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	bf14      	ite	ne
 8004d34:	2301      	movne	r3, #1
 8004d36:	2300      	moveq	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	e022      	b.n	8004d82 <HAL_TIM_PWM_Start+0x9e>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b0c      	cmp	r3, #12
 8004d40:	d109      	bne.n	8004d56 <HAL_TIM_PWM_Start+0x72>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	bf14      	ite	ne
 8004d4e:	2301      	movne	r3, #1
 8004d50:	2300      	moveq	r3, #0
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	e015      	b.n	8004d82 <HAL_TIM_PWM_Start+0x9e>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b10      	cmp	r3, #16
 8004d5a:	d109      	bne.n	8004d70 <HAL_TIM_PWM_Start+0x8c>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	bf14      	ite	ne
 8004d68:	2301      	movne	r3, #1
 8004d6a:	2300      	moveq	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	e008      	b.n	8004d82 <HAL_TIM_PWM_Start+0x9e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	bf14      	ite	ne
 8004d7c:	2301      	movne	r3, #1
 8004d7e:	2300      	moveq	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e097      	b.n	8004eba <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d104      	bne.n	8004d9a <HAL_TIM_PWM_Start+0xb6>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d98:	e023      	b.n	8004de2 <HAL_TIM_PWM_Start+0xfe>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d104      	bne.n	8004daa <HAL_TIM_PWM_Start+0xc6>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004da8:	e01b      	b.n	8004de2 <HAL_TIM_PWM_Start+0xfe>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d104      	bne.n	8004dba <HAL_TIM_PWM_Start+0xd6>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004db8:	e013      	b.n	8004de2 <HAL_TIM_PWM_Start+0xfe>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b0c      	cmp	r3, #12
 8004dbe:	d104      	bne.n	8004dca <HAL_TIM_PWM_Start+0xe6>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dc8:	e00b      	b.n	8004de2 <HAL_TIM_PWM_Start+0xfe>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d104      	bne.n	8004dda <HAL_TIM_PWM_Start+0xf6>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dd8:	e003      	b.n	8004de2 <HAL_TIM_PWM_Start+0xfe>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2201      	movs	r2, #1
 8004de8:	6839      	ldr	r1, [r7, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 fb42 	bl	8006474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a33      	ldr	r2, [pc, #204]	@ (8004ec4 <HAL_TIM_PWM_Start+0x1e0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d013      	beq.n	8004e22 <HAL_TIM_PWM_Start+0x13e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a32      	ldr	r2, [pc, #200]	@ (8004ec8 <HAL_TIM_PWM_Start+0x1e4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00e      	beq.n	8004e22 <HAL_TIM_PWM_Start+0x13e>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a30      	ldr	r2, [pc, #192]	@ (8004ecc <HAL_TIM_PWM_Start+0x1e8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d009      	beq.n	8004e22 <HAL_TIM_PWM_Start+0x13e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a2f      	ldr	r2, [pc, #188]	@ (8004ed0 <HAL_TIM_PWM_Start+0x1ec>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d004      	beq.n	8004e22 <HAL_TIM_PWM_Start+0x13e>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ed4 <HAL_TIM_PWM_Start+0x1f0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d101      	bne.n	8004e26 <HAL_TIM_PWM_Start+0x142>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <HAL_TIM_PWM_Start+0x144>
 8004e26:	2300      	movs	r3, #0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e3a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a20      	ldr	r2, [pc, #128]	@ (8004ec4 <HAL_TIM_PWM_Start+0x1e0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d018      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x194>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4e:	d013      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x194>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a20      	ldr	r2, [pc, #128]	@ (8004ed8 <HAL_TIM_PWM_Start+0x1f4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00e      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x194>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004edc <HAL_TIM_PWM_Start+0x1f8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d009      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x194>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a17      	ldr	r2, [pc, #92]	@ (8004ec8 <HAL_TIM_PWM_Start+0x1e4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d004      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x194>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a16      	ldr	r2, [pc, #88]	@ (8004ecc <HAL_TIM_PWM_Start+0x1e8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d115      	bne.n	8004ea4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	4b18      	ldr	r3, [pc, #96]	@ (8004ee0 <HAL_TIM_PWM_Start+0x1fc>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b06      	cmp	r3, #6
 8004e88:	d015      	beq.n	8004eb6 <HAL_TIM_PWM_Start+0x1d2>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e90:	d011      	beq.n	8004eb6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea2:	e008      	b.n	8004eb6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e000      	b.n	8004eb8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40013400 	.word	0x40013400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800
 8004ee0:	00010007 	.word	0x00010007

08004ee4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e049      	b.n	8004f8a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f841 	bl	8004f92 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	4619      	mov	r1, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	f000 fd88 	bl	8005a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
	...

08004fa8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d104      	bne.n	8004fc6 <HAL_TIM_IC_Start_IT+0x1e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	e023      	b.n	800500e <HAL_TIM_IC_Start_IT+0x66>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d104      	bne.n	8004fd6 <HAL_TIM_IC_Start_IT+0x2e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	e01b      	b.n	800500e <HAL_TIM_IC_Start_IT+0x66>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d104      	bne.n	8004fe6 <HAL_TIM_IC_Start_IT+0x3e>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	e013      	b.n	800500e <HAL_TIM_IC_Start_IT+0x66>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b0c      	cmp	r3, #12
 8004fea:	d104      	bne.n	8004ff6 <HAL_TIM_IC_Start_IT+0x4e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	e00b      	b.n	800500e <HAL_TIM_IC_Start_IT+0x66>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b10      	cmp	r3, #16
 8004ffa:	d104      	bne.n	8005006 <HAL_TIM_IC_Start_IT+0x5e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005002:	b2db      	uxtb	r3, r3
 8005004:	e003      	b.n	800500e <HAL_TIM_IC_Start_IT+0x66>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800500c:	b2db      	uxtb	r3, r3
 800500e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <HAL_TIM_IC_Start_IT+0x78>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800501c:	b2db      	uxtb	r3, r3
 800501e:	e013      	b.n	8005048 <HAL_TIM_IC_Start_IT+0xa0>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b04      	cmp	r3, #4
 8005024:	d104      	bne.n	8005030 <HAL_TIM_IC_Start_IT+0x88>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800502c:	b2db      	uxtb	r3, r3
 800502e:	e00b      	b.n	8005048 <HAL_TIM_IC_Start_IT+0xa0>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b08      	cmp	r3, #8
 8005034:	d104      	bne.n	8005040 <HAL_TIM_IC_Start_IT+0x98>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800503c:	b2db      	uxtb	r3, r3
 800503e:	e003      	b.n	8005048 <HAL_TIM_IC_Start_IT+0xa0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005046:	b2db      	uxtb	r3, r3
 8005048:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800504a:	7bbb      	ldrb	r3, [r7, #14]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d102      	bne.n	8005056 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005050:	7b7b      	ldrb	r3, [r7, #13]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d001      	beq.n	800505a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e0d8      	b.n	800520c <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d104      	bne.n	800506a <HAL_TIM_IC_Start_IT+0xc2>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005068:	e023      	b.n	80050b2 <HAL_TIM_IC_Start_IT+0x10a>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d104      	bne.n	800507a <HAL_TIM_IC_Start_IT+0xd2>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005078:	e01b      	b.n	80050b2 <HAL_TIM_IC_Start_IT+0x10a>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b08      	cmp	r3, #8
 800507e:	d104      	bne.n	800508a <HAL_TIM_IC_Start_IT+0xe2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005088:	e013      	b.n	80050b2 <HAL_TIM_IC_Start_IT+0x10a>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b0c      	cmp	r3, #12
 800508e:	d104      	bne.n	800509a <HAL_TIM_IC_Start_IT+0xf2>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005098:	e00b      	b.n	80050b2 <HAL_TIM_IC_Start_IT+0x10a>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b10      	cmp	r3, #16
 800509e:	d104      	bne.n	80050aa <HAL_TIM_IC_Start_IT+0x102>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050a8:	e003      	b.n	80050b2 <HAL_TIM_IC_Start_IT+0x10a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d104      	bne.n	80050c2 <HAL_TIM_IC_Start_IT+0x11a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050c0:	e013      	b.n	80050ea <HAL_TIM_IC_Start_IT+0x142>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d104      	bne.n	80050d2 <HAL_TIM_IC_Start_IT+0x12a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050d0:	e00b      	b.n	80050ea <HAL_TIM_IC_Start_IT+0x142>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d104      	bne.n	80050e2 <HAL_TIM_IC_Start_IT+0x13a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050e0:	e003      	b.n	80050ea <HAL_TIM_IC_Start_IT+0x142>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2202      	movs	r2, #2
 80050e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b0c      	cmp	r3, #12
 80050ee:	d841      	bhi.n	8005174 <HAL_TIM_IC_Start_IT+0x1cc>
 80050f0:	a201      	add	r2, pc, #4	@ (adr r2, 80050f8 <HAL_TIM_IC_Start_IT+0x150>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	0800512d 	.word	0x0800512d
 80050fc:	08005175 	.word	0x08005175
 8005100:	08005175 	.word	0x08005175
 8005104:	08005175 	.word	0x08005175
 8005108:	0800513f 	.word	0x0800513f
 800510c:	08005175 	.word	0x08005175
 8005110:	08005175 	.word	0x08005175
 8005114:	08005175 	.word	0x08005175
 8005118:	08005151 	.word	0x08005151
 800511c:	08005175 	.word	0x08005175
 8005120:	08005175 	.word	0x08005175
 8005124:	08005175 	.word	0x08005175
 8005128:	08005163 	.word	0x08005163
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0202 	orr.w	r2, r2, #2
 800513a:	60da      	str	r2, [r3, #12]
      break;
 800513c:	e01d      	b.n	800517a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0204 	orr.w	r2, r2, #4
 800514c:	60da      	str	r2, [r3, #12]
      break;
 800514e:	e014      	b.n	800517a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0208 	orr.w	r2, r2, #8
 800515e:	60da      	str	r2, [r3, #12]
      break;
 8005160:	e00b      	b.n	800517a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0210 	orr.w	r2, r2, #16
 8005170:	60da      	str	r2, [r3, #12]
      break;
 8005172:	e002      	b.n	800517a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
      break;
 8005178:	bf00      	nop
  }

  if (status == HAL_OK)
 800517a:	7bfb      	ldrb	r3, [r7, #15]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d144      	bne.n	800520a <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2201      	movs	r2, #1
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f001 f973 	bl	8006474 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a20      	ldr	r2, [pc, #128]	@ (8005214 <HAL_TIM_IC_Start_IT+0x26c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d018      	beq.n	80051ca <HAL_TIM_IC_Start_IT+0x222>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a0:	d013      	beq.n	80051ca <HAL_TIM_IC_Start_IT+0x222>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005218 <HAL_TIM_IC_Start_IT+0x270>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00e      	beq.n	80051ca <HAL_TIM_IC_Start_IT+0x222>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1a      	ldr	r2, [pc, #104]	@ (800521c <HAL_TIM_IC_Start_IT+0x274>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d009      	beq.n	80051ca <HAL_TIM_IC_Start_IT+0x222>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a19      	ldr	r2, [pc, #100]	@ (8005220 <HAL_TIM_IC_Start_IT+0x278>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d004      	beq.n	80051ca <HAL_TIM_IC_Start_IT+0x222>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a17      	ldr	r2, [pc, #92]	@ (8005224 <HAL_TIM_IC_Start_IT+0x27c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d115      	bne.n	80051f6 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	4b15      	ldr	r3, [pc, #84]	@ (8005228 <HAL_TIM_IC_Start_IT+0x280>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b06      	cmp	r3, #6
 80051da:	d015      	beq.n	8005208 <HAL_TIM_IC_Start_IT+0x260>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e2:	d011      	beq.n	8005208 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f4:	e008      	b.n	8005208 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0201 	orr.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	e000      	b.n	800520a <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005208:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40000400 	.word	0x40000400
 800521c:	40000800 	.word	0x40000800
 8005220:	40013400 	.word	0x40013400
 8005224:	40014000 	.word	0x40014000
 8005228:	00010007 	.word	0x00010007

0800522c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b02      	cmp	r3, #2
 8005240:	d122      	bne.n	8005288 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b02      	cmp	r3, #2
 800524e:	d11b      	bne.n	8005288 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0202 	mvn.w	r2, #2
 8005258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fb fcac 	bl	8000bcc <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fbc0 	bl	80059fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fbc7 	bl	8005a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b04      	cmp	r3, #4
 8005294:	d122      	bne.n	80052dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0204 	mvn.w	r2, #4
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fb fc82 	bl	8000bcc <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fb96 	bl	80059fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fb9d 	bl	8005a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d122      	bne.n	8005330 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d11b      	bne.n	8005330 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0208 	mvn.w	r2, #8
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2204      	movs	r2, #4
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fb fc58 	bl	8000bcc <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fb6c 	bl	80059fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fb73 	bl	8005a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0310 	and.w	r3, r3, #16
 800533a:	2b10      	cmp	r3, #16
 800533c:	d122      	bne.n	8005384 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b10      	cmp	r3, #16
 800534a:	d11b      	bne.n	8005384 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0210 	mvn.w	r2, #16
 8005354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2208      	movs	r2, #8
 800535a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fb fc2e 	bl	8000bcc <HAL_TIM_IC_CaptureCallback>
 8005370:	e005      	b.n	800537e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fb42 	bl	80059fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fb49 	bl	8005a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b01      	cmp	r3, #1
 8005390:	d10e      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b01      	cmp	r3, #1
 800539e:	d107      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0201 	mvn.w	r2, #1
 80053a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fb1c 	bl	80059e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ba:	2b80      	cmp	r3, #128	@ 0x80
 80053bc:	d10e      	bne.n	80053dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c8:	2b80      	cmp	r3, #128	@ 0x80
 80053ca:	d107      	bne.n	80053dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f001 f8fc 	bl	80065d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ea:	d10e      	bne.n	800540a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f6:	2b80      	cmp	r3, #128	@ 0x80
 80053f8:	d107      	bne.n	800540a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f001 f8ef 	bl	80065e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005414:	2b40      	cmp	r3, #64	@ 0x40
 8005416:	d10e      	bne.n	8005436 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005422:	2b40      	cmp	r3, #64	@ 0x40
 8005424:	d107      	bne.n	8005436 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800542e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 faf7 	bl	8005a24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b20      	cmp	r3, #32
 8005442:	d10e      	bne.n	8005462 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b20      	cmp	r3, #32
 8005450:	d107      	bne.n	8005462 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f06f 0220 	mvn.w	r2, #32
 800545a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f001 f8af 	bl	80065c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005462:	bf00      	nop
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b086      	sub	sp, #24
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005484:	2302      	movs	r3, #2
 8005486:	e088      	b.n	800559a <HAL_TIM_IC_ConfigChannel+0x130>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d11b      	bne.n	80054ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80054a6:	f000 fe2d 	bl	8006104 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699a      	ldr	r2, [r3, #24]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 020c 	bic.w	r2, r2, #12
 80054b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6999      	ldr	r1, [r3, #24]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	619a      	str	r2, [r3, #24]
 80054cc:	e060      	b.n	8005590 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d11c      	bne.n	800550e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80054e4:	f000 fea5 	bl	8006232 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699a      	ldr	r2, [r3, #24]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80054f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6999      	ldr	r1, [r3, #24]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	021a      	lsls	r2, r3, #8
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	619a      	str	r2, [r3, #24]
 800550c:	e040      	b.n	8005590 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b08      	cmp	r3, #8
 8005512:	d11b      	bne.n	800554c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005524:	f000 fef2 	bl	800630c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69da      	ldr	r2, [r3, #28]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 020c 	bic.w	r2, r2, #12
 8005536:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69d9      	ldr	r1, [r3, #28]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	61da      	str	r2, [r3, #28]
 800554a:	e021      	b.n	8005590 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b0c      	cmp	r3, #12
 8005550:	d11c      	bne.n	800558c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005562:	f000 ff0f 	bl	8006384 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69da      	ldr	r2, [r3, #28]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005574:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69d9      	ldr	r1, [r3, #28]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	021a      	lsls	r2, r3, #8
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	61da      	str	r2, [r3, #28]
 800558a:	e001      	b.n	8005590 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005598:	7dfb      	ldrb	r3, [r7, #23]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055be:	2302      	movs	r3, #2
 80055c0:	e0ff      	b.n	80057c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b14      	cmp	r3, #20
 80055ce:	f200 80f0 	bhi.w	80057b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80055d2:	a201      	add	r2, pc, #4	@ (adr r2, 80055d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	0800562d 	.word	0x0800562d
 80055dc:	080057b3 	.word	0x080057b3
 80055e0:	080057b3 	.word	0x080057b3
 80055e4:	080057b3 	.word	0x080057b3
 80055e8:	0800566d 	.word	0x0800566d
 80055ec:	080057b3 	.word	0x080057b3
 80055f0:	080057b3 	.word	0x080057b3
 80055f4:	080057b3 	.word	0x080057b3
 80055f8:	080056af 	.word	0x080056af
 80055fc:	080057b3 	.word	0x080057b3
 8005600:	080057b3 	.word	0x080057b3
 8005604:	080057b3 	.word	0x080057b3
 8005608:	080056ef 	.word	0x080056ef
 800560c:	080057b3 	.word	0x080057b3
 8005610:	080057b3 	.word	0x080057b3
 8005614:	080057b3 	.word	0x080057b3
 8005618:	08005731 	.word	0x08005731
 800561c:	080057b3 	.word	0x080057b3
 8005620:	080057b3 	.word	0x080057b3
 8005624:	080057b3 	.word	0x080057b3
 8005628:	08005771 	.word	0x08005771
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68b9      	ldr	r1, [r7, #8]
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fa90 	bl	8005b58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699a      	ldr	r2, [r3, #24]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0208 	orr.w	r2, r2, #8
 8005646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0204 	bic.w	r2, r2, #4
 8005656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6999      	ldr	r1, [r3, #24]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	619a      	str	r2, [r3, #24]
      break;
 800566a:	e0a5      	b.n	80057b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fb00 	bl	8005c78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6999      	ldr	r1, [r3, #24]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	021a      	lsls	r2, r3, #8
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	619a      	str	r2, [r3, #24]
      break;
 80056ac:	e084      	b.n	80057b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fb69 	bl	8005d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0208 	orr.w	r2, r2, #8
 80056c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0204 	bic.w	r2, r2, #4
 80056d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69d9      	ldr	r1, [r3, #28]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	61da      	str	r2, [r3, #28]
      break;
 80056ec:	e064      	b.n	80057b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fbd1 	bl	8005e9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69da      	ldr	r2, [r3, #28]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69d9      	ldr	r1, [r3, #28]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	021a      	lsls	r2, r3, #8
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	61da      	str	r2, [r3, #28]
      break;
 800572e:	e043      	b.n	80057b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68b9      	ldr	r1, [r7, #8]
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fc1a 	bl	8005f70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0208 	orr.w	r2, r2, #8
 800574a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0204 	bic.w	r2, r2, #4
 800575a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	691a      	ldr	r2, [r3, #16]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800576e:	e023      	b.n	80057b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fc5e 	bl	8006038 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800578a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800579a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	021a      	lsls	r2, r3, #8
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057b0:	e002      	b.n	80057b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	75fb      	strb	r3, [r7, #23]
      break;
 80057b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop

080057cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_TIM_ConfigClockSource+0x1c>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e0b6      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x18a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005806:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800580a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005812:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005824:	d03e      	beq.n	80058a4 <HAL_TIM_ConfigClockSource+0xd8>
 8005826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800582a:	f200 8087 	bhi.w	800593c <HAL_TIM_ConfigClockSource+0x170>
 800582e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005832:	f000 8086 	beq.w	8005942 <HAL_TIM_ConfigClockSource+0x176>
 8005836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800583a:	d87f      	bhi.n	800593c <HAL_TIM_ConfigClockSource+0x170>
 800583c:	2b70      	cmp	r3, #112	@ 0x70
 800583e:	d01a      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0xaa>
 8005840:	2b70      	cmp	r3, #112	@ 0x70
 8005842:	d87b      	bhi.n	800593c <HAL_TIM_ConfigClockSource+0x170>
 8005844:	2b60      	cmp	r3, #96	@ 0x60
 8005846:	d050      	beq.n	80058ea <HAL_TIM_ConfigClockSource+0x11e>
 8005848:	2b60      	cmp	r3, #96	@ 0x60
 800584a:	d877      	bhi.n	800593c <HAL_TIM_ConfigClockSource+0x170>
 800584c:	2b50      	cmp	r3, #80	@ 0x50
 800584e:	d03c      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0xfe>
 8005850:	2b50      	cmp	r3, #80	@ 0x50
 8005852:	d873      	bhi.n	800593c <HAL_TIM_ConfigClockSource+0x170>
 8005854:	2b40      	cmp	r3, #64	@ 0x40
 8005856:	d058      	beq.n	800590a <HAL_TIM_ConfigClockSource+0x13e>
 8005858:	2b40      	cmp	r3, #64	@ 0x40
 800585a:	d86f      	bhi.n	800593c <HAL_TIM_ConfigClockSource+0x170>
 800585c:	2b30      	cmp	r3, #48	@ 0x30
 800585e:	d064      	beq.n	800592a <HAL_TIM_ConfigClockSource+0x15e>
 8005860:	2b30      	cmp	r3, #48	@ 0x30
 8005862:	d86b      	bhi.n	800593c <HAL_TIM_ConfigClockSource+0x170>
 8005864:	2b20      	cmp	r3, #32
 8005866:	d060      	beq.n	800592a <HAL_TIM_ConfigClockSource+0x15e>
 8005868:	2b20      	cmp	r3, #32
 800586a:	d867      	bhi.n	800593c <HAL_TIM_ConfigClockSource+0x170>
 800586c:	2b00      	cmp	r3, #0
 800586e:	d05c      	beq.n	800592a <HAL_TIM_ConfigClockSource+0x15e>
 8005870:	2b10      	cmp	r3, #16
 8005872:	d05a      	beq.n	800592a <HAL_TIM_ConfigClockSource+0x15e>
 8005874:	e062      	b.n	800593c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005886:	f000 fdd5 	bl	8006434 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005898:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	609a      	str	r2, [r3, #8]
      break;
 80058a2:	e04f      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058b4:	f000 fdbe 	bl	8006434 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058c6:	609a      	str	r2, [r3, #8]
      break;
 80058c8:	e03c      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d6:	461a      	mov	r2, r3
 80058d8:	f000 fc7c 	bl	80061d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2150      	movs	r1, #80	@ 0x50
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fd8b 	bl	80063fe <TIM_ITRx_SetConfig>
      break;
 80058e8:	e02c      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058f6:	461a      	mov	r2, r3
 80058f8:	f000 fcd8 	bl	80062ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2160      	movs	r1, #96	@ 0x60
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fd7b 	bl	80063fe <TIM_ITRx_SetConfig>
      break;
 8005908:	e01c      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005916:	461a      	mov	r2, r3
 8005918:	f000 fc5c 	bl	80061d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2140      	movs	r1, #64	@ 0x40
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fd6b 	bl	80063fe <TIM_ITRx_SetConfig>
      break;
 8005928:	e00c      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4619      	mov	r1, r3
 8005934:	4610      	mov	r0, r2
 8005936:	f000 fd62 	bl	80063fe <TIM_ITRx_SetConfig>
      break;
 800593a:	e003      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	73fb      	strb	r3, [r7, #15]
      break;
 8005940:	e000      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005954:	7bfb      	ldrb	r3, [r7, #15]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b0c      	cmp	r3, #12
 8005972:	d831      	bhi.n	80059d8 <HAL_TIM_ReadCapturedValue+0x78>
 8005974:	a201      	add	r2, pc, #4	@ (adr r2, 800597c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597a:	bf00      	nop
 800597c:	080059b1 	.word	0x080059b1
 8005980:	080059d9 	.word	0x080059d9
 8005984:	080059d9 	.word	0x080059d9
 8005988:	080059d9 	.word	0x080059d9
 800598c:	080059bb 	.word	0x080059bb
 8005990:	080059d9 	.word	0x080059d9
 8005994:	080059d9 	.word	0x080059d9
 8005998:	080059d9 	.word	0x080059d9
 800599c:	080059c5 	.word	0x080059c5
 80059a0:	080059d9 	.word	0x080059d9
 80059a4:	080059d9 	.word	0x080059d9
 80059a8:	080059d9 	.word	0x080059d9
 80059ac:	080059cf 	.word	0x080059cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b6:	60fb      	str	r3, [r7, #12]

      break;
 80059b8:	e00f      	b.n	80059da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c0:	60fb      	str	r3, [r7, #12]

      break;
 80059c2:	e00a      	b.n	80059da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ca:	60fb      	str	r3, [r7, #12]

      break;
 80059cc:	e005      	b.n	80059da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d4:	60fb      	str	r3, [r7, #12]

      break;
 80059d6:	e000      	b.n	80059da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80059d8:	bf00      	nop
  }

  return tmpreg;
 80059da:	68fb      	ldr	r3, [r7, #12]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a3c      	ldr	r2, [pc, #240]	@ (8005b3c <TIM_Base_SetConfig+0x104>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00f      	beq.n	8005a70 <TIM_Base_SetConfig+0x38>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a56:	d00b      	beq.n	8005a70 <TIM_Base_SetConfig+0x38>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a39      	ldr	r2, [pc, #228]	@ (8005b40 <TIM_Base_SetConfig+0x108>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d007      	beq.n	8005a70 <TIM_Base_SetConfig+0x38>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a38      	ldr	r2, [pc, #224]	@ (8005b44 <TIM_Base_SetConfig+0x10c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d003      	beq.n	8005a70 <TIM_Base_SetConfig+0x38>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a37      	ldr	r2, [pc, #220]	@ (8005b48 <TIM_Base_SetConfig+0x110>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d108      	bne.n	8005a82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a2d      	ldr	r2, [pc, #180]	@ (8005b3c <TIM_Base_SetConfig+0x104>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d01b      	beq.n	8005ac2 <TIM_Base_SetConfig+0x8a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a90:	d017      	beq.n	8005ac2 <TIM_Base_SetConfig+0x8a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a2a      	ldr	r2, [pc, #168]	@ (8005b40 <TIM_Base_SetConfig+0x108>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d013      	beq.n	8005ac2 <TIM_Base_SetConfig+0x8a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a29      	ldr	r2, [pc, #164]	@ (8005b44 <TIM_Base_SetConfig+0x10c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00f      	beq.n	8005ac2 <TIM_Base_SetConfig+0x8a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a28      	ldr	r2, [pc, #160]	@ (8005b48 <TIM_Base_SetConfig+0x110>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00b      	beq.n	8005ac2 <TIM_Base_SetConfig+0x8a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a27      	ldr	r2, [pc, #156]	@ (8005b4c <TIM_Base_SetConfig+0x114>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d007      	beq.n	8005ac2 <TIM_Base_SetConfig+0x8a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a26      	ldr	r2, [pc, #152]	@ (8005b50 <TIM_Base_SetConfig+0x118>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d003      	beq.n	8005ac2 <TIM_Base_SetConfig+0x8a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a25      	ldr	r2, [pc, #148]	@ (8005b54 <TIM_Base_SetConfig+0x11c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d108      	bne.n	8005ad4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a10      	ldr	r2, [pc, #64]	@ (8005b3c <TIM_Base_SetConfig+0x104>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00f      	beq.n	8005b20 <TIM_Base_SetConfig+0xe8>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a11      	ldr	r2, [pc, #68]	@ (8005b48 <TIM_Base_SetConfig+0x110>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00b      	beq.n	8005b20 <TIM_Base_SetConfig+0xe8>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a10      	ldr	r2, [pc, #64]	@ (8005b4c <TIM_Base_SetConfig+0x114>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d007      	beq.n	8005b20 <TIM_Base_SetConfig+0xe8>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a0f      	ldr	r2, [pc, #60]	@ (8005b50 <TIM_Base_SetConfig+0x118>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_Base_SetConfig+0xe8>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8005b54 <TIM_Base_SetConfig+0x11c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d103      	bne.n	8005b28 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	615a      	str	r2, [r3, #20]
}
 8005b2e:	bf00      	nop
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40012c00 	.word	0x40012c00
 8005b40:	40000400 	.word	0x40000400
 8005b44:	40000800 	.word	0x40000800
 8005b48:	40013400 	.word	0x40013400
 8005b4c:	40014000 	.word	0x40014000
 8005b50:	40014400 	.word	0x40014400
 8005b54:	40014800 	.word	0x40014800

08005b58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	f023 0201 	bic.w	r2, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f023 0302 	bic.w	r3, r3, #2
 8005ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8005c64 <TIM_OC1_SetConfig+0x10c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00f      	beq.n	8005bd8 <TIM_OC1_SetConfig+0x80>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a2b      	ldr	r2, [pc, #172]	@ (8005c68 <TIM_OC1_SetConfig+0x110>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00b      	beq.n	8005bd8 <TIM_OC1_SetConfig+0x80>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8005c6c <TIM_OC1_SetConfig+0x114>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d007      	beq.n	8005bd8 <TIM_OC1_SetConfig+0x80>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a29      	ldr	r2, [pc, #164]	@ (8005c70 <TIM_OC1_SetConfig+0x118>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d003      	beq.n	8005bd8 <TIM_OC1_SetConfig+0x80>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a28      	ldr	r2, [pc, #160]	@ (8005c74 <TIM_OC1_SetConfig+0x11c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d10c      	bne.n	8005bf2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f023 0308 	bic.w	r3, r3, #8
 8005bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f023 0304 	bic.w	r3, r3, #4
 8005bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c64 <TIM_OC1_SetConfig+0x10c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00f      	beq.n	8005c1a <TIM_OC1_SetConfig+0xc2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8005c68 <TIM_OC1_SetConfig+0x110>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00b      	beq.n	8005c1a <TIM_OC1_SetConfig+0xc2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a19      	ldr	r2, [pc, #100]	@ (8005c6c <TIM_OC1_SetConfig+0x114>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d007      	beq.n	8005c1a <TIM_OC1_SetConfig+0xc2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a18      	ldr	r2, [pc, #96]	@ (8005c70 <TIM_OC1_SetConfig+0x118>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d003      	beq.n	8005c1a <TIM_OC1_SetConfig+0xc2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a17      	ldr	r2, [pc, #92]	@ (8005c74 <TIM_OC1_SetConfig+0x11c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d111      	bne.n	8005c3e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	621a      	str	r2, [r3, #32]
}
 8005c58:	bf00      	nop
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	40012c00 	.word	0x40012c00
 8005c68:	40013400 	.word	0x40013400
 8005c6c:	40014000 	.word	0x40014000
 8005c70:	40014400 	.word	0x40014400
 8005c74:	40014800 	.word	0x40014800

08005c78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f023 0210 	bic.w	r2, r3, #16
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f023 0320 	bic.w	r3, r3, #32
 8005cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a28      	ldr	r2, [pc, #160]	@ (8005d78 <TIM_OC2_SetConfig+0x100>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_OC2_SetConfig+0x6c>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a27      	ldr	r2, [pc, #156]	@ (8005d7c <TIM_OC2_SetConfig+0x104>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d10d      	bne.n	8005d00 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a1d      	ldr	r2, [pc, #116]	@ (8005d78 <TIM_OC2_SetConfig+0x100>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00f      	beq.n	8005d28 <TIM_OC2_SetConfig+0xb0>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005d7c <TIM_OC2_SetConfig+0x104>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00b      	beq.n	8005d28 <TIM_OC2_SetConfig+0xb0>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a1b      	ldr	r2, [pc, #108]	@ (8005d80 <TIM_OC2_SetConfig+0x108>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d007      	beq.n	8005d28 <TIM_OC2_SetConfig+0xb0>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8005d84 <TIM_OC2_SetConfig+0x10c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_OC2_SetConfig+0xb0>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a19      	ldr	r2, [pc, #100]	@ (8005d88 <TIM_OC2_SetConfig+0x110>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d113      	bne.n	8005d50 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d2e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d36:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	621a      	str	r2, [r3, #32]
}
 8005d6a:	bf00      	nop
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40012c00 	.word	0x40012c00
 8005d7c:	40013400 	.word	0x40013400
 8005d80:	40014000 	.word	0x40014000
 8005d84:	40014400 	.word	0x40014400
 8005d88:	40014800 	.word	0x40014800

08005d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0303 	bic.w	r3, r3, #3
 8005dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a27      	ldr	r2, [pc, #156]	@ (8005e88 <TIM_OC3_SetConfig+0xfc>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d003      	beq.n	8005df6 <TIM_OC3_SetConfig+0x6a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a26      	ldr	r2, [pc, #152]	@ (8005e8c <TIM_OC3_SetConfig+0x100>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d10d      	bne.n	8005e12 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e10:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a1c      	ldr	r2, [pc, #112]	@ (8005e88 <TIM_OC3_SetConfig+0xfc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00f      	beq.n	8005e3a <TIM_OC3_SetConfig+0xae>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8005e8c <TIM_OC3_SetConfig+0x100>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00b      	beq.n	8005e3a <TIM_OC3_SetConfig+0xae>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a1a      	ldr	r2, [pc, #104]	@ (8005e90 <TIM_OC3_SetConfig+0x104>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d007      	beq.n	8005e3a <TIM_OC3_SetConfig+0xae>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a19      	ldr	r2, [pc, #100]	@ (8005e94 <TIM_OC3_SetConfig+0x108>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d003      	beq.n	8005e3a <TIM_OC3_SetConfig+0xae>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a18      	ldr	r2, [pc, #96]	@ (8005e98 <TIM_OC3_SetConfig+0x10c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d113      	bne.n	8005e62 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	621a      	str	r2, [r3, #32]
}
 8005e7c:	bf00      	nop
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	40013400 	.word	0x40013400
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40014400 	.word	0x40014400
 8005e98:	40014800 	.word	0x40014800

08005e9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005eca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	021b      	lsls	r3, r3, #8
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	031b      	lsls	r3, r3, #12
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a18      	ldr	r2, [pc, #96]	@ (8005f5c <TIM_OC4_SetConfig+0xc0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00f      	beq.n	8005f20 <TIM_OC4_SetConfig+0x84>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a17      	ldr	r2, [pc, #92]	@ (8005f60 <TIM_OC4_SetConfig+0xc4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00b      	beq.n	8005f20 <TIM_OC4_SetConfig+0x84>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a16      	ldr	r2, [pc, #88]	@ (8005f64 <TIM_OC4_SetConfig+0xc8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d007      	beq.n	8005f20 <TIM_OC4_SetConfig+0x84>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a15      	ldr	r2, [pc, #84]	@ (8005f68 <TIM_OC4_SetConfig+0xcc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d003      	beq.n	8005f20 <TIM_OC4_SetConfig+0x84>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a14      	ldr	r2, [pc, #80]	@ (8005f6c <TIM_OC4_SetConfig+0xd0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d109      	bne.n	8005f34 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	019b      	lsls	r3, r3, #6
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40012c00 	.word	0x40012c00
 8005f60:	40013400 	.word	0x40013400
 8005f64:	40014000 	.word	0x40014000
 8005f68:	40014400 	.word	0x40014400
 8005f6c:	40014800 	.word	0x40014800

08005f70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005fb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	041b      	lsls	r3, r3, #16
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a17      	ldr	r2, [pc, #92]	@ (8006024 <TIM_OC5_SetConfig+0xb4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00f      	beq.n	8005fea <TIM_OC5_SetConfig+0x7a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a16      	ldr	r2, [pc, #88]	@ (8006028 <TIM_OC5_SetConfig+0xb8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00b      	beq.n	8005fea <TIM_OC5_SetConfig+0x7a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a15      	ldr	r2, [pc, #84]	@ (800602c <TIM_OC5_SetConfig+0xbc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d007      	beq.n	8005fea <TIM_OC5_SetConfig+0x7a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a14      	ldr	r2, [pc, #80]	@ (8006030 <TIM_OC5_SetConfig+0xc0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_OC5_SetConfig+0x7a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a13      	ldr	r2, [pc, #76]	@ (8006034 <TIM_OC5_SetConfig+0xc4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d109      	bne.n	8005ffe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	621a      	str	r2, [r3, #32]
}
 8006018:	bf00      	nop
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	40012c00 	.word	0x40012c00
 8006028:	40013400 	.word	0x40013400
 800602c:	40014000 	.word	0x40014000
 8006030:	40014400 	.word	0x40014400
 8006034:	40014800 	.word	0x40014800

08006038 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800606a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4313      	orrs	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800607e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	051b      	lsls	r3, r3, #20
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4313      	orrs	r3, r2
 800608a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a18      	ldr	r2, [pc, #96]	@ (80060f0 <TIM_OC6_SetConfig+0xb8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00f      	beq.n	80060b4 <TIM_OC6_SetConfig+0x7c>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a17      	ldr	r2, [pc, #92]	@ (80060f4 <TIM_OC6_SetConfig+0xbc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00b      	beq.n	80060b4 <TIM_OC6_SetConfig+0x7c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a16      	ldr	r2, [pc, #88]	@ (80060f8 <TIM_OC6_SetConfig+0xc0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d007      	beq.n	80060b4 <TIM_OC6_SetConfig+0x7c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a15      	ldr	r2, [pc, #84]	@ (80060fc <TIM_OC6_SetConfig+0xc4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d003      	beq.n	80060b4 <TIM_OC6_SetConfig+0x7c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a14      	ldr	r2, [pc, #80]	@ (8006100 <TIM_OC6_SetConfig+0xc8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d109      	bne.n	80060c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	029b      	lsls	r3, r3, #10
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	621a      	str	r2, [r3, #32]
}
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40012c00 	.word	0x40012c00
 80060f4:	40013400 	.word	0x40013400
 80060f8:	40014000 	.word	0x40014000
 80060fc:	40014400 	.word	0x40014400
 8006100:	40014800 	.word	0x40014800

08006104 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f023 0201 	bic.w	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4a24      	ldr	r2, [pc, #144]	@ (80061c0 <TIM_TI1_SetConfig+0xbc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d013      	beq.n	800615a <TIM_TI1_SetConfig+0x56>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006138:	d00f      	beq.n	800615a <TIM_TI1_SetConfig+0x56>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4a21      	ldr	r2, [pc, #132]	@ (80061c4 <TIM_TI1_SetConfig+0xc0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00b      	beq.n	800615a <TIM_TI1_SetConfig+0x56>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4a20      	ldr	r2, [pc, #128]	@ (80061c8 <TIM_TI1_SetConfig+0xc4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d007      	beq.n	800615a <TIM_TI1_SetConfig+0x56>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4a1f      	ldr	r2, [pc, #124]	@ (80061cc <TIM_TI1_SetConfig+0xc8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d003      	beq.n	800615a <TIM_TI1_SetConfig+0x56>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4a1e      	ldr	r2, [pc, #120]	@ (80061d0 <TIM_TI1_SetConfig+0xcc>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d101      	bne.n	800615e <TIM_TI1_SetConfig+0x5a>
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <TIM_TI1_SetConfig+0x5c>
 800615e:	2300      	movs	r3, #0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d008      	beq.n	8006176 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	e003      	b.n	800617e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f043 0301 	orr.w	r3, r3, #1
 800617c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006184:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	b2db      	uxtb	r3, r3
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f023 030a 	bic.w	r3, r3, #10
 8006198:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f003 030a 	and.w	r3, r3, #10
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40012c00 	.word	0x40012c00
 80061c4:	40000400 	.word	0x40000400
 80061c8:	40000800 	.word	0x40000800
 80061cc:	40013400 	.word	0x40013400
 80061d0:	40014000 	.word	0x40014000

080061d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	f023 0201 	bic.w	r2, r3, #1
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f023 030a 	bic.w	r3, r3, #10
 8006210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	621a      	str	r2, [r3, #32]
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006232:	b480      	push	{r7}
 8006234:	b087      	sub	sp, #28
 8006236:	af00      	add	r7, sp, #0
 8006238:	60f8      	str	r0, [r7, #12]
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	607a      	str	r2, [r7, #4]
 800623e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	f023 0210 	bic.w	r2, r3, #16
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800625e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006270:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	031b      	lsls	r3, r3, #12
 8006276:	b29b      	uxth	r3, r3
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	4313      	orrs	r3, r2
 800627c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006284:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	621a      	str	r2, [r3, #32]
}
 80062a0:	bf00      	nop
 80062a2:	371c      	adds	r7, #28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	f023 0210 	bic.w	r2, r3, #16
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	031b      	lsls	r3, r3, #12
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	621a      	str	r2, [r3, #32]
}
 8006300:	bf00      	nop
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f023 0303 	bic.w	r3, r3, #3
 8006338:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006348:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	011b      	lsls	r3, r3, #4
 800634e:	b2db      	uxtb	r3, r3
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800635c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	621a      	str	r2, [r3, #32]
}
 8006378:	bf00      	nop
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	031b      	lsls	r3, r3, #12
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80063d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	031b      	lsls	r3, r3, #12
 80063dc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	621a      	str	r2, [r3, #32]
}
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063fe:	b480      	push	{r7}
 8006400:	b085      	sub	sp, #20
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	f043 0307 	orr.w	r3, r3, #7
 8006420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	609a      	str	r2, [r3, #8]
}
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800644e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	021a      	lsls	r2, r3, #8
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	431a      	orrs	r2, r3
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4313      	orrs	r3, r2
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	609a      	str	r2, [r3, #8]
}
 8006468:	bf00      	nop
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f003 031f 	and.w	r3, r3, #31
 8006486:	2201      	movs	r2, #1
 8006488:	fa02 f303 	lsl.w	r3, r2, r3
 800648c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a1a      	ldr	r2, [r3, #32]
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	43db      	mvns	r3, r3
 8006496:	401a      	ands	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a1a      	ldr	r2, [r3, #32]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	fa01 f303 	lsl.w	r3, r1, r3
 80064ac:	431a      	orrs	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	621a      	str	r2, [r3, #32]
}
 80064b2:	bf00      	nop
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e063      	b.n	80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a2b      	ldr	r2, [pc, #172]	@ (80065ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d004      	beq.n	800650c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a2a      	ldr	r2, [pc, #168]	@ (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d108      	bne.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006512:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006524:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a1b      	ldr	r2, [pc, #108]	@ (80065ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d018      	beq.n	8006574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800654a:	d013      	beq.n	8006574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a18      	ldr	r2, [pc, #96]	@ (80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00e      	beq.n	8006574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a17      	ldr	r2, [pc, #92]	@ (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d009      	beq.n	8006574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a12      	ldr	r2, [pc, #72]	@ (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d004      	beq.n	8006574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a13      	ldr	r2, [pc, #76]	@ (80065bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d10c      	bne.n	800658e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800657a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	4313      	orrs	r3, r2
 8006584:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40013400 	.word	0x40013400
 80065b4:	40000400 	.word	0x40000400
 80065b8:	40000800 	.word	0x40000800
 80065bc:	40014000 	.word	0x40014000

080065c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006604:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006608:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	b29b      	uxth	r3, r3
 8006616:	43db      	mvns	r3, r3
 8006618:	b29b      	uxth	r3, r3
 800661a:	4013      	ands	r3, r2
 800661c:	b29a      	uxth	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006632:	b084      	sub	sp, #16
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	f107 0014 	add.w	r0, r7, #20
 8006640:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	b004      	add	sp, #16
 8006672:	4770      	bx	lr

08006674 <siprintf>:
 8006674:	b40e      	push	{r1, r2, r3}
 8006676:	b500      	push	{lr}
 8006678:	b09c      	sub	sp, #112	@ 0x70
 800667a:	ab1d      	add	r3, sp, #116	@ 0x74
 800667c:	9002      	str	r0, [sp, #8]
 800667e:	9006      	str	r0, [sp, #24]
 8006680:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006684:	4809      	ldr	r0, [pc, #36]	@ (80066ac <siprintf+0x38>)
 8006686:	9107      	str	r1, [sp, #28]
 8006688:	9104      	str	r1, [sp, #16]
 800668a:	4909      	ldr	r1, [pc, #36]	@ (80066b0 <siprintf+0x3c>)
 800668c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006690:	9105      	str	r1, [sp, #20]
 8006692:	6800      	ldr	r0, [r0, #0]
 8006694:	9301      	str	r3, [sp, #4]
 8006696:	a902      	add	r1, sp, #8
 8006698:	f000 f89c 	bl	80067d4 <_svfiprintf_r>
 800669c:	9b02      	ldr	r3, [sp, #8]
 800669e:	2200      	movs	r2, #0
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	b01c      	add	sp, #112	@ 0x70
 80066a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066a8:	b003      	add	sp, #12
 80066aa:	4770      	bx	lr
 80066ac:	20000044 	.word	0x20000044
 80066b0:	ffff0208 	.word	0xffff0208

080066b4 <memset>:
 80066b4:	4402      	add	r2, r0
 80066b6:	4603      	mov	r3, r0
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d100      	bne.n	80066be <memset+0xa>
 80066bc:	4770      	bx	lr
 80066be:	f803 1b01 	strb.w	r1, [r3], #1
 80066c2:	e7f9      	b.n	80066b8 <memset+0x4>

080066c4 <__errno>:
 80066c4:	4b01      	ldr	r3, [pc, #4]	@ (80066cc <__errno+0x8>)
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20000044 	.word	0x20000044

080066d0 <__libc_init_array>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	4d0d      	ldr	r5, [pc, #52]	@ (8006708 <__libc_init_array+0x38>)
 80066d4:	4c0d      	ldr	r4, [pc, #52]	@ (800670c <__libc_init_array+0x3c>)
 80066d6:	1b64      	subs	r4, r4, r5
 80066d8:	10a4      	asrs	r4, r4, #2
 80066da:	2600      	movs	r6, #0
 80066dc:	42a6      	cmp	r6, r4
 80066de:	d109      	bne.n	80066f4 <__libc_init_array+0x24>
 80066e0:	4d0b      	ldr	r5, [pc, #44]	@ (8006710 <__libc_init_array+0x40>)
 80066e2:	4c0c      	ldr	r4, [pc, #48]	@ (8006714 <__libc_init_array+0x44>)
 80066e4:	f001 fbc4 	bl	8007e70 <_init>
 80066e8:	1b64      	subs	r4, r4, r5
 80066ea:	10a4      	asrs	r4, r4, #2
 80066ec:	2600      	movs	r6, #0
 80066ee:	42a6      	cmp	r6, r4
 80066f0:	d105      	bne.n	80066fe <__libc_init_array+0x2e>
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f8:	4798      	blx	r3
 80066fa:	3601      	adds	r6, #1
 80066fc:	e7ee      	b.n	80066dc <__libc_init_array+0xc>
 80066fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006702:	4798      	blx	r3
 8006704:	3601      	adds	r6, #1
 8006706:	e7f2      	b.n	80066ee <__libc_init_array+0x1e>
 8006708:	08007fa8 	.word	0x08007fa8
 800670c:	08007fa8 	.word	0x08007fa8
 8006710:	08007fa8 	.word	0x08007fa8
 8006714:	08007fac 	.word	0x08007fac

08006718 <__retarget_lock_acquire_recursive>:
 8006718:	4770      	bx	lr

0800671a <__retarget_lock_release_recursive>:
 800671a:	4770      	bx	lr

0800671c <__ssputs_r>:
 800671c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006720:	688e      	ldr	r6, [r1, #8]
 8006722:	461f      	mov	r7, r3
 8006724:	42be      	cmp	r6, r7
 8006726:	680b      	ldr	r3, [r1, #0]
 8006728:	4682      	mov	sl, r0
 800672a:	460c      	mov	r4, r1
 800672c:	4690      	mov	r8, r2
 800672e:	d82d      	bhi.n	800678c <__ssputs_r+0x70>
 8006730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006734:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006738:	d026      	beq.n	8006788 <__ssputs_r+0x6c>
 800673a:	6965      	ldr	r5, [r4, #20]
 800673c:	6909      	ldr	r1, [r1, #16]
 800673e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006742:	eba3 0901 	sub.w	r9, r3, r1
 8006746:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800674a:	1c7b      	adds	r3, r7, #1
 800674c:	444b      	add	r3, r9
 800674e:	106d      	asrs	r5, r5, #1
 8006750:	429d      	cmp	r5, r3
 8006752:	bf38      	it	cc
 8006754:	461d      	movcc	r5, r3
 8006756:	0553      	lsls	r3, r2, #21
 8006758:	d527      	bpl.n	80067aa <__ssputs_r+0x8e>
 800675a:	4629      	mov	r1, r5
 800675c:	f000 f958 	bl	8006a10 <_malloc_r>
 8006760:	4606      	mov	r6, r0
 8006762:	b360      	cbz	r0, 80067be <__ssputs_r+0xa2>
 8006764:	6921      	ldr	r1, [r4, #16]
 8006766:	464a      	mov	r2, r9
 8006768:	f000 fbc4 	bl	8006ef4 <memcpy>
 800676c:	89a3      	ldrh	r3, [r4, #12]
 800676e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006776:	81a3      	strh	r3, [r4, #12]
 8006778:	6126      	str	r6, [r4, #16]
 800677a:	6165      	str	r5, [r4, #20]
 800677c:	444e      	add	r6, r9
 800677e:	eba5 0509 	sub.w	r5, r5, r9
 8006782:	6026      	str	r6, [r4, #0]
 8006784:	60a5      	str	r5, [r4, #8]
 8006786:	463e      	mov	r6, r7
 8006788:	42be      	cmp	r6, r7
 800678a:	d900      	bls.n	800678e <__ssputs_r+0x72>
 800678c:	463e      	mov	r6, r7
 800678e:	6820      	ldr	r0, [r4, #0]
 8006790:	4632      	mov	r2, r6
 8006792:	4641      	mov	r1, r8
 8006794:	f000 fb84 	bl	8006ea0 <memmove>
 8006798:	68a3      	ldr	r3, [r4, #8]
 800679a:	1b9b      	subs	r3, r3, r6
 800679c:	60a3      	str	r3, [r4, #8]
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	4433      	add	r3, r6
 80067a2:	6023      	str	r3, [r4, #0]
 80067a4:	2000      	movs	r0, #0
 80067a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067aa:	462a      	mov	r2, r5
 80067ac:	f000 fb4a 	bl	8006e44 <_realloc_r>
 80067b0:	4606      	mov	r6, r0
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d1e0      	bne.n	8006778 <__ssputs_r+0x5c>
 80067b6:	6921      	ldr	r1, [r4, #16]
 80067b8:	4650      	mov	r0, sl
 80067ba:	f000 fba9 	bl	8006f10 <_free_r>
 80067be:	230c      	movs	r3, #12
 80067c0:	f8ca 3000 	str.w	r3, [sl]
 80067c4:	89a3      	ldrh	r3, [r4, #12]
 80067c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067ca:	81a3      	strh	r3, [r4, #12]
 80067cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067d0:	e7e9      	b.n	80067a6 <__ssputs_r+0x8a>
	...

080067d4 <_svfiprintf_r>:
 80067d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	4698      	mov	r8, r3
 80067da:	898b      	ldrh	r3, [r1, #12]
 80067dc:	061b      	lsls	r3, r3, #24
 80067de:	b09d      	sub	sp, #116	@ 0x74
 80067e0:	4607      	mov	r7, r0
 80067e2:	460d      	mov	r5, r1
 80067e4:	4614      	mov	r4, r2
 80067e6:	d510      	bpl.n	800680a <_svfiprintf_r+0x36>
 80067e8:	690b      	ldr	r3, [r1, #16]
 80067ea:	b973      	cbnz	r3, 800680a <_svfiprintf_r+0x36>
 80067ec:	2140      	movs	r1, #64	@ 0x40
 80067ee:	f000 f90f 	bl	8006a10 <_malloc_r>
 80067f2:	6028      	str	r0, [r5, #0]
 80067f4:	6128      	str	r0, [r5, #16]
 80067f6:	b930      	cbnz	r0, 8006806 <_svfiprintf_r+0x32>
 80067f8:	230c      	movs	r3, #12
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006800:	b01d      	add	sp, #116	@ 0x74
 8006802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006806:	2340      	movs	r3, #64	@ 0x40
 8006808:	616b      	str	r3, [r5, #20]
 800680a:	2300      	movs	r3, #0
 800680c:	9309      	str	r3, [sp, #36]	@ 0x24
 800680e:	2320      	movs	r3, #32
 8006810:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006814:	f8cd 800c 	str.w	r8, [sp, #12]
 8006818:	2330      	movs	r3, #48	@ 0x30
 800681a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80069b8 <_svfiprintf_r+0x1e4>
 800681e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006822:	f04f 0901 	mov.w	r9, #1
 8006826:	4623      	mov	r3, r4
 8006828:	469a      	mov	sl, r3
 800682a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800682e:	b10a      	cbz	r2, 8006834 <_svfiprintf_r+0x60>
 8006830:	2a25      	cmp	r2, #37	@ 0x25
 8006832:	d1f9      	bne.n	8006828 <_svfiprintf_r+0x54>
 8006834:	ebba 0b04 	subs.w	fp, sl, r4
 8006838:	d00b      	beq.n	8006852 <_svfiprintf_r+0x7e>
 800683a:	465b      	mov	r3, fp
 800683c:	4622      	mov	r2, r4
 800683e:	4629      	mov	r1, r5
 8006840:	4638      	mov	r0, r7
 8006842:	f7ff ff6b 	bl	800671c <__ssputs_r>
 8006846:	3001      	adds	r0, #1
 8006848:	f000 80a7 	beq.w	800699a <_svfiprintf_r+0x1c6>
 800684c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800684e:	445a      	add	r2, fp
 8006850:	9209      	str	r2, [sp, #36]	@ 0x24
 8006852:	f89a 3000 	ldrb.w	r3, [sl]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 809f 	beq.w	800699a <_svfiprintf_r+0x1c6>
 800685c:	2300      	movs	r3, #0
 800685e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006866:	f10a 0a01 	add.w	sl, sl, #1
 800686a:	9304      	str	r3, [sp, #16]
 800686c:	9307      	str	r3, [sp, #28]
 800686e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006872:	931a      	str	r3, [sp, #104]	@ 0x68
 8006874:	4654      	mov	r4, sl
 8006876:	2205      	movs	r2, #5
 8006878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800687c:	484e      	ldr	r0, [pc, #312]	@ (80069b8 <_svfiprintf_r+0x1e4>)
 800687e:	f7f9 fca7 	bl	80001d0 <memchr>
 8006882:	9a04      	ldr	r2, [sp, #16]
 8006884:	b9d8      	cbnz	r0, 80068be <_svfiprintf_r+0xea>
 8006886:	06d0      	lsls	r0, r2, #27
 8006888:	bf44      	itt	mi
 800688a:	2320      	movmi	r3, #32
 800688c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006890:	0711      	lsls	r1, r2, #28
 8006892:	bf44      	itt	mi
 8006894:	232b      	movmi	r3, #43	@ 0x2b
 8006896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800689a:	f89a 3000 	ldrb.w	r3, [sl]
 800689e:	2b2a      	cmp	r3, #42	@ 0x2a
 80068a0:	d015      	beq.n	80068ce <_svfiprintf_r+0xfa>
 80068a2:	9a07      	ldr	r2, [sp, #28]
 80068a4:	4654      	mov	r4, sl
 80068a6:	2000      	movs	r0, #0
 80068a8:	f04f 0c0a 	mov.w	ip, #10
 80068ac:	4621      	mov	r1, r4
 80068ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068b2:	3b30      	subs	r3, #48	@ 0x30
 80068b4:	2b09      	cmp	r3, #9
 80068b6:	d94b      	bls.n	8006950 <_svfiprintf_r+0x17c>
 80068b8:	b1b0      	cbz	r0, 80068e8 <_svfiprintf_r+0x114>
 80068ba:	9207      	str	r2, [sp, #28]
 80068bc:	e014      	b.n	80068e8 <_svfiprintf_r+0x114>
 80068be:	eba0 0308 	sub.w	r3, r0, r8
 80068c2:	fa09 f303 	lsl.w	r3, r9, r3
 80068c6:	4313      	orrs	r3, r2
 80068c8:	9304      	str	r3, [sp, #16]
 80068ca:	46a2      	mov	sl, r4
 80068cc:	e7d2      	b.n	8006874 <_svfiprintf_r+0xa0>
 80068ce:	9b03      	ldr	r3, [sp, #12]
 80068d0:	1d19      	adds	r1, r3, #4
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	9103      	str	r1, [sp, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	bfbb      	ittet	lt
 80068da:	425b      	neglt	r3, r3
 80068dc:	f042 0202 	orrlt.w	r2, r2, #2
 80068e0:	9307      	strge	r3, [sp, #28]
 80068e2:	9307      	strlt	r3, [sp, #28]
 80068e4:	bfb8      	it	lt
 80068e6:	9204      	strlt	r2, [sp, #16]
 80068e8:	7823      	ldrb	r3, [r4, #0]
 80068ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80068ec:	d10a      	bne.n	8006904 <_svfiprintf_r+0x130>
 80068ee:	7863      	ldrb	r3, [r4, #1]
 80068f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80068f2:	d132      	bne.n	800695a <_svfiprintf_r+0x186>
 80068f4:	9b03      	ldr	r3, [sp, #12]
 80068f6:	1d1a      	adds	r2, r3, #4
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	9203      	str	r2, [sp, #12]
 80068fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006900:	3402      	adds	r4, #2
 8006902:	9305      	str	r3, [sp, #20]
 8006904:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80069c8 <_svfiprintf_r+0x1f4>
 8006908:	7821      	ldrb	r1, [r4, #0]
 800690a:	2203      	movs	r2, #3
 800690c:	4650      	mov	r0, sl
 800690e:	f7f9 fc5f 	bl	80001d0 <memchr>
 8006912:	b138      	cbz	r0, 8006924 <_svfiprintf_r+0x150>
 8006914:	9b04      	ldr	r3, [sp, #16]
 8006916:	eba0 000a 	sub.w	r0, r0, sl
 800691a:	2240      	movs	r2, #64	@ 0x40
 800691c:	4082      	lsls	r2, r0
 800691e:	4313      	orrs	r3, r2
 8006920:	3401      	adds	r4, #1
 8006922:	9304      	str	r3, [sp, #16]
 8006924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006928:	4824      	ldr	r0, [pc, #144]	@ (80069bc <_svfiprintf_r+0x1e8>)
 800692a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800692e:	2206      	movs	r2, #6
 8006930:	f7f9 fc4e 	bl	80001d0 <memchr>
 8006934:	2800      	cmp	r0, #0
 8006936:	d036      	beq.n	80069a6 <_svfiprintf_r+0x1d2>
 8006938:	4b21      	ldr	r3, [pc, #132]	@ (80069c0 <_svfiprintf_r+0x1ec>)
 800693a:	bb1b      	cbnz	r3, 8006984 <_svfiprintf_r+0x1b0>
 800693c:	9b03      	ldr	r3, [sp, #12]
 800693e:	3307      	adds	r3, #7
 8006940:	f023 0307 	bic.w	r3, r3, #7
 8006944:	3308      	adds	r3, #8
 8006946:	9303      	str	r3, [sp, #12]
 8006948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800694a:	4433      	add	r3, r6
 800694c:	9309      	str	r3, [sp, #36]	@ 0x24
 800694e:	e76a      	b.n	8006826 <_svfiprintf_r+0x52>
 8006950:	fb0c 3202 	mla	r2, ip, r2, r3
 8006954:	460c      	mov	r4, r1
 8006956:	2001      	movs	r0, #1
 8006958:	e7a8      	b.n	80068ac <_svfiprintf_r+0xd8>
 800695a:	2300      	movs	r3, #0
 800695c:	3401      	adds	r4, #1
 800695e:	9305      	str	r3, [sp, #20]
 8006960:	4619      	mov	r1, r3
 8006962:	f04f 0c0a 	mov.w	ip, #10
 8006966:	4620      	mov	r0, r4
 8006968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800696c:	3a30      	subs	r2, #48	@ 0x30
 800696e:	2a09      	cmp	r2, #9
 8006970:	d903      	bls.n	800697a <_svfiprintf_r+0x1a6>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0c6      	beq.n	8006904 <_svfiprintf_r+0x130>
 8006976:	9105      	str	r1, [sp, #20]
 8006978:	e7c4      	b.n	8006904 <_svfiprintf_r+0x130>
 800697a:	fb0c 2101 	mla	r1, ip, r1, r2
 800697e:	4604      	mov	r4, r0
 8006980:	2301      	movs	r3, #1
 8006982:	e7f0      	b.n	8006966 <_svfiprintf_r+0x192>
 8006984:	ab03      	add	r3, sp, #12
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	462a      	mov	r2, r5
 800698a:	4b0e      	ldr	r3, [pc, #56]	@ (80069c4 <_svfiprintf_r+0x1f0>)
 800698c:	a904      	add	r1, sp, #16
 800698e:	4638      	mov	r0, r7
 8006990:	f3af 8000 	nop.w
 8006994:	1c42      	adds	r2, r0, #1
 8006996:	4606      	mov	r6, r0
 8006998:	d1d6      	bne.n	8006948 <_svfiprintf_r+0x174>
 800699a:	89ab      	ldrh	r3, [r5, #12]
 800699c:	065b      	lsls	r3, r3, #25
 800699e:	f53f af2d 	bmi.w	80067fc <_svfiprintf_r+0x28>
 80069a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069a4:	e72c      	b.n	8006800 <_svfiprintf_r+0x2c>
 80069a6:	ab03      	add	r3, sp, #12
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	462a      	mov	r2, r5
 80069ac:	4b05      	ldr	r3, [pc, #20]	@ (80069c4 <_svfiprintf_r+0x1f0>)
 80069ae:	a904      	add	r1, sp, #16
 80069b0:	4638      	mov	r0, r7
 80069b2:	f000 f91b 	bl	8006bec <_printf_i>
 80069b6:	e7ed      	b.n	8006994 <_svfiprintf_r+0x1c0>
 80069b8:	08007f3c 	.word	0x08007f3c
 80069bc:	08007f46 	.word	0x08007f46
 80069c0:	00000000 	.word	0x00000000
 80069c4:	0800671d 	.word	0x0800671d
 80069c8:	08007f42 	.word	0x08007f42

080069cc <sbrk_aligned>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	4e0f      	ldr	r6, [pc, #60]	@ (8006a0c <sbrk_aligned+0x40>)
 80069d0:	460c      	mov	r4, r1
 80069d2:	6831      	ldr	r1, [r6, #0]
 80069d4:	4605      	mov	r5, r0
 80069d6:	b911      	cbnz	r1, 80069de <sbrk_aligned+0x12>
 80069d8:	f000 fa7c 	bl	8006ed4 <_sbrk_r>
 80069dc:	6030      	str	r0, [r6, #0]
 80069de:	4621      	mov	r1, r4
 80069e0:	4628      	mov	r0, r5
 80069e2:	f000 fa77 	bl	8006ed4 <_sbrk_r>
 80069e6:	1c43      	adds	r3, r0, #1
 80069e8:	d103      	bne.n	80069f2 <sbrk_aligned+0x26>
 80069ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80069ee:	4620      	mov	r0, r4
 80069f0:	bd70      	pop	{r4, r5, r6, pc}
 80069f2:	1cc4      	adds	r4, r0, #3
 80069f4:	f024 0403 	bic.w	r4, r4, #3
 80069f8:	42a0      	cmp	r0, r4
 80069fa:	d0f8      	beq.n	80069ee <sbrk_aligned+0x22>
 80069fc:	1a21      	subs	r1, r4, r0
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 fa68 	bl	8006ed4 <_sbrk_r>
 8006a04:	3001      	adds	r0, #1
 8006a06:	d1f2      	bne.n	80069ee <sbrk_aligned+0x22>
 8006a08:	e7ef      	b.n	80069ea <sbrk_aligned+0x1e>
 8006a0a:	bf00      	nop
 8006a0c:	2000064c 	.word	0x2000064c

08006a10 <_malloc_r>:
 8006a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a14:	1ccd      	adds	r5, r1, #3
 8006a16:	f025 0503 	bic.w	r5, r5, #3
 8006a1a:	3508      	adds	r5, #8
 8006a1c:	2d0c      	cmp	r5, #12
 8006a1e:	bf38      	it	cc
 8006a20:	250c      	movcc	r5, #12
 8006a22:	2d00      	cmp	r5, #0
 8006a24:	4606      	mov	r6, r0
 8006a26:	db01      	blt.n	8006a2c <_malloc_r+0x1c>
 8006a28:	42a9      	cmp	r1, r5
 8006a2a:	d904      	bls.n	8006a36 <_malloc_r+0x26>
 8006a2c:	230c      	movs	r3, #12
 8006a2e:	6033      	str	r3, [r6, #0]
 8006a30:	2000      	movs	r0, #0
 8006a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b0c <_malloc_r+0xfc>
 8006a3a:	f000 f9f7 	bl	8006e2c <__malloc_lock>
 8006a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a42:	461c      	mov	r4, r3
 8006a44:	bb44      	cbnz	r4, 8006a98 <_malloc_r+0x88>
 8006a46:	4629      	mov	r1, r5
 8006a48:	4630      	mov	r0, r6
 8006a4a:	f7ff ffbf 	bl	80069cc <sbrk_aligned>
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	4604      	mov	r4, r0
 8006a52:	d158      	bne.n	8006b06 <_malloc_r+0xf6>
 8006a54:	f8d8 4000 	ldr.w	r4, [r8]
 8006a58:	4627      	mov	r7, r4
 8006a5a:	2f00      	cmp	r7, #0
 8006a5c:	d143      	bne.n	8006ae6 <_malloc_r+0xd6>
 8006a5e:	2c00      	cmp	r4, #0
 8006a60:	d04b      	beq.n	8006afa <_malloc_r+0xea>
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	4639      	mov	r1, r7
 8006a66:	4630      	mov	r0, r6
 8006a68:	eb04 0903 	add.w	r9, r4, r3
 8006a6c:	f000 fa32 	bl	8006ed4 <_sbrk_r>
 8006a70:	4581      	cmp	r9, r0
 8006a72:	d142      	bne.n	8006afa <_malloc_r+0xea>
 8006a74:	6821      	ldr	r1, [r4, #0]
 8006a76:	1a6d      	subs	r5, r5, r1
 8006a78:	4629      	mov	r1, r5
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f7ff ffa6 	bl	80069cc <sbrk_aligned>
 8006a80:	3001      	adds	r0, #1
 8006a82:	d03a      	beq.n	8006afa <_malloc_r+0xea>
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	442b      	add	r3, r5
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	bb62      	cbnz	r2, 8006aec <_malloc_r+0xdc>
 8006a92:	f8c8 7000 	str.w	r7, [r8]
 8006a96:	e00f      	b.n	8006ab8 <_malloc_r+0xa8>
 8006a98:	6822      	ldr	r2, [r4, #0]
 8006a9a:	1b52      	subs	r2, r2, r5
 8006a9c:	d420      	bmi.n	8006ae0 <_malloc_r+0xd0>
 8006a9e:	2a0b      	cmp	r2, #11
 8006aa0:	d917      	bls.n	8006ad2 <_malloc_r+0xc2>
 8006aa2:	1961      	adds	r1, r4, r5
 8006aa4:	42a3      	cmp	r3, r4
 8006aa6:	6025      	str	r5, [r4, #0]
 8006aa8:	bf18      	it	ne
 8006aaa:	6059      	strne	r1, [r3, #4]
 8006aac:	6863      	ldr	r3, [r4, #4]
 8006aae:	bf08      	it	eq
 8006ab0:	f8c8 1000 	streq.w	r1, [r8]
 8006ab4:	5162      	str	r2, [r4, r5]
 8006ab6:	604b      	str	r3, [r1, #4]
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f000 f9bd 	bl	8006e38 <__malloc_unlock>
 8006abe:	f104 000b 	add.w	r0, r4, #11
 8006ac2:	1d23      	adds	r3, r4, #4
 8006ac4:	f020 0007 	bic.w	r0, r0, #7
 8006ac8:	1ac2      	subs	r2, r0, r3
 8006aca:	bf1c      	itt	ne
 8006acc:	1a1b      	subne	r3, r3, r0
 8006ace:	50a3      	strne	r3, [r4, r2]
 8006ad0:	e7af      	b.n	8006a32 <_malloc_r+0x22>
 8006ad2:	6862      	ldr	r2, [r4, #4]
 8006ad4:	42a3      	cmp	r3, r4
 8006ad6:	bf0c      	ite	eq
 8006ad8:	f8c8 2000 	streq.w	r2, [r8]
 8006adc:	605a      	strne	r2, [r3, #4]
 8006ade:	e7eb      	b.n	8006ab8 <_malloc_r+0xa8>
 8006ae0:	4623      	mov	r3, r4
 8006ae2:	6864      	ldr	r4, [r4, #4]
 8006ae4:	e7ae      	b.n	8006a44 <_malloc_r+0x34>
 8006ae6:	463c      	mov	r4, r7
 8006ae8:	687f      	ldr	r7, [r7, #4]
 8006aea:	e7b6      	b.n	8006a5a <_malloc_r+0x4a>
 8006aec:	461a      	mov	r2, r3
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	42a3      	cmp	r3, r4
 8006af2:	d1fb      	bne.n	8006aec <_malloc_r+0xdc>
 8006af4:	2300      	movs	r3, #0
 8006af6:	6053      	str	r3, [r2, #4]
 8006af8:	e7de      	b.n	8006ab8 <_malloc_r+0xa8>
 8006afa:	230c      	movs	r3, #12
 8006afc:	6033      	str	r3, [r6, #0]
 8006afe:	4630      	mov	r0, r6
 8006b00:	f000 f99a 	bl	8006e38 <__malloc_unlock>
 8006b04:	e794      	b.n	8006a30 <_malloc_r+0x20>
 8006b06:	6005      	str	r5, [r0, #0]
 8006b08:	e7d6      	b.n	8006ab8 <_malloc_r+0xa8>
 8006b0a:	bf00      	nop
 8006b0c:	20000650 	.word	0x20000650

08006b10 <_printf_common>:
 8006b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b14:	4616      	mov	r6, r2
 8006b16:	4698      	mov	r8, r3
 8006b18:	688a      	ldr	r2, [r1, #8]
 8006b1a:	690b      	ldr	r3, [r1, #16]
 8006b1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b20:	4293      	cmp	r3, r2
 8006b22:	bfb8      	it	lt
 8006b24:	4613      	movlt	r3, r2
 8006b26:	6033      	str	r3, [r6, #0]
 8006b28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b2c:	4607      	mov	r7, r0
 8006b2e:	460c      	mov	r4, r1
 8006b30:	b10a      	cbz	r2, 8006b36 <_printf_common+0x26>
 8006b32:	3301      	adds	r3, #1
 8006b34:	6033      	str	r3, [r6, #0]
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	0699      	lsls	r1, r3, #26
 8006b3a:	bf42      	ittt	mi
 8006b3c:	6833      	ldrmi	r3, [r6, #0]
 8006b3e:	3302      	addmi	r3, #2
 8006b40:	6033      	strmi	r3, [r6, #0]
 8006b42:	6825      	ldr	r5, [r4, #0]
 8006b44:	f015 0506 	ands.w	r5, r5, #6
 8006b48:	d106      	bne.n	8006b58 <_printf_common+0x48>
 8006b4a:	f104 0a19 	add.w	sl, r4, #25
 8006b4e:	68e3      	ldr	r3, [r4, #12]
 8006b50:	6832      	ldr	r2, [r6, #0]
 8006b52:	1a9b      	subs	r3, r3, r2
 8006b54:	42ab      	cmp	r3, r5
 8006b56:	dc26      	bgt.n	8006ba6 <_printf_common+0x96>
 8006b58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b5c:	6822      	ldr	r2, [r4, #0]
 8006b5e:	3b00      	subs	r3, #0
 8006b60:	bf18      	it	ne
 8006b62:	2301      	movne	r3, #1
 8006b64:	0692      	lsls	r2, r2, #26
 8006b66:	d42b      	bmi.n	8006bc0 <_printf_common+0xb0>
 8006b68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b6c:	4641      	mov	r1, r8
 8006b6e:	4638      	mov	r0, r7
 8006b70:	47c8      	blx	r9
 8006b72:	3001      	adds	r0, #1
 8006b74:	d01e      	beq.n	8006bb4 <_printf_common+0xa4>
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	6922      	ldr	r2, [r4, #16]
 8006b7a:	f003 0306 	and.w	r3, r3, #6
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	bf02      	ittt	eq
 8006b82:	68e5      	ldreq	r5, [r4, #12]
 8006b84:	6833      	ldreq	r3, [r6, #0]
 8006b86:	1aed      	subeq	r5, r5, r3
 8006b88:	68a3      	ldr	r3, [r4, #8]
 8006b8a:	bf0c      	ite	eq
 8006b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b90:	2500      	movne	r5, #0
 8006b92:	4293      	cmp	r3, r2
 8006b94:	bfc4      	itt	gt
 8006b96:	1a9b      	subgt	r3, r3, r2
 8006b98:	18ed      	addgt	r5, r5, r3
 8006b9a:	2600      	movs	r6, #0
 8006b9c:	341a      	adds	r4, #26
 8006b9e:	42b5      	cmp	r5, r6
 8006ba0:	d11a      	bne.n	8006bd8 <_printf_common+0xc8>
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	e008      	b.n	8006bb8 <_printf_common+0xa8>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	4652      	mov	r2, sl
 8006baa:	4641      	mov	r1, r8
 8006bac:	4638      	mov	r0, r7
 8006bae:	47c8      	blx	r9
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	d103      	bne.n	8006bbc <_printf_common+0xac>
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bbc:	3501      	adds	r5, #1
 8006bbe:	e7c6      	b.n	8006b4e <_printf_common+0x3e>
 8006bc0:	18e1      	adds	r1, r4, r3
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	2030      	movs	r0, #48	@ 0x30
 8006bc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bca:	4422      	add	r2, r4
 8006bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bd4:	3302      	adds	r3, #2
 8006bd6:	e7c7      	b.n	8006b68 <_printf_common+0x58>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	4622      	mov	r2, r4
 8006bdc:	4641      	mov	r1, r8
 8006bde:	4638      	mov	r0, r7
 8006be0:	47c8      	blx	r9
 8006be2:	3001      	adds	r0, #1
 8006be4:	d0e6      	beq.n	8006bb4 <_printf_common+0xa4>
 8006be6:	3601      	adds	r6, #1
 8006be8:	e7d9      	b.n	8006b9e <_printf_common+0x8e>
	...

08006bec <_printf_i>:
 8006bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf0:	7e0f      	ldrb	r7, [r1, #24]
 8006bf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bf4:	2f78      	cmp	r7, #120	@ 0x78
 8006bf6:	4691      	mov	r9, r2
 8006bf8:	4680      	mov	r8, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	469a      	mov	sl, r3
 8006bfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c02:	d807      	bhi.n	8006c14 <_printf_i+0x28>
 8006c04:	2f62      	cmp	r7, #98	@ 0x62
 8006c06:	d80a      	bhi.n	8006c1e <_printf_i+0x32>
 8006c08:	2f00      	cmp	r7, #0
 8006c0a:	f000 80d2 	beq.w	8006db2 <_printf_i+0x1c6>
 8006c0e:	2f58      	cmp	r7, #88	@ 0x58
 8006c10:	f000 80b9 	beq.w	8006d86 <_printf_i+0x19a>
 8006c14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c1c:	e03a      	b.n	8006c94 <_printf_i+0xa8>
 8006c1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c22:	2b15      	cmp	r3, #21
 8006c24:	d8f6      	bhi.n	8006c14 <_printf_i+0x28>
 8006c26:	a101      	add	r1, pc, #4	@ (adr r1, 8006c2c <_printf_i+0x40>)
 8006c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c2c:	08006c85 	.word	0x08006c85
 8006c30:	08006c99 	.word	0x08006c99
 8006c34:	08006c15 	.word	0x08006c15
 8006c38:	08006c15 	.word	0x08006c15
 8006c3c:	08006c15 	.word	0x08006c15
 8006c40:	08006c15 	.word	0x08006c15
 8006c44:	08006c99 	.word	0x08006c99
 8006c48:	08006c15 	.word	0x08006c15
 8006c4c:	08006c15 	.word	0x08006c15
 8006c50:	08006c15 	.word	0x08006c15
 8006c54:	08006c15 	.word	0x08006c15
 8006c58:	08006d99 	.word	0x08006d99
 8006c5c:	08006cc3 	.word	0x08006cc3
 8006c60:	08006d53 	.word	0x08006d53
 8006c64:	08006c15 	.word	0x08006c15
 8006c68:	08006c15 	.word	0x08006c15
 8006c6c:	08006dbb 	.word	0x08006dbb
 8006c70:	08006c15 	.word	0x08006c15
 8006c74:	08006cc3 	.word	0x08006cc3
 8006c78:	08006c15 	.word	0x08006c15
 8006c7c:	08006c15 	.word	0x08006c15
 8006c80:	08006d5b 	.word	0x08006d5b
 8006c84:	6833      	ldr	r3, [r6, #0]
 8006c86:	1d1a      	adds	r2, r3, #4
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6032      	str	r2, [r6, #0]
 8006c8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c94:	2301      	movs	r3, #1
 8006c96:	e09d      	b.n	8006dd4 <_printf_i+0x1e8>
 8006c98:	6833      	ldr	r3, [r6, #0]
 8006c9a:	6820      	ldr	r0, [r4, #0]
 8006c9c:	1d19      	adds	r1, r3, #4
 8006c9e:	6031      	str	r1, [r6, #0]
 8006ca0:	0606      	lsls	r6, r0, #24
 8006ca2:	d501      	bpl.n	8006ca8 <_printf_i+0xbc>
 8006ca4:	681d      	ldr	r5, [r3, #0]
 8006ca6:	e003      	b.n	8006cb0 <_printf_i+0xc4>
 8006ca8:	0645      	lsls	r5, r0, #25
 8006caa:	d5fb      	bpl.n	8006ca4 <_printf_i+0xb8>
 8006cac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cb0:	2d00      	cmp	r5, #0
 8006cb2:	da03      	bge.n	8006cbc <_printf_i+0xd0>
 8006cb4:	232d      	movs	r3, #45	@ 0x2d
 8006cb6:	426d      	negs	r5, r5
 8006cb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cbc:	4859      	ldr	r0, [pc, #356]	@ (8006e24 <_printf_i+0x238>)
 8006cbe:	230a      	movs	r3, #10
 8006cc0:	e011      	b.n	8006ce6 <_printf_i+0xfa>
 8006cc2:	6821      	ldr	r1, [r4, #0]
 8006cc4:	6833      	ldr	r3, [r6, #0]
 8006cc6:	0608      	lsls	r0, r1, #24
 8006cc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ccc:	d402      	bmi.n	8006cd4 <_printf_i+0xe8>
 8006cce:	0649      	lsls	r1, r1, #25
 8006cd0:	bf48      	it	mi
 8006cd2:	b2ad      	uxthmi	r5, r5
 8006cd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cd6:	4853      	ldr	r0, [pc, #332]	@ (8006e24 <_printf_i+0x238>)
 8006cd8:	6033      	str	r3, [r6, #0]
 8006cda:	bf14      	ite	ne
 8006cdc:	230a      	movne	r3, #10
 8006cde:	2308      	moveq	r3, #8
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ce6:	6866      	ldr	r6, [r4, #4]
 8006ce8:	60a6      	str	r6, [r4, #8]
 8006cea:	2e00      	cmp	r6, #0
 8006cec:	bfa2      	ittt	ge
 8006cee:	6821      	ldrge	r1, [r4, #0]
 8006cf0:	f021 0104 	bicge.w	r1, r1, #4
 8006cf4:	6021      	strge	r1, [r4, #0]
 8006cf6:	b90d      	cbnz	r5, 8006cfc <_printf_i+0x110>
 8006cf8:	2e00      	cmp	r6, #0
 8006cfa:	d04b      	beq.n	8006d94 <_printf_i+0x1a8>
 8006cfc:	4616      	mov	r6, r2
 8006cfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d02:	fb03 5711 	mls	r7, r3, r1, r5
 8006d06:	5dc7      	ldrb	r7, [r0, r7]
 8006d08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d0c:	462f      	mov	r7, r5
 8006d0e:	42bb      	cmp	r3, r7
 8006d10:	460d      	mov	r5, r1
 8006d12:	d9f4      	bls.n	8006cfe <_printf_i+0x112>
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d10b      	bne.n	8006d30 <_printf_i+0x144>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	07df      	lsls	r7, r3, #31
 8006d1c:	d508      	bpl.n	8006d30 <_printf_i+0x144>
 8006d1e:	6923      	ldr	r3, [r4, #16]
 8006d20:	6861      	ldr	r1, [r4, #4]
 8006d22:	4299      	cmp	r1, r3
 8006d24:	bfde      	ittt	le
 8006d26:	2330      	movle	r3, #48	@ 0x30
 8006d28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d2c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006d30:	1b92      	subs	r2, r2, r6
 8006d32:	6122      	str	r2, [r4, #16]
 8006d34:	f8cd a000 	str.w	sl, [sp]
 8006d38:	464b      	mov	r3, r9
 8006d3a:	aa03      	add	r2, sp, #12
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4640      	mov	r0, r8
 8006d40:	f7ff fee6 	bl	8006b10 <_printf_common>
 8006d44:	3001      	adds	r0, #1
 8006d46:	d14a      	bne.n	8006dde <_printf_i+0x1f2>
 8006d48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d4c:	b004      	add	sp, #16
 8006d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	f043 0320 	orr.w	r3, r3, #32
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	4833      	ldr	r0, [pc, #204]	@ (8006e28 <_printf_i+0x23c>)
 8006d5c:	2778      	movs	r7, #120	@ 0x78
 8006d5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	6831      	ldr	r1, [r6, #0]
 8006d66:	061f      	lsls	r7, r3, #24
 8006d68:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d6c:	d402      	bmi.n	8006d74 <_printf_i+0x188>
 8006d6e:	065f      	lsls	r7, r3, #25
 8006d70:	bf48      	it	mi
 8006d72:	b2ad      	uxthmi	r5, r5
 8006d74:	6031      	str	r1, [r6, #0]
 8006d76:	07d9      	lsls	r1, r3, #31
 8006d78:	bf44      	itt	mi
 8006d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d7e:	6023      	strmi	r3, [r4, #0]
 8006d80:	b11d      	cbz	r5, 8006d8a <_printf_i+0x19e>
 8006d82:	2310      	movs	r3, #16
 8006d84:	e7ac      	b.n	8006ce0 <_printf_i+0xf4>
 8006d86:	4827      	ldr	r0, [pc, #156]	@ (8006e24 <_printf_i+0x238>)
 8006d88:	e7e9      	b.n	8006d5e <_printf_i+0x172>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	f023 0320 	bic.w	r3, r3, #32
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	e7f6      	b.n	8006d82 <_printf_i+0x196>
 8006d94:	4616      	mov	r6, r2
 8006d96:	e7bd      	b.n	8006d14 <_printf_i+0x128>
 8006d98:	6833      	ldr	r3, [r6, #0]
 8006d9a:	6825      	ldr	r5, [r4, #0]
 8006d9c:	6961      	ldr	r1, [r4, #20]
 8006d9e:	1d18      	adds	r0, r3, #4
 8006da0:	6030      	str	r0, [r6, #0]
 8006da2:	062e      	lsls	r6, r5, #24
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	d501      	bpl.n	8006dac <_printf_i+0x1c0>
 8006da8:	6019      	str	r1, [r3, #0]
 8006daa:	e002      	b.n	8006db2 <_printf_i+0x1c6>
 8006dac:	0668      	lsls	r0, r5, #25
 8006dae:	d5fb      	bpl.n	8006da8 <_printf_i+0x1bc>
 8006db0:	8019      	strh	r1, [r3, #0]
 8006db2:	2300      	movs	r3, #0
 8006db4:	6123      	str	r3, [r4, #16]
 8006db6:	4616      	mov	r6, r2
 8006db8:	e7bc      	b.n	8006d34 <_printf_i+0x148>
 8006dba:	6833      	ldr	r3, [r6, #0]
 8006dbc:	1d1a      	adds	r2, r3, #4
 8006dbe:	6032      	str	r2, [r6, #0]
 8006dc0:	681e      	ldr	r6, [r3, #0]
 8006dc2:	6862      	ldr	r2, [r4, #4]
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f7f9 fa02 	bl	80001d0 <memchr>
 8006dcc:	b108      	cbz	r0, 8006dd2 <_printf_i+0x1e6>
 8006dce:	1b80      	subs	r0, r0, r6
 8006dd0:	6060      	str	r0, [r4, #4]
 8006dd2:	6863      	ldr	r3, [r4, #4]
 8006dd4:	6123      	str	r3, [r4, #16]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ddc:	e7aa      	b.n	8006d34 <_printf_i+0x148>
 8006dde:	6923      	ldr	r3, [r4, #16]
 8006de0:	4632      	mov	r2, r6
 8006de2:	4649      	mov	r1, r9
 8006de4:	4640      	mov	r0, r8
 8006de6:	47d0      	blx	sl
 8006de8:	3001      	adds	r0, #1
 8006dea:	d0ad      	beq.n	8006d48 <_printf_i+0x15c>
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	079b      	lsls	r3, r3, #30
 8006df0:	d413      	bmi.n	8006e1a <_printf_i+0x22e>
 8006df2:	68e0      	ldr	r0, [r4, #12]
 8006df4:	9b03      	ldr	r3, [sp, #12]
 8006df6:	4298      	cmp	r0, r3
 8006df8:	bfb8      	it	lt
 8006dfa:	4618      	movlt	r0, r3
 8006dfc:	e7a6      	b.n	8006d4c <_printf_i+0x160>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4632      	mov	r2, r6
 8006e02:	4649      	mov	r1, r9
 8006e04:	4640      	mov	r0, r8
 8006e06:	47d0      	blx	sl
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d09d      	beq.n	8006d48 <_printf_i+0x15c>
 8006e0c:	3501      	adds	r5, #1
 8006e0e:	68e3      	ldr	r3, [r4, #12]
 8006e10:	9903      	ldr	r1, [sp, #12]
 8006e12:	1a5b      	subs	r3, r3, r1
 8006e14:	42ab      	cmp	r3, r5
 8006e16:	dcf2      	bgt.n	8006dfe <_printf_i+0x212>
 8006e18:	e7eb      	b.n	8006df2 <_printf_i+0x206>
 8006e1a:	2500      	movs	r5, #0
 8006e1c:	f104 0619 	add.w	r6, r4, #25
 8006e20:	e7f5      	b.n	8006e0e <_printf_i+0x222>
 8006e22:	bf00      	nop
 8006e24:	08007f4d 	.word	0x08007f4d
 8006e28:	08007f5e 	.word	0x08007f5e

08006e2c <__malloc_lock>:
 8006e2c:	4801      	ldr	r0, [pc, #4]	@ (8006e34 <__malloc_lock+0x8>)
 8006e2e:	f7ff bc73 	b.w	8006718 <__retarget_lock_acquire_recursive>
 8006e32:	bf00      	nop
 8006e34:	20000648 	.word	0x20000648

08006e38 <__malloc_unlock>:
 8006e38:	4801      	ldr	r0, [pc, #4]	@ (8006e40 <__malloc_unlock+0x8>)
 8006e3a:	f7ff bc6e 	b.w	800671a <__retarget_lock_release_recursive>
 8006e3e:	bf00      	nop
 8006e40:	20000648 	.word	0x20000648

08006e44 <_realloc_r>:
 8006e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e48:	4680      	mov	r8, r0
 8006e4a:	4615      	mov	r5, r2
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	b921      	cbnz	r1, 8006e5a <_realloc_r+0x16>
 8006e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e54:	4611      	mov	r1, r2
 8006e56:	f7ff bddb 	b.w	8006a10 <_malloc_r>
 8006e5a:	b92a      	cbnz	r2, 8006e68 <_realloc_r+0x24>
 8006e5c:	f000 f858 	bl	8006f10 <_free_r>
 8006e60:	2400      	movs	r4, #0
 8006e62:	4620      	mov	r0, r4
 8006e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e68:	f000 f89c 	bl	8006fa4 <_malloc_usable_size_r>
 8006e6c:	4285      	cmp	r5, r0
 8006e6e:	4606      	mov	r6, r0
 8006e70:	d802      	bhi.n	8006e78 <_realloc_r+0x34>
 8006e72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006e76:	d8f4      	bhi.n	8006e62 <_realloc_r+0x1e>
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	f7ff fdc8 	bl	8006a10 <_malloc_r>
 8006e80:	4607      	mov	r7, r0
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d0ec      	beq.n	8006e60 <_realloc_r+0x1c>
 8006e86:	42b5      	cmp	r5, r6
 8006e88:	462a      	mov	r2, r5
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	bf28      	it	cs
 8006e8e:	4632      	movcs	r2, r6
 8006e90:	f000 f830 	bl	8006ef4 <memcpy>
 8006e94:	4621      	mov	r1, r4
 8006e96:	4640      	mov	r0, r8
 8006e98:	f000 f83a 	bl	8006f10 <_free_r>
 8006e9c:	463c      	mov	r4, r7
 8006e9e:	e7e0      	b.n	8006e62 <_realloc_r+0x1e>

08006ea0 <memmove>:
 8006ea0:	4288      	cmp	r0, r1
 8006ea2:	b510      	push	{r4, lr}
 8006ea4:	eb01 0402 	add.w	r4, r1, r2
 8006ea8:	d902      	bls.n	8006eb0 <memmove+0x10>
 8006eaa:	4284      	cmp	r4, r0
 8006eac:	4623      	mov	r3, r4
 8006eae:	d807      	bhi.n	8006ec0 <memmove+0x20>
 8006eb0:	1e43      	subs	r3, r0, #1
 8006eb2:	42a1      	cmp	r1, r4
 8006eb4:	d008      	beq.n	8006ec8 <memmove+0x28>
 8006eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ebe:	e7f8      	b.n	8006eb2 <memmove+0x12>
 8006ec0:	4402      	add	r2, r0
 8006ec2:	4601      	mov	r1, r0
 8006ec4:	428a      	cmp	r2, r1
 8006ec6:	d100      	bne.n	8006eca <memmove+0x2a>
 8006ec8:	bd10      	pop	{r4, pc}
 8006eca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ece:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ed2:	e7f7      	b.n	8006ec4 <memmove+0x24>

08006ed4 <_sbrk_r>:
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	4d06      	ldr	r5, [pc, #24]	@ (8006ef0 <_sbrk_r+0x1c>)
 8006ed8:	2300      	movs	r3, #0
 8006eda:	4604      	mov	r4, r0
 8006edc:	4608      	mov	r0, r1
 8006ede:	602b      	str	r3, [r5, #0]
 8006ee0:	f7fa ff3a 	bl	8001d58 <_sbrk>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d102      	bne.n	8006eee <_sbrk_r+0x1a>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	b103      	cbz	r3, 8006eee <_sbrk_r+0x1a>
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
 8006ef0:	20000654 	.word	0x20000654

08006ef4 <memcpy>:
 8006ef4:	440a      	add	r2, r1
 8006ef6:	4291      	cmp	r1, r2
 8006ef8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006efc:	d100      	bne.n	8006f00 <memcpy+0xc>
 8006efe:	4770      	bx	lr
 8006f00:	b510      	push	{r4, lr}
 8006f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f0a:	4291      	cmp	r1, r2
 8006f0c:	d1f9      	bne.n	8006f02 <memcpy+0xe>
 8006f0e:	bd10      	pop	{r4, pc}

08006f10 <_free_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	4605      	mov	r5, r0
 8006f14:	2900      	cmp	r1, #0
 8006f16:	d041      	beq.n	8006f9c <_free_r+0x8c>
 8006f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f1c:	1f0c      	subs	r4, r1, #4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bfb8      	it	lt
 8006f22:	18e4      	addlt	r4, r4, r3
 8006f24:	f7ff ff82 	bl	8006e2c <__malloc_lock>
 8006f28:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa0 <_free_r+0x90>)
 8006f2a:	6813      	ldr	r3, [r2, #0]
 8006f2c:	b933      	cbnz	r3, 8006f3c <_free_r+0x2c>
 8006f2e:	6063      	str	r3, [r4, #4]
 8006f30:	6014      	str	r4, [r2, #0]
 8006f32:	4628      	mov	r0, r5
 8006f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f38:	f7ff bf7e 	b.w	8006e38 <__malloc_unlock>
 8006f3c:	42a3      	cmp	r3, r4
 8006f3e:	d908      	bls.n	8006f52 <_free_r+0x42>
 8006f40:	6820      	ldr	r0, [r4, #0]
 8006f42:	1821      	adds	r1, r4, r0
 8006f44:	428b      	cmp	r3, r1
 8006f46:	bf01      	itttt	eq
 8006f48:	6819      	ldreq	r1, [r3, #0]
 8006f4a:	685b      	ldreq	r3, [r3, #4]
 8006f4c:	1809      	addeq	r1, r1, r0
 8006f4e:	6021      	streq	r1, [r4, #0]
 8006f50:	e7ed      	b.n	8006f2e <_free_r+0x1e>
 8006f52:	461a      	mov	r2, r3
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	b10b      	cbz	r3, 8006f5c <_free_r+0x4c>
 8006f58:	42a3      	cmp	r3, r4
 8006f5a:	d9fa      	bls.n	8006f52 <_free_r+0x42>
 8006f5c:	6811      	ldr	r1, [r2, #0]
 8006f5e:	1850      	adds	r0, r2, r1
 8006f60:	42a0      	cmp	r0, r4
 8006f62:	d10b      	bne.n	8006f7c <_free_r+0x6c>
 8006f64:	6820      	ldr	r0, [r4, #0]
 8006f66:	4401      	add	r1, r0
 8006f68:	1850      	adds	r0, r2, r1
 8006f6a:	4283      	cmp	r3, r0
 8006f6c:	6011      	str	r1, [r2, #0]
 8006f6e:	d1e0      	bne.n	8006f32 <_free_r+0x22>
 8006f70:	6818      	ldr	r0, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	6053      	str	r3, [r2, #4]
 8006f76:	4408      	add	r0, r1
 8006f78:	6010      	str	r0, [r2, #0]
 8006f7a:	e7da      	b.n	8006f32 <_free_r+0x22>
 8006f7c:	d902      	bls.n	8006f84 <_free_r+0x74>
 8006f7e:	230c      	movs	r3, #12
 8006f80:	602b      	str	r3, [r5, #0]
 8006f82:	e7d6      	b.n	8006f32 <_free_r+0x22>
 8006f84:	6820      	ldr	r0, [r4, #0]
 8006f86:	1821      	adds	r1, r4, r0
 8006f88:	428b      	cmp	r3, r1
 8006f8a:	bf04      	itt	eq
 8006f8c:	6819      	ldreq	r1, [r3, #0]
 8006f8e:	685b      	ldreq	r3, [r3, #4]
 8006f90:	6063      	str	r3, [r4, #4]
 8006f92:	bf04      	itt	eq
 8006f94:	1809      	addeq	r1, r1, r0
 8006f96:	6021      	streq	r1, [r4, #0]
 8006f98:	6054      	str	r4, [r2, #4]
 8006f9a:	e7ca      	b.n	8006f32 <_free_r+0x22>
 8006f9c:	bd38      	pop	{r3, r4, r5, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000650 	.word	0x20000650

08006fa4 <_malloc_usable_size_r>:
 8006fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fa8:	1f18      	subs	r0, r3, #4
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	bfbc      	itt	lt
 8006fae:	580b      	ldrlt	r3, [r1, r0]
 8006fb0:	18c0      	addlt	r0, r0, r3
 8006fb2:	4770      	bx	lr

08006fb4 <pow>:
 8006fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb6:	ed2d 8b02 	vpush	{d8}
 8006fba:	eeb0 8a40 	vmov.f32	s16, s0
 8006fbe:	eef0 8a60 	vmov.f32	s17, s1
 8006fc2:	ec55 4b11 	vmov	r4, r5, d1
 8006fc6:	f000 f873 	bl	80070b0 <__ieee754_pow>
 8006fca:	4622      	mov	r2, r4
 8006fcc:	462b      	mov	r3, r5
 8006fce:	4620      	mov	r0, r4
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	ec57 6b10 	vmov	r6, r7, d0
 8006fd6:	f7f9 fda1 	bl	8000b1c <__aeabi_dcmpun>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d13b      	bne.n	8007056 <pow+0xa2>
 8006fde:	ec51 0b18 	vmov	r0, r1, d8
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f7f9 fd67 	bl	8000ab8 <__aeabi_dcmpeq>
 8006fea:	b1b8      	cbz	r0, 800701c <pow+0x68>
 8006fec:	2200      	movs	r2, #0
 8006fee:	2300      	movs	r3, #0
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	f7f9 fd60 	bl	8000ab8 <__aeabi_dcmpeq>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d146      	bne.n	800708a <pow+0xd6>
 8006ffc:	ec45 4b10 	vmov	d0, r4, r5
 8007000:	f000 f848 	bl	8007094 <finite>
 8007004:	b338      	cbz	r0, 8007056 <pow+0xa2>
 8007006:	2200      	movs	r2, #0
 8007008:	2300      	movs	r3, #0
 800700a:	4620      	mov	r0, r4
 800700c:	4629      	mov	r1, r5
 800700e:	f7f9 fd5d 	bl	8000acc <__aeabi_dcmplt>
 8007012:	b300      	cbz	r0, 8007056 <pow+0xa2>
 8007014:	f7ff fb56 	bl	80066c4 <__errno>
 8007018:	2322      	movs	r3, #34	@ 0x22
 800701a:	e01b      	b.n	8007054 <pow+0xa0>
 800701c:	ec47 6b10 	vmov	d0, r6, r7
 8007020:	f000 f838 	bl	8007094 <finite>
 8007024:	b9e0      	cbnz	r0, 8007060 <pow+0xac>
 8007026:	eeb0 0a48 	vmov.f32	s0, s16
 800702a:	eef0 0a68 	vmov.f32	s1, s17
 800702e:	f000 f831 	bl	8007094 <finite>
 8007032:	b1a8      	cbz	r0, 8007060 <pow+0xac>
 8007034:	ec45 4b10 	vmov	d0, r4, r5
 8007038:	f000 f82c 	bl	8007094 <finite>
 800703c:	b180      	cbz	r0, 8007060 <pow+0xac>
 800703e:	4632      	mov	r2, r6
 8007040:	463b      	mov	r3, r7
 8007042:	4630      	mov	r0, r6
 8007044:	4639      	mov	r1, r7
 8007046:	f7f9 fd69 	bl	8000b1c <__aeabi_dcmpun>
 800704a:	2800      	cmp	r0, #0
 800704c:	d0e2      	beq.n	8007014 <pow+0x60>
 800704e:	f7ff fb39 	bl	80066c4 <__errno>
 8007052:	2321      	movs	r3, #33	@ 0x21
 8007054:	6003      	str	r3, [r0, #0]
 8007056:	ecbd 8b02 	vpop	{d8}
 800705a:	ec47 6b10 	vmov	d0, r6, r7
 800705e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007060:	2200      	movs	r2, #0
 8007062:	2300      	movs	r3, #0
 8007064:	4630      	mov	r0, r6
 8007066:	4639      	mov	r1, r7
 8007068:	f7f9 fd26 	bl	8000ab8 <__aeabi_dcmpeq>
 800706c:	2800      	cmp	r0, #0
 800706e:	d0f2      	beq.n	8007056 <pow+0xa2>
 8007070:	eeb0 0a48 	vmov.f32	s0, s16
 8007074:	eef0 0a68 	vmov.f32	s1, s17
 8007078:	f000 f80c 	bl	8007094 <finite>
 800707c:	2800      	cmp	r0, #0
 800707e:	d0ea      	beq.n	8007056 <pow+0xa2>
 8007080:	ec45 4b10 	vmov	d0, r4, r5
 8007084:	f000 f806 	bl	8007094 <finite>
 8007088:	e7c3      	b.n	8007012 <pow+0x5e>
 800708a:	4f01      	ldr	r7, [pc, #4]	@ (8007090 <pow+0xdc>)
 800708c:	2600      	movs	r6, #0
 800708e:	e7e2      	b.n	8007056 <pow+0xa2>
 8007090:	3ff00000 	.word	0x3ff00000

08007094 <finite>:
 8007094:	b082      	sub	sp, #8
 8007096:	ed8d 0b00 	vstr	d0, [sp]
 800709a:	9801      	ldr	r0, [sp, #4]
 800709c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80070a0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80070a4:	0fc0      	lsrs	r0, r0, #31
 80070a6:	b002      	add	sp, #8
 80070a8:	4770      	bx	lr
 80070aa:	0000      	movs	r0, r0
 80070ac:	0000      	movs	r0, r0
	...

080070b0 <__ieee754_pow>:
 80070b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	b091      	sub	sp, #68	@ 0x44
 80070b6:	ed8d 1b00 	vstr	d1, [sp]
 80070ba:	e9dd 1900 	ldrd	r1, r9, [sp]
 80070be:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80070c2:	ea5a 0001 	orrs.w	r0, sl, r1
 80070c6:	ec57 6b10 	vmov	r6, r7, d0
 80070ca:	d113      	bne.n	80070f4 <__ieee754_pow+0x44>
 80070cc:	19b3      	adds	r3, r6, r6
 80070ce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80070d2:	4152      	adcs	r2, r2
 80070d4:	4298      	cmp	r0, r3
 80070d6:	4b98      	ldr	r3, [pc, #608]	@ (8007338 <__ieee754_pow+0x288>)
 80070d8:	4193      	sbcs	r3, r2
 80070da:	f080 84ea 	bcs.w	8007ab2 <__ieee754_pow+0xa02>
 80070de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070e2:	4630      	mov	r0, r6
 80070e4:	4639      	mov	r1, r7
 80070e6:	f7f9 f8c9 	bl	800027c <__adddf3>
 80070ea:	ec41 0b10 	vmov	d0, r0, r1
 80070ee:	b011      	add	sp, #68	@ 0x44
 80070f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f4:	4a91      	ldr	r2, [pc, #580]	@ (800733c <__ieee754_pow+0x28c>)
 80070f6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80070fa:	4590      	cmp	r8, r2
 80070fc:	463d      	mov	r5, r7
 80070fe:	4633      	mov	r3, r6
 8007100:	d806      	bhi.n	8007110 <__ieee754_pow+0x60>
 8007102:	d101      	bne.n	8007108 <__ieee754_pow+0x58>
 8007104:	2e00      	cmp	r6, #0
 8007106:	d1ea      	bne.n	80070de <__ieee754_pow+0x2e>
 8007108:	4592      	cmp	sl, r2
 800710a:	d801      	bhi.n	8007110 <__ieee754_pow+0x60>
 800710c:	d10e      	bne.n	800712c <__ieee754_pow+0x7c>
 800710e:	b169      	cbz	r1, 800712c <__ieee754_pow+0x7c>
 8007110:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007114:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007118:	431d      	orrs	r5, r3
 800711a:	d1e0      	bne.n	80070de <__ieee754_pow+0x2e>
 800711c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007120:	18db      	adds	r3, r3, r3
 8007122:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007126:	4152      	adcs	r2, r2
 8007128:	429d      	cmp	r5, r3
 800712a:	e7d4      	b.n	80070d6 <__ieee754_pow+0x26>
 800712c:	2d00      	cmp	r5, #0
 800712e:	46c3      	mov	fp, r8
 8007130:	da3a      	bge.n	80071a8 <__ieee754_pow+0xf8>
 8007132:	4a83      	ldr	r2, [pc, #524]	@ (8007340 <__ieee754_pow+0x290>)
 8007134:	4592      	cmp	sl, r2
 8007136:	d84d      	bhi.n	80071d4 <__ieee754_pow+0x124>
 8007138:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800713c:	4592      	cmp	sl, r2
 800713e:	f240 84c7 	bls.w	8007ad0 <__ieee754_pow+0xa20>
 8007142:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007146:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800714a:	2a14      	cmp	r2, #20
 800714c:	dd0f      	ble.n	800716e <__ieee754_pow+0xbe>
 800714e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007152:	fa21 f402 	lsr.w	r4, r1, r2
 8007156:	fa04 f202 	lsl.w	r2, r4, r2
 800715a:	428a      	cmp	r2, r1
 800715c:	f040 84b8 	bne.w	8007ad0 <__ieee754_pow+0xa20>
 8007160:	f004 0401 	and.w	r4, r4, #1
 8007164:	f1c4 0402 	rsb	r4, r4, #2
 8007168:	2900      	cmp	r1, #0
 800716a:	d158      	bne.n	800721e <__ieee754_pow+0x16e>
 800716c:	e00e      	b.n	800718c <__ieee754_pow+0xdc>
 800716e:	2900      	cmp	r1, #0
 8007170:	d154      	bne.n	800721c <__ieee754_pow+0x16c>
 8007172:	f1c2 0214 	rsb	r2, r2, #20
 8007176:	fa4a f402 	asr.w	r4, sl, r2
 800717a:	fa04 f202 	lsl.w	r2, r4, r2
 800717e:	4552      	cmp	r2, sl
 8007180:	f040 84a3 	bne.w	8007aca <__ieee754_pow+0xa1a>
 8007184:	f004 0401 	and.w	r4, r4, #1
 8007188:	f1c4 0402 	rsb	r4, r4, #2
 800718c:	4a6d      	ldr	r2, [pc, #436]	@ (8007344 <__ieee754_pow+0x294>)
 800718e:	4592      	cmp	sl, r2
 8007190:	d12e      	bne.n	80071f0 <__ieee754_pow+0x140>
 8007192:	f1b9 0f00 	cmp.w	r9, #0
 8007196:	f280 8494 	bge.w	8007ac2 <__ieee754_pow+0xa12>
 800719a:	496a      	ldr	r1, [pc, #424]	@ (8007344 <__ieee754_pow+0x294>)
 800719c:	4632      	mov	r2, r6
 800719e:	463b      	mov	r3, r7
 80071a0:	2000      	movs	r0, #0
 80071a2:	f7f9 fb4b 	bl	800083c <__aeabi_ddiv>
 80071a6:	e7a0      	b.n	80070ea <__ieee754_pow+0x3a>
 80071a8:	2400      	movs	r4, #0
 80071aa:	bbc1      	cbnz	r1, 800721e <__ieee754_pow+0x16e>
 80071ac:	4a63      	ldr	r2, [pc, #396]	@ (800733c <__ieee754_pow+0x28c>)
 80071ae:	4592      	cmp	sl, r2
 80071b0:	d1ec      	bne.n	800718c <__ieee754_pow+0xdc>
 80071b2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80071b6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80071ba:	431a      	orrs	r2, r3
 80071bc:	f000 8479 	beq.w	8007ab2 <__ieee754_pow+0xa02>
 80071c0:	4b61      	ldr	r3, [pc, #388]	@ (8007348 <__ieee754_pow+0x298>)
 80071c2:	4598      	cmp	r8, r3
 80071c4:	d908      	bls.n	80071d8 <__ieee754_pow+0x128>
 80071c6:	f1b9 0f00 	cmp.w	r9, #0
 80071ca:	f2c0 8476 	blt.w	8007aba <__ieee754_pow+0xa0a>
 80071ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071d2:	e78a      	b.n	80070ea <__ieee754_pow+0x3a>
 80071d4:	2402      	movs	r4, #2
 80071d6:	e7e8      	b.n	80071aa <__ieee754_pow+0xfa>
 80071d8:	f1b9 0f00 	cmp.w	r9, #0
 80071dc:	f04f 0000 	mov.w	r0, #0
 80071e0:	f04f 0100 	mov.w	r1, #0
 80071e4:	da81      	bge.n	80070ea <__ieee754_pow+0x3a>
 80071e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80071ea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80071ee:	e77c      	b.n	80070ea <__ieee754_pow+0x3a>
 80071f0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80071f4:	d106      	bne.n	8007204 <__ieee754_pow+0x154>
 80071f6:	4632      	mov	r2, r6
 80071f8:	463b      	mov	r3, r7
 80071fa:	4630      	mov	r0, r6
 80071fc:	4639      	mov	r1, r7
 80071fe:	f7f9 f9f3 	bl	80005e8 <__aeabi_dmul>
 8007202:	e772      	b.n	80070ea <__ieee754_pow+0x3a>
 8007204:	4a51      	ldr	r2, [pc, #324]	@ (800734c <__ieee754_pow+0x29c>)
 8007206:	4591      	cmp	r9, r2
 8007208:	d109      	bne.n	800721e <__ieee754_pow+0x16e>
 800720a:	2d00      	cmp	r5, #0
 800720c:	db07      	blt.n	800721e <__ieee754_pow+0x16e>
 800720e:	ec47 6b10 	vmov	d0, r6, r7
 8007212:	b011      	add	sp, #68	@ 0x44
 8007214:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	f000 bd50 	b.w	8007cbc <__ieee754_sqrt>
 800721c:	2400      	movs	r4, #0
 800721e:	ec47 6b10 	vmov	d0, r6, r7
 8007222:	9302      	str	r3, [sp, #8]
 8007224:	f000 fcc4 	bl	8007bb0 <fabs>
 8007228:	9b02      	ldr	r3, [sp, #8]
 800722a:	ec51 0b10 	vmov	r0, r1, d0
 800722e:	bb53      	cbnz	r3, 8007286 <__ieee754_pow+0x1d6>
 8007230:	4b44      	ldr	r3, [pc, #272]	@ (8007344 <__ieee754_pow+0x294>)
 8007232:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8007236:	429a      	cmp	r2, r3
 8007238:	d002      	beq.n	8007240 <__ieee754_pow+0x190>
 800723a:	f1b8 0f00 	cmp.w	r8, #0
 800723e:	d122      	bne.n	8007286 <__ieee754_pow+0x1d6>
 8007240:	f1b9 0f00 	cmp.w	r9, #0
 8007244:	da05      	bge.n	8007252 <__ieee754_pow+0x1a2>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	2000      	movs	r0, #0
 800724c:	493d      	ldr	r1, [pc, #244]	@ (8007344 <__ieee754_pow+0x294>)
 800724e:	f7f9 faf5 	bl	800083c <__aeabi_ddiv>
 8007252:	2d00      	cmp	r5, #0
 8007254:	f6bf af49 	bge.w	80070ea <__ieee754_pow+0x3a>
 8007258:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800725c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007260:	ea58 0804 	orrs.w	r8, r8, r4
 8007264:	d108      	bne.n	8007278 <__ieee754_pow+0x1c8>
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	4610      	mov	r0, r2
 800726c:	4619      	mov	r1, r3
 800726e:	f7f9 f803 	bl	8000278 <__aeabi_dsub>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	e794      	b.n	80071a2 <__ieee754_pow+0xf2>
 8007278:	2c01      	cmp	r4, #1
 800727a:	f47f af36 	bne.w	80070ea <__ieee754_pow+0x3a>
 800727e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007282:	4619      	mov	r1, r3
 8007284:	e731      	b.n	80070ea <__ieee754_pow+0x3a>
 8007286:	0feb      	lsrs	r3, r5, #31
 8007288:	3b01      	subs	r3, #1
 800728a:	ea53 0204 	orrs.w	r2, r3, r4
 800728e:	d102      	bne.n	8007296 <__ieee754_pow+0x1e6>
 8007290:	4632      	mov	r2, r6
 8007292:	463b      	mov	r3, r7
 8007294:	e7e9      	b.n	800726a <__ieee754_pow+0x1ba>
 8007296:	3c01      	subs	r4, #1
 8007298:	431c      	orrs	r4, r3
 800729a:	d016      	beq.n	80072ca <__ieee754_pow+0x21a>
 800729c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007328 <__ieee754_pow+0x278>
 80072a0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80072a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80072a8:	f240 8112 	bls.w	80074d0 <__ieee754_pow+0x420>
 80072ac:	4b28      	ldr	r3, [pc, #160]	@ (8007350 <__ieee754_pow+0x2a0>)
 80072ae:	459a      	cmp	sl, r3
 80072b0:	4b25      	ldr	r3, [pc, #148]	@ (8007348 <__ieee754_pow+0x298>)
 80072b2:	d916      	bls.n	80072e2 <__ieee754_pow+0x232>
 80072b4:	4598      	cmp	r8, r3
 80072b6:	d80b      	bhi.n	80072d0 <__ieee754_pow+0x220>
 80072b8:	f1b9 0f00 	cmp.w	r9, #0
 80072bc:	da0b      	bge.n	80072d6 <__ieee754_pow+0x226>
 80072be:	2000      	movs	r0, #0
 80072c0:	b011      	add	sp, #68	@ 0x44
 80072c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c6:	f000 bc6b 	b.w	8007ba0 <__math_oflow>
 80072ca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007330 <__ieee754_pow+0x280>
 80072ce:	e7e7      	b.n	80072a0 <__ieee754_pow+0x1f0>
 80072d0:	f1b9 0f00 	cmp.w	r9, #0
 80072d4:	dcf3      	bgt.n	80072be <__ieee754_pow+0x20e>
 80072d6:	2000      	movs	r0, #0
 80072d8:	b011      	add	sp, #68	@ 0x44
 80072da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072de:	f000 bc57 	b.w	8007b90 <__math_uflow>
 80072e2:	4598      	cmp	r8, r3
 80072e4:	d20c      	bcs.n	8007300 <__ieee754_pow+0x250>
 80072e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ea:	2200      	movs	r2, #0
 80072ec:	2300      	movs	r3, #0
 80072ee:	f7f9 fbed 	bl	8000acc <__aeabi_dcmplt>
 80072f2:	3800      	subs	r0, #0
 80072f4:	bf18      	it	ne
 80072f6:	2001      	movne	r0, #1
 80072f8:	f1b9 0f00 	cmp.w	r9, #0
 80072fc:	daec      	bge.n	80072d8 <__ieee754_pow+0x228>
 80072fe:	e7df      	b.n	80072c0 <__ieee754_pow+0x210>
 8007300:	4b10      	ldr	r3, [pc, #64]	@ (8007344 <__ieee754_pow+0x294>)
 8007302:	4598      	cmp	r8, r3
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	d924      	bls.n	8007354 <__ieee754_pow+0x2a4>
 800730a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800730e:	2300      	movs	r3, #0
 8007310:	f7f9 fbdc 	bl	8000acc <__aeabi_dcmplt>
 8007314:	3800      	subs	r0, #0
 8007316:	bf18      	it	ne
 8007318:	2001      	movne	r0, #1
 800731a:	f1b9 0f00 	cmp.w	r9, #0
 800731e:	dccf      	bgt.n	80072c0 <__ieee754_pow+0x210>
 8007320:	e7da      	b.n	80072d8 <__ieee754_pow+0x228>
 8007322:	bf00      	nop
 8007324:	f3af 8000 	nop.w
 8007328:	00000000 	.word	0x00000000
 800732c:	3ff00000 	.word	0x3ff00000
 8007330:	00000000 	.word	0x00000000
 8007334:	bff00000 	.word	0xbff00000
 8007338:	fff00000 	.word	0xfff00000
 800733c:	7ff00000 	.word	0x7ff00000
 8007340:	433fffff 	.word	0x433fffff
 8007344:	3ff00000 	.word	0x3ff00000
 8007348:	3fefffff 	.word	0x3fefffff
 800734c:	3fe00000 	.word	0x3fe00000
 8007350:	43f00000 	.word	0x43f00000
 8007354:	4b5a      	ldr	r3, [pc, #360]	@ (80074c0 <__ieee754_pow+0x410>)
 8007356:	f7f8 ff8f 	bl	8000278 <__aeabi_dsub>
 800735a:	a351      	add	r3, pc, #324	@ (adr r3, 80074a0 <__ieee754_pow+0x3f0>)
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	4604      	mov	r4, r0
 8007362:	460d      	mov	r5, r1
 8007364:	f7f9 f940 	bl	80005e8 <__aeabi_dmul>
 8007368:	a34f      	add	r3, pc, #316	@ (adr r3, 80074a8 <__ieee754_pow+0x3f8>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	4606      	mov	r6, r0
 8007370:	460f      	mov	r7, r1
 8007372:	4620      	mov	r0, r4
 8007374:	4629      	mov	r1, r5
 8007376:	f7f9 f937 	bl	80005e8 <__aeabi_dmul>
 800737a:	4b52      	ldr	r3, [pc, #328]	@ (80074c4 <__ieee754_pow+0x414>)
 800737c:	4682      	mov	sl, r0
 800737e:	468b      	mov	fp, r1
 8007380:	2200      	movs	r2, #0
 8007382:	4620      	mov	r0, r4
 8007384:	4629      	mov	r1, r5
 8007386:	f7f9 f92f 	bl	80005e8 <__aeabi_dmul>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	a148      	add	r1, pc, #288	@ (adr r1, 80074b0 <__ieee754_pow+0x400>)
 8007390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007394:	f7f8 ff70 	bl	8000278 <__aeabi_dsub>
 8007398:	4622      	mov	r2, r4
 800739a:	462b      	mov	r3, r5
 800739c:	f7f9 f924 	bl	80005e8 <__aeabi_dmul>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	2000      	movs	r0, #0
 80073a6:	4948      	ldr	r1, [pc, #288]	@ (80074c8 <__ieee754_pow+0x418>)
 80073a8:	f7f8 ff66 	bl	8000278 <__aeabi_dsub>
 80073ac:	4622      	mov	r2, r4
 80073ae:	4680      	mov	r8, r0
 80073b0:	4689      	mov	r9, r1
 80073b2:	462b      	mov	r3, r5
 80073b4:	4620      	mov	r0, r4
 80073b6:	4629      	mov	r1, r5
 80073b8:	f7f9 f916 	bl	80005e8 <__aeabi_dmul>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4640      	mov	r0, r8
 80073c2:	4649      	mov	r1, r9
 80073c4:	f7f9 f910 	bl	80005e8 <__aeabi_dmul>
 80073c8:	a33b      	add	r3, pc, #236	@ (adr r3, 80074b8 <__ieee754_pow+0x408>)
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	f7f9 f90b 	bl	80005e8 <__aeabi_dmul>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	4650      	mov	r0, sl
 80073d8:	4659      	mov	r1, fp
 80073da:	f7f8 ff4d 	bl	8000278 <__aeabi_dsub>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4680      	mov	r8, r0
 80073e4:	4689      	mov	r9, r1
 80073e6:	4630      	mov	r0, r6
 80073e8:	4639      	mov	r1, r7
 80073ea:	f7f8 ff47 	bl	800027c <__adddf3>
 80073ee:	2400      	movs	r4, #0
 80073f0:	4632      	mov	r2, r6
 80073f2:	463b      	mov	r3, r7
 80073f4:	4620      	mov	r0, r4
 80073f6:	460d      	mov	r5, r1
 80073f8:	f7f8 ff3e 	bl	8000278 <__aeabi_dsub>
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	4640      	mov	r0, r8
 8007402:	4649      	mov	r1, r9
 8007404:	f7f8 ff38 	bl	8000278 <__aeabi_dsub>
 8007408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800740c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007410:	2300      	movs	r3, #0
 8007412:	9304      	str	r3, [sp, #16]
 8007414:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007418:	4606      	mov	r6, r0
 800741a:	460f      	mov	r7, r1
 800741c:	4652      	mov	r2, sl
 800741e:	465b      	mov	r3, fp
 8007420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007424:	f7f8 ff28 	bl	8000278 <__aeabi_dsub>
 8007428:	4622      	mov	r2, r4
 800742a:	462b      	mov	r3, r5
 800742c:	f7f9 f8dc 	bl	80005e8 <__aeabi_dmul>
 8007430:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007434:	4680      	mov	r8, r0
 8007436:	4689      	mov	r9, r1
 8007438:	4630      	mov	r0, r6
 800743a:	4639      	mov	r1, r7
 800743c:	f7f9 f8d4 	bl	80005e8 <__aeabi_dmul>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4640      	mov	r0, r8
 8007446:	4649      	mov	r1, r9
 8007448:	f7f8 ff18 	bl	800027c <__adddf3>
 800744c:	4652      	mov	r2, sl
 800744e:	465b      	mov	r3, fp
 8007450:	4606      	mov	r6, r0
 8007452:	460f      	mov	r7, r1
 8007454:	4620      	mov	r0, r4
 8007456:	4629      	mov	r1, r5
 8007458:	f7f9 f8c6 	bl	80005e8 <__aeabi_dmul>
 800745c:	460b      	mov	r3, r1
 800745e:	4602      	mov	r2, r0
 8007460:	4680      	mov	r8, r0
 8007462:	4689      	mov	r9, r1
 8007464:	4630      	mov	r0, r6
 8007466:	4639      	mov	r1, r7
 8007468:	f7f8 ff08 	bl	800027c <__adddf3>
 800746c:	4b17      	ldr	r3, [pc, #92]	@ (80074cc <__ieee754_pow+0x41c>)
 800746e:	4299      	cmp	r1, r3
 8007470:	4604      	mov	r4, r0
 8007472:	460d      	mov	r5, r1
 8007474:	468a      	mov	sl, r1
 8007476:	468b      	mov	fp, r1
 8007478:	f340 82ef 	ble.w	8007a5a <__ieee754_pow+0x9aa>
 800747c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007480:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007484:	4303      	orrs	r3, r0
 8007486:	f000 81e8 	beq.w	800785a <__ieee754_pow+0x7aa>
 800748a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800748e:	2200      	movs	r2, #0
 8007490:	2300      	movs	r3, #0
 8007492:	f7f9 fb1b 	bl	8000acc <__aeabi_dcmplt>
 8007496:	3800      	subs	r0, #0
 8007498:	bf18      	it	ne
 800749a:	2001      	movne	r0, #1
 800749c:	e710      	b.n	80072c0 <__ieee754_pow+0x210>
 800749e:	bf00      	nop
 80074a0:	60000000 	.word	0x60000000
 80074a4:	3ff71547 	.word	0x3ff71547
 80074a8:	f85ddf44 	.word	0xf85ddf44
 80074ac:	3e54ae0b 	.word	0x3e54ae0b
 80074b0:	55555555 	.word	0x55555555
 80074b4:	3fd55555 	.word	0x3fd55555
 80074b8:	652b82fe 	.word	0x652b82fe
 80074bc:	3ff71547 	.word	0x3ff71547
 80074c0:	3ff00000 	.word	0x3ff00000
 80074c4:	3fd00000 	.word	0x3fd00000
 80074c8:	3fe00000 	.word	0x3fe00000
 80074cc:	408fffff 	.word	0x408fffff
 80074d0:	4bd5      	ldr	r3, [pc, #852]	@ (8007828 <__ieee754_pow+0x778>)
 80074d2:	402b      	ands	r3, r5
 80074d4:	2200      	movs	r2, #0
 80074d6:	b92b      	cbnz	r3, 80074e4 <__ieee754_pow+0x434>
 80074d8:	4bd4      	ldr	r3, [pc, #848]	@ (800782c <__ieee754_pow+0x77c>)
 80074da:	f7f9 f885 	bl	80005e8 <__aeabi_dmul>
 80074de:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80074e2:	468b      	mov	fp, r1
 80074e4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80074e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80074ec:	4413      	add	r3, r2
 80074ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80074f0:	4bcf      	ldr	r3, [pc, #828]	@ (8007830 <__ieee754_pow+0x780>)
 80074f2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80074f6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80074fa:	459b      	cmp	fp, r3
 80074fc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007500:	dd08      	ble.n	8007514 <__ieee754_pow+0x464>
 8007502:	4bcc      	ldr	r3, [pc, #816]	@ (8007834 <__ieee754_pow+0x784>)
 8007504:	459b      	cmp	fp, r3
 8007506:	f340 81a5 	ble.w	8007854 <__ieee754_pow+0x7a4>
 800750a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800750c:	3301      	adds	r3, #1
 800750e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007510:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007514:	f04f 0a00 	mov.w	sl, #0
 8007518:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800751c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800751e:	4bc6      	ldr	r3, [pc, #792]	@ (8007838 <__ieee754_pow+0x788>)
 8007520:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007524:	ed93 7b00 	vldr	d7, [r3]
 8007528:	4629      	mov	r1, r5
 800752a:	ec53 2b17 	vmov	r2, r3, d7
 800752e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007532:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007536:	f7f8 fe9f 	bl	8000278 <__aeabi_dsub>
 800753a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800753e:	4606      	mov	r6, r0
 8007540:	460f      	mov	r7, r1
 8007542:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007546:	f7f8 fe99 	bl	800027c <__adddf3>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	2000      	movs	r0, #0
 8007550:	49ba      	ldr	r1, [pc, #744]	@ (800783c <__ieee754_pow+0x78c>)
 8007552:	f7f9 f973 	bl	800083c <__aeabi_ddiv>
 8007556:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	4630      	mov	r0, r6
 8007560:	4639      	mov	r1, r7
 8007562:	f7f9 f841 	bl	80005e8 <__aeabi_dmul>
 8007566:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800756a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800756e:	106d      	asrs	r5, r5, #1
 8007570:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007574:	f04f 0b00 	mov.w	fp, #0
 8007578:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800757c:	4661      	mov	r1, ip
 800757e:	2200      	movs	r2, #0
 8007580:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007584:	4658      	mov	r0, fp
 8007586:	46e1      	mov	r9, ip
 8007588:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800758c:	4614      	mov	r4, r2
 800758e:	461d      	mov	r5, r3
 8007590:	f7f9 f82a 	bl	80005e8 <__aeabi_dmul>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4630      	mov	r0, r6
 800759a:	4639      	mov	r1, r7
 800759c:	f7f8 fe6c 	bl	8000278 <__aeabi_dsub>
 80075a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075a4:	4606      	mov	r6, r0
 80075a6:	460f      	mov	r7, r1
 80075a8:	4620      	mov	r0, r4
 80075aa:	4629      	mov	r1, r5
 80075ac:	f7f8 fe64 	bl	8000278 <__aeabi_dsub>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075b8:	f7f8 fe5e 	bl	8000278 <__aeabi_dsub>
 80075bc:	465a      	mov	r2, fp
 80075be:	464b      	mov	r3, r9
 80075c0:	f7f9 f812 	bl	80005e8 <__aeabi_dmul>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4630      	mov	r0, r6
 80075ca:	4639      	mov	r1, r7
 80075cc:	f7f8 fe54 	bl	8000278 <__aeabi_dsub>
 80075d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80075d4:	f7f9 f808 	bl	80005e8 <__aeabi_dmul>
 80075d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075e0:	4610      	mov	r0, r2
 80075e2:	4619      	mov	r1, r3
 80075e4:	f7f9 f800 	bl	80005e8 <__aeabi_dmul>
 80075e8:	a37d      	add	r3, pc, #500	@ (adr r3, 80077e0 <__ieee754_pow+0x730>)
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	4604      	mov	r4, r0
 80075f0:	460d      	mov	r5, r1
 80075f2:	f7f8 fff9 	bl	80005e8 <__aeabi_dmul>
 80075f6:	a37c      	add	r3, pc, #496	@ (adr r3, 80077e8 <__ieee754_pow+0x738>)
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f7f8 fe3e 	bl	800027c <__adddf3>
 8007600:	4622      	mov	r2, r4
 8007602:	462b      	mov	r3, r5
 8007604:	f7f8 fff0 	bl	80005e8 <__aeabi_dmul>
 8007608:	a379      	add	r3, pc, #484	@ (adr r3, 80077f0 <__ieee754_pow+0x740>)
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	f7f8 fe35 	bl	800027c <__adddf3>
 8007612:	4622      	mov	r2, r4
 8007614:	462b      	mov	r3, r5
 8007616:	f7f8 ffe7 	bl	80005e8 <__aeabi_dmul>
 800761a:	a377      	add	r3, pc, #476	@ (adr r3, 80077f8 <__ieee754_pow+0x748>)
 800761c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007620:	f7f8 fe2c 	bl	800027c <__adddf3>
 8007624:	4622      	mov	r2, r4
 8007626:	462b      	mov	r3, r5
 8007628:	f7f8 ffde 	bl	80005e8 <__aeabi_dmul>
 800762c:	a374      	add	r3, pc, #464	@ (adr r3, 8007800 <__ieee754_pow+0x750>)
 800762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007632:	f7f8 fe23 	bl	800027c <__adddf3>
 8007636:	4622      	mov	r2, r4
 8007638:	462b      	mov	r3, r5
 800763a:	f7f8 ffd5 	bl	80005e8 <__aeabi_dmul>
 800763e:	a372      	add	r3, pc, #456	@ (adr r3, 8007808 <__ieee754_pow+0x758>)
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f7f8 fe1a 	bl	800027c <__adddf3>
 8007648:	4622      	mov	r2, r4
 800764a:	4606      	mov	r6, r0
 800764c:	460f      	mov	r7, r1
 800764e:	462b      	mov	r3, r5
 8007650:	4620      	mov	r0, r4
 8007652:	4629      	mov	r1, r5
 8007654:	f7f8 ffc8 	bl	80005e8 <__aeabi_dmul>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	f7f8 ffc2 	bl	80005e8 <__aeabi_dmul>
 8007664:	465a      	mov	r2, fp
 8007666:	4604      	mov	r4, r0
 8007668:	460d      	mov	r5, r1
 800766a:	464b      	mov	r3, r9
 800766c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007670:	f7f8 fe04 	bl	800027c <__adddf3>
 8007674:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007678:	f7f8 ffb6 	bl	80005e8 <__aeabi_dmul>
 800767c:	4622      	mov	r2, r4
 800767e:	462b      	mov	r3, r5
 8007680:	f7f8 fdfc 	bl	800027c <__adddf3>
 8007684:	465a      	mov	r2, fp
 8007686:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800768a:	464b      	mov	r3, r9
 800768c:	4658      	mov	r0, fp
 800768e:	4649      	mov	r1, r9
 8007690:	f7f8 ffaa 	bl	80005e8 <__aeabi_dmul>
 8007694:	4b6a      	ldr	r3, [pc, #424]	@ (8007840 <__ieee754_pow+0x790>)
 8007696:	2200      	movs	r2, #0
 8007698:	4606      	mov	r6, r0
 800769a:	460f      	mov	r7, r1
 800769c:	f7f8 fdee 	bl	800027c <__adddf3>
 80076a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076a4:	f7f8 fdea 	bl	800027c <__adddf3>
 80076a8:	46d8      	mov	r8, fp
 80076aa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80076ae:	460d      	mov	r5, r1
 80076b0:	465a      	mov	r2, fp
 80076b2:	460b      	mov	r3, r1
 80076b4:	4640      	mov	r0, r8
 80076b6:	4649      	mov	r1, r9
 80076b8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80076bc:	f7f8 ff94 	bl	80005e8 <__aeabi_dmul>
 80076c0:	465c      	mov	r4, fp
 80076c2:	4680      	mov	r8, r0
 80076c4:	4689      	mov	r9, r1
 80076c6:	4b5e      	ldr	r3, [pc, #376]	@ (8007840 <__ieee754_pow+0x790>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	4620      	mov	r0, r4
 80076cc:	4629      	mov	r1, r5
 80076ce:	f7f8 fdd3 	bl	8000278 <__aeabi_dsub>
 80076d2:	4632      	mov	r2, r6
 80076d4:	463b      	mov	r3, r7
 80076d6:	f7f8 fdcf 	bl	8000278 <__aeabi_dsub>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076e2:	f7f8 fdc9 	bl	8000278 <__aeabi_dsub>
 80076e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076ea:	f7f8 ff7d 	bl	80005e8 <__aeabi_dmul>
 80076ee:	4622      	mov	r2, r4
 80076f0:	4606      	mov	r6, r0
 80076f2:	460f      	mov	r7, r1
 80076f4:	462b      	mov	r3, r5
 80076f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076fa:	f7f8 ff75 	bl	80005e8 <__aeabi_dmul>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	4630      	mov	r0, r6
 8007704:	4639      	mov	r1, r7
 8007706:	f7f8 fdb9 	bl	800027c <__adddf3>
 800770a:	4606      	mov	r6, r0
 800770c:	460f      	mov	r7, r1
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	4640      	mov	r0, r8
 8007714:	4649      	mov	r1, r9
 8007716:	f7f8 fdb1 	bl	800027c <__adddf3>
 800771a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800771e:	a33c      	add	r3, pc, #240	@ (adr r3, 8007810 <__ieee754_pow+0x760>)
 8007720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007724:	4658      	mov	r0, fp
 8007726:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800772a:	460d      	mov	r5, r1
 800772c:	f7f8 ff5c 	bl	80005e8 <__aeabi_dmul>
 8007730:	465c      	mov	r4, fp
 8007732:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007736:	4642      	mov	r2, r8
 8007738:	464b      	mov	r3, r9
 800773a:	4620      	mov	r0, r4
 800773c:	4629      	mov	r1, r5
 800773e:	f7f8 fd9b 	bl	8000278 <__aeabi_dsub>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4630      	mov	r0, r6
 8007748:	4639      	mov	r1, r7
 800774a:	f7f8 fd95 	bl	8000278 <__aeabi_dsub>
 800774e:	a332      	add	r3, pc, #200	@ (adr r3, 8007818 <__ieee754_pow+0x768>)
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	f7f8 ff48 	bl	80005e8 <__aeabi_dmul>
 8007758:	a331      	add	r3, pc, #196	@ (adr r3, 8007820 <__ieee754_pow+0x770>)
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	4606      	mov	r6, r0
 8007760:	460f      	mov	r7, r1
 8007762:	4620      	mov	r0, r4
 8007764:	4629      	mov	r1, r5
 8007766:	f7f8 ff3f 	bl	80005e8 <__aeabi_dmul>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	4630      	mov	r0, r6
 8007770:	4639      	mov	r1, r7
 8007772:	f7f8 fd83 	bl	800027c <__adddf3>
 8007776:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007778:	4b32      	ldr	r3, [pc, #200]	@ (8007844 <__ieee754_pow+0x794>)
 800777a:	4413      	add	r3, r2
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	f7f8 fd7c 	bl	800027c <__adddf3>
 8007784:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007788:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800778a:	f7f8 fec3 	bl	8000514 <__aeabi_i2d>
 800778e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007790:	4b2d      	ldr	r3, [pc, #180]	@ (8007848 <__ieee754_pow+0x798>)
 8007792:	4413      	add	r3, r2
 8007794:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007798:	4606      	mov	r6, r0
 800779a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800779e:	460f      	mov	r7, r1
 80077a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077a4:	f7f8 fd6a 	bl	800027c <__adddf3>
 80077a8:	4642      	mov	r2, r8
 80077aa:	464b      	mov	r3, r9
 80077ac:	f7f8 fd66 	bl	800027c <__adddf3>
 80077b0:	4632      	mov	r2, r6
 80077b2:	463b      	mov	r3, r7
 80077b4:	f7f8 fd62 	bl	800027c <__adddf3>
 80077b8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80077bc:	4632      	mov	r2, r6
 80077be:	463b      	mov	r3, r7
 80077c0:	4658      	mov	r0, fp
 80077c2:	460d      	mov	r5, r1
 80077c4:	f7f8 fd58 	bl	8000278 <__aeabi_dsub>
 80077c8:	4642      	mov	r2, r8
 80077ca:	464b      	mov	r3, r9
 80077cc:	f7f8 fd54 	bl	8000278 <__aeabi_dsub>
 80077d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077d4:	f7f8 fd50 	bl	8000278 <__aeabi_dsub>
 80077d8:	465c      	mov	r4, fp
 80077da:	4602      	mov	r2, r0
 80077dc:	e036      	b.n	800784c <__ieee754_pow+0x79c>
 80077de:	bf00      	nop
 80077e0:	4a454eef 	.word	0x4a454eef
 80077e4:	3fca7e28 	.word	0x3fca7e28
 80077e8:	93c9db65 	.word	0x93c9db65
 80077ec:	3fcd864a 	.word	0x3fcd864a
 80077f0:	a91d4101 	.word	0xa91d4101
 80077f4:	3fd17460 	.word	0x3fd17460
 80077f8:	518f264d 	.word	0x518f264d
 80077fc:	3fd55555 	.word	0x3fd55555
 8007800:	db6fabff 	.word	0xdb6fabff
 8007804:	3fdb6db6 	.word	0x3fdb6db6
 8007808:	33333303 	.word	0x33333303
 800780c:	3fe33333 	.word	0x3fe33333
 8007810:	e0000000 	.word	0xe0000000
 8007814:	3feec709 	.word	0x3feec709
 8007818:	dc3a03fd 	.word	0xdc3a03fd
 800781c:	3feec709 	.word	0x3feec709
 8007820:	145b01f5 	.word	0x145b01f5
 8007824:	be3e2fe0 	.word	0xbe3e2fe0
 8007828:	7ff00000 	.word	0x7ff00000
 800782c:	43400000 	.word	0x43400000
 8007830:	0003988e 	.word	0x0003988e
 8007834:	000bb679 	.word	0x000bb679
 8007838:	08007f90 	.word	0x08007f90
 800783c:	3ff00000 	.word	0x3ff00000
 8007840:	40080000 	.word	0x40080000
 8007844:	08007f70 	.word	0x08007f70
 8007848:	08007f80 	.word	0x08007f80
 800784c:	460b      	mov	r3, r1
 800784e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007852:	e5d7      	b.n	8007404 <__ieee754_pow+0x354>
 8007854:	f04f 0a01 	mov.w	sl, #1
 8007858:	e65e      	b.n	8007518 <__ieee754_pow+0x468>
 800785a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8007b2c <__ieee754_pow+0xa7c>)
 800785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007860:	4630      	mov	r0, r6
 8007862:	4639      	mov	r1, r7
 8007864:	f7f8 fd0a 	bl	800027c <__adddf3>
 8007868:	4642      	mov	r2, r8
 800786a:	e9cd 0100 	strd	r0, r1, [sp]
 800786e:	464b      	mov	r3, r9
 8007870:	4620      	mov	r0, r4
 8007872:	4629      	mov	r1, r5
 8007874:	f7f8 fd00 	bl	8000278 <__aeabi_dsub>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007880:	f7f9 f942 	bl	8000b08 <__aeabi_dcmpgt>
 8007884:	2800      	cmp	r0, #0
 8007886:	f47f ae00 	bne.w	800748a <__ieee754_pow+0x3da>
 800788a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800788e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007892:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007896:	fa43 fa0a 	asr.w	sl, r3, sl
 800789a:	44da      	add	sl, fp
 800789c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80078a0:	489d      	ldr	r0, [pc, #628]	@ (8007b18 <__ieee754_pow+0xa68>)
 80078a2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80078a6:	4108      	asrs	r0, r1
 80078a8:	ea00 030a 	and.w	r3, r0, sl
 80078ac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80078b0:	f1c1 0114 	rsb	r1, r1, #20
 80078b4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80078b8:	fa4a fa01 	asr.w	sl, sl, r1
 80078bc:	f1bb 0f00 	cmp.w	fp, #0
 80078c0:	4640      	mov	r0, r8
 80078c2:	4649      	mov	r1, r9
 80078c4:	f04f 0200 	mov.w	r2, #0
 80078c8:	bfb8      	it	lt
 80078ca:	f1ca 0a00 	rsblt	sl, sl, #0
 80078ce:	f7f8 fcd3 	bl	8000278 <__aeabi_dsub>
 80078d2:	4680      	mov	r8, r0
 80078d4:	4689      	mov	r9, r1
 80078d6:	4632      	mov	r2, r6
 80078d8:	463b      	mov	r3, r7
 80078da:	4640      	mov	r0, r8
 80078dc:	4649      	mov	r1, r9
 80078de:	f7f8 fccd 	bl	800027c <__adddf3>
 80078e2:	2400      	movs	r4, #0
 80078e4:	a37c      	add	r3, pc, #496	@ (adr r3, 8007ad8 <__ieee754_pow+0xa28>)
 80078e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ea:	4620      	mov	r0, r4
 80078ec:	460d      	mov	r5, r1
 80078ee:	f7f8 fe7b 	bl	80005e8 <__aeabi_dmul>
 80078f2:	4642      	mov	r2, r8
 80078f4:	e9cd 0100 	strd	r0, r1, [sp]
 80078f8:	464b      	mov	r3, r9
 80078fa:	4620      	mov	r0, r4
 80078fc:	4629      	mov	r1, r5
 80078fe:	f7f8 fcbb 	bl	8000278 <__aeabi_dsub>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4630      	mov	r0, r6
 8007908:	4639      	mov	r1, r7
 800790a:	f7f8 fcb5 	bl	8000278 <__aeabi_dsub>
 800790e:	a374      	add	r3, pc, #464	@ (adr r3, 8007ae0 <__ieee754_pow+0xa30>)
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f7f8 fe68 	bl	80005e8 <__aeabi_dmul>
 8007918:	a373      	add	r3, pc, #460	@ (adr r3, 8007ae8 <__ieee754_pow+0xa38>)
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	4680      	mov	r8, r0
 8007920:	4689      	mov	r9, r1
 8007922:	4620      	mov	r0, r4
 8007924:	4629      	mov	r1, r5
 8007926:	f7f8 fe5f 	bl	80005e8 <__aeabi_dmul>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4640      	mov	r0, r8
 8007930:	4649      	mov	r1, r9
 8007932:	f7f8 fca3 	bl	800027c <__adddf3>
 8007936:	4604      	mov	r4, r0
 8007938:	460d      	mov	r5, r1
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007942:	f7f8 fc9b 	bl	800027c <__adddf3>
 8007946:	e9dd 2300 	ldrd	r2, r3, [sp]
 800794a:	4680      	mov	r8, r0
 800794c:	4689      	mov	r9, r1
 800794e:	f7f8 fc93 	bl	8000278 <__aeabi_dsub>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4620      	mov	r0, r4
 8007958:	4629      	mov	r1, r5
 800795a:	f7f8 fc8d 	bl	8000278 <__aeabi_dsub>
 800795e:	4642      	mov	r2, r8
 8007960:	4606      	mov	r6, r0
 8007962:	460f      	mov	r7, r1
 8007964:	464b      	mov	r3, r9
 8007966:	4640      	mov	r0, r8
 8007968:	4649      	mov	r1, r9
 800796a:	f7f8 fe3d 	bl	80005e8 <__aeabi_dmul>
 800796e:	a360      	add	r3, pc, #384	@ (adr r3, 8007af0 <__ieee754_pow+0xa40>)
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	4604      	mov	r4, r0
 8007976:	460d      	mov	r5, r1
 8007978:	f7f8 fe36 	bl	80005e8 <__aeabi_dmul>
 800797c:	a35e      	add	r3, pc, #376	@ (adr r3, 8007af8 <__ieee754_pow+0xa48>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	f7f8 fc79 	bl	8000278 <__aeabi_dsub>
 8007986:	4622      	mov	r2, r4
 8007988:	462b      	mov	r3, r5
 800798a:	f7f8 fe2d 	bl	80005e8 <__aeabi_dmul>
 800798e:	a35c      	add	r3, pc, #368	@ (adr r3, 8007b00 <__ieee754_pow+0xa50>)
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	f7f8 fc72 	bl	800027c <__adddf3>
 8007998:	4622      	mov	r2, r4
 800799a:	462b      	mov	r3, r5
 800799c:	f7f8 fe24 	bl	80005e8 <__aeabi_dmul>
 80079a0:	a359      	add	r3, pc, #356	@ (adr r3, 8007b08 <__ieee754_pow+0xa58>)
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	f7f8 fc67 	bl	8000278 <__aeabi_dsub>
 80079aa:	4622      	mov	r2, r4
 80079ac:	462b      	mov	r3, r5
 80079ae:	f7f8 fe1b 	bl	80005e8 <__aeabi_dmul>
 80079b2:	a357      	add	r3, pc, #348	@ (adr r3, 8007b10 <__ieee754_pow+0xa60>)
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	f7f8 fc60 	bl	800027c <__adddf3>
 80079bc:	4622      	mov	r2, r4
 80079be:	462b      	mov	r3, r5
 80079c0:	f7f8 fe12 	bl	80005e8 <__aeabi_dmul>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4640      	mov	r0, r8
 80079ca:	4649      	mov	r1, r9
 80079cc:	f7f8 fc54 	bl	8000278 <__aeabi_dsub>
 80079d0:	4604      	mov	r4, r0
 80079d2:	460d      	mov	r5, r1
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4640      	mov	r0, r8
 80079da:	4649      	mov	r1, r9
 80079dc:	f7f8 fe04 	bl	80005e8 <__aeabi_dmul>
 80079e0:	2200      	movs	r2, #0
 80079e2:	e9cd 0100 	strd	r0, r1, [sp]
 80079e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079ea:	4620      	mov	r0, r4
 80079ec:	4629      	mov	r1, r5
 80079ee:	f7f8 fc43 	bl	8000278 <__aeabi_dsub>
 80079f2:	4602      	mov	r2, r0
 80079f4:	460b      	mov	r3, r1
 80079f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079fa:	f7f8 ff1f 	bl	800083c <__aeabi_ddiv>
 80079fe:	4632      	mov	r2, r6
 8007a00:	4604      	mov	r4, r0
 8007a02:	460d      	mov	r5, r1
 8007a04:	463b      	mov	r3, r7
 8007a06:	4640      	mov	r0, r8
 8007a08:	4649      	mov	r1, r9
 8007a0a:	f7f8 fded 	bl	80005e8 <__aeabi_dmul>
 8007a0e:	4632      	mov	r2, r6
 8007a10:	463b      	mov	r3, r7
 8007a12:	f7f8 fc33 	bl	800027c <__adddf3>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	f7f8 fc2b 	bl	8000278 <__aeabi_dsub>
 8007a22:	4642      	mov	r2, r8
 8007a24:	464b      	mov	r3, r9
 8007a26:	f7f8 fc27 	bl	8000278 <__aeabi_dsub>
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	493b      	ldr	r1, [pc, #236]	@ (8007b1c <__ieee754_pow+0xa6c>)
 8007a30:	2000      	movs	r0, #0
 8007a32:	f7f8 fc21 	bl	8000278 <__aeabi_dsub>
 8007a36:	ec41 0b10 	vmov	d0, r0, r1
 8007a3a:	ee10 3a90 	vmov	r3, s1
 8007a3e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a46:	da30      	bge.n	8007aaa <__ieee754_pow+0x9fa>
 8007a48:	4650      	mov	r0, sl
 8007a4a:	f000 f8b9 	bl	8007bc0 <scalbn>
 8007a4e:	ec51 0b10 	vmov	r0, r1, d0
 8007a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a56:	f7ff bbd2 	b.w	80071fe <__ieee754_pow+0x14e>
 8007a5a:	4c31      	ldr	r4, [pc, #196]	@ (8007b20 <__ieee754_pow+0xa70>)
 8007a5c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	d91a      	bls.n	8007a9a <__ieee754_pow+0x9ea>
 8007a64:	4b2f      	ldr	r3, [pc, #188]	@ (8007b24 <__ieee754_pow+0xa74>)
 8007a66:	440b      	add	r3, r1
 8007a68:	4303      	orrs	r3, r0
 8007a6a:	d009      	beq.n	8007a80 <__ieee754_pow+0x9d0>
 8007a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a70:	2200      	movs	r2, #0
 8007a72:	2300      	movs	r3, #0
 8007a74:	f7f9 f82a 	bl	8000acc <__aeabi_dcmplt>
 8007a78:	3800      	subs	r0, #0
 8007a7a:	bf18      	it	ne
 8007a7c:	2001      	movne	r0, #1
 8007a7e:	e42b      	b.n	80072d8 <__ieee754_pow+0x228>
 8007a80:	4642      	mov	r2, r8
 8007a82:	464b      	mov	r3, r9
 8007a84:	f7f8 fbf8 	bl	8000278 <__aeabi_dsub>
 8007a88:	4632      	mov	r2, r6
 8007a8a:	463b      	mov	r3, r7
 8007a8c:	f7f9 f832 	bl	8000af4 <__aeabi_dcmpge>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d1eb      	bne.n	8007a6c <__ieee754_pow+0x9bc>
 8007a94:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8007b34 <__ieee754_pow+0xa84>
 8007a98:	e6f7      	b.n	800788a <__ieee754_pow+0x7da>
 8007a9a:	469a      	mov	sl, r3
 8007a9c:	4b22      	ldr	r3, [pc, #136]	@ (8007b28 <__ieee754_pow+0xa78>)
 8007a9e:	459a      	cmp	sl, r3
 8007aa0:	f63f aef3 	bhi.w	800788a <__ieee754_pow+0x7da>
 8007aa4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007aa8:	e715      	b.n	80078d6 <__ieee754_pow+0x826>
 8007aaa:	ec51 0b10 	vmov	r0, r1, d0
 8007aae:	4619      	mov	r1, r3
 8007ab0:	e7cf      	b.n	8007a52 <__ieee754_pow+0x9a2>
 8007ab2:	491a      	ldr	r1, [pc, #104]	@ (8007b1c <__ieee754_pow+0xa6c>)
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	f7ff bb18 	b.w	80070ea <__ieee754_pow+0x3a>
 8007aba:	2000      	movs	r0, #0
 8007abc:	2100      	movs	r1, #0
 8007abe:	f7ff bb14 	b.w	80070ea <__ieee754_pow+0x3a>
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	4639      	mov	r1, r7
 8007ac6:	f7ff bb10 	b.w	80070ea <__ieee754_pow+0x3a>
 8007aca:	460c      	mov	r4, r1
 8007acc:	f7ff bb5e 	b.w	800718c <__ieee754_pow+0xdc>
 8007ad0:	2400      	movs	r4, #0
 8007ad2:	f7ff bb49 	b.w	8007168 <__ieee754_pow+0xb8>
 8007ad6:	bf00      	nop
 8007ad8:	00000000 	.word	0x00000000
 8007adc:	3fe62e43 	.word	0x3fe62e43
 8007ae0:	fefa39ef 	.word	0xfefa39ef
 8007ae4:	3fe62e42 	.word	0x3fe62e42
 8007ae8:	0ca86c39 	.word	0x0ca86c39
 8007aec:	be205c61 	.word	0xbe205c61
 8007af0:	72bea4d0 	.word	0x72bea4d0
 8007af4:	3e663769 	.word	0x3e663769
 8007af8:	c5d26bf1 	.word	0xc5d26bf1
 8007afc:	3ebbbd41 	.word	0x3ebbbd41
 8007b00:	af25de2c 	.word	0xaf25de2c
 8007b04:	3f11566a 	.word	0x3f11566a
 8007b08:	16bebd93 	.word	0x16bebd93
 8007b0c:	3f66c16c 	.word	0x3f66c16c
 8007b10:	5555553e 	.word	0x5555553e
 8007b14:	3fc55555 	.word	0x3fc55555
 8007b18:	fff00000 	.word	0xfff00000
 8007b1c:	3ff00000 	.word	0x3ff00000
 8007b20:	4090cbff 	.word	0x4090cbff
 8007b24:	3f6f3400 	.word	0x3f6f3400
 8007b28:	3fe00000 	.word	0x3fe00000
 8007b2c:	652b82fe 	.word	0x652b82fe
 8007b30:	3c971547 	.word	0x3c971547
 8007b34:	4090cc00 	.word	0x4090cc00

08007b38 <with_errno>:
 8007b38:	b510      	push	{r4, lr}
 8007b3a:	ed2d 8b02 	vpush	{d8}
 8007b3e:	eeb0 8a40 	vmov.f32	s16, s0
 8007b42:	eef0 8a60 	vmov.f32	s17, s1
 8007b46:	4604      	mov	r4, r0
 8007b48:	f7fe fdbc 	bl	80066c4 <__errno>
 8007b4c:	eeb0 0a48 	vmov.f32	s0, s16
 8007b50:	eef0 0a68 	vmov.f32	s1, s17
 8007b54:	ecbd 8b02 	vpop	{d8}
 8007b58:	6004      	str	r4, [r0, #0]
 8007b5a:	bd10      	pop	{r4, pc}

08007b5c <xflow>:
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	b507      	push	{r0, r1, r2, lr}
 8007b60:	ec51 0b10 	vmov	r0, r1, d0
 8007b64:	b183      	cbz	r3, 8007b88 <xflow+0x2c>
 8007b66:	4602      	mov	r2, r0
 8007b68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b6c:	e9cd 2300 	strd	r2, r3, [sp]
 8007b70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b74:	f7f8 fd38 	bl	80005e8 <__aeabi_dmul>
 8007b78:	ec41 0b10 	vmov	d0, r0, r1
 8007b7c:	2022      	movs	r0, #34	@ 0x22
 8007b7e:	b003      	add	sp, #12
 8007b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b84:	f7ff bfd8 	b.w	8007b38 <with_errno>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	e7ee      	b.n	8007b6c <xflow+0x10>
	...

08007b90 <__math_uflow>:
 8007b90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007b98 <__math_uflow+0x8>
 8007b94:	f7ff bfe2 	b.w	8007b5c <xflow>
 8007b98:	00000000 	.word	0x00000000
 8007b9c:	10000000 	.word	0x10000000

08007ba0 <__math_oflow>:
 8007ba0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007ba8 <__math_oflow+0x8>
 8007ba4:	f7ff bfda 	b.w	8007b5c <xflow>
 8007ba8:	00000000 	.word	0x00000000
 8007bac:	70000000 	.word	0x70000000

08007bb0 <fabs>:
 8007bb0:	ec51 0b10 	vmov	r0, r1, d0
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007bba:	ec43 2b10 	vmov	d0, r2, r3
 8007bbe:	4770      	bx	lr

08007bc0 <scalbn>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	ec55 4b10 	vmov	r4, r5, d0
 8007bc6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007bca:	4606      	mov	r6, r0
 8007bcc:	462b      	mov	r3, r5
 8007bce:	b991      	cbnz	r1, 8007bf6 <scalbn+0x36>
 8007bd0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007bd4:	4323      	orrs	r3, r4
 8007bd6:	d03d      	beq.n	8007c54 <scalbn+0x94>
 8007bd8:	4b35      	ldr	r3, [pc, #212]	@ (8007cb0 <scalbn+0xf0>)
 8007bda:	4620      	mov	r0, r4
 8007bdc:	4629      	mov	r1, r5
 8007bde:	2200      	movs	r2, #0
 8007be0:	f7f8 fd02 	bl	80005e8 <__aeabi_dmul>
 8007be4:	4b33      	ldr	r3, [pc, #204]	@ (8007cb4 <scalbn+0xf4>)
 8007be6:	429e      	cmp	r6, r3
 8007be8:	4604      	mov	r4, r0
 8007bea:	460d      	mov	r5, r1
 8007bec:	da0f      	bge.n	8007c0e <scalbn+0x4e>
 8007bee:	a328      	add	r3, pc, #160	@ (adr r3, 8007c90 <scalbn+0xd0>)
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	e01e      	b.n	8007c34 <scalbn+0x74>
 8007bf6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007bfa:	4291      	cmp	r1, r2
 8007bfc:	d10b      	bne.n	8007c16 <scalbn+0x56>
 8007bfe:	4622      	mov	r2, r4
 8007c00:	4620      	mov	r0, r4
 8007c02:	4629      	mov	r1, r5
 8007c04:	f7f8 fb3a 	bl	800027c <__adddf3>
 8007c08:	4604      	mov	r4, r0
 8007c0a:	460d      	mov	r5, r1
 8007c0c:	e022      	b.n	8007c54 <scalbn+0x94>
 8007c0e:	460b      	mov	r3, r1
 8007c10:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007c14:	3936      	subs	r1, #54	@ 0x36
 8007c16:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007c1a:	4296      	cmp	r6, r2
 8007c1c:	dd0d      	ble.n	8007c3a <scalbn+0x7a>
 8007c1e:	2d00      	cmp	r5, #0
 8007c20:	a11d      	add	r1, pc, #116	@ (adr r1, 8007c98 <scalbn+0xd8>)
 8007c22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c26:	da02      	bge.n	8007c2e <scalbn+0x6e>
 8007c28:	a11d      	add	r1, pc, #116	@ (adr r1, 8007ca0 <scalbn+0xe0>)
 8007c2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c2e:	a31a      	add	r3, pc, #104	@ (adr r3, 8007c98 <scalbn+0xd8>)
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	f7f8 fcd8 	bl	80005e8 <__aeabi_dmul>
 8007c38:	e7e6      	b.n	8007c08 <scalbn+0x48>
 8007c3a:	1872      	adds	r2, r6, r1
 8007c3c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007c40:	428a      	cmp	r2, r1
 8007c42:	dcec      	bgt.n	8007c1e <scalbn+0x5e>
 8007c44:	2a00      	cmp	r2, #0
 8007c46:	dd08      	ble.n	8007c5a <scalbn+0x9a>
 8007c48:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007c4c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007c50:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c54:	ec45 4b10 	vmov	d0, r4, r5
 8007c58:	bd70      	pop	{r4, r5, r6, pc}
 8007c5a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007c5e:	da08      	bge.n	8007c72 <scalbn+0xb2>
 8007c60:	2d00      	cmp	r5, #0
 8007c62:	a10b      	add	r1, pc, #44	@ (adr r1, 8007c90 <scalbn+0xd0>)
 8007c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c68:	dac1      	bge.n	8007bee <scalbn+0x2e>
 8007c6a:	a10f      	add	r1, pc, #60	@ (adr r1, 8007ca8 <scalbn+0xe8>)
 8007c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c70:	e7bd      	b.n	8007bee <scalbn+0x2e>
 8007c72:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007c76:	3236      	adds	r2, #54	@ 0x36
 8007c78:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007c7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c80:	4620      	mov	r0, r4
 8007c82:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb8 <scalbn+0xf8>)
 8007c84:	4629      	mov	r1, r5
 8007c86:	2200      	movs	r2, #0
 8007c88:	e7d4      	b.n	8007c34 <scalbn+0x74>
 8007c8a:	bf00      	nop
 8007c8c:	f3af 8000 	nop.w
 8007c90:	c2f8f359 	.word	0xc2f8f359
 8007c94:	01a56e1f 	.word	0x01a56e1f
 8007c98:	8800759c 	.word	0x8800759c
 8007c9c:	7e37e43c 	.word	0x7e37e43c
 8007ca0:	8800759c 	.word	0x8800759c
 8007ca4:	fe37e43c 	.word	0xfe37e43c
 8007ca8:	c2f8f359 	.word	0xc2f8f359
 8007cac:	81a56e1f 	.word	0x81a56e1f
 8007cb0:	43500000 	.word	0x43500000
 8007cb4:	ffff3cb0 	.word	0xffff3cb0
 8007cb8:	3c900000 	.word	0x3c900000

08007cbc <__ieee754_sqrt>:
 8007cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc0:	4a68      	ldr	r2, [pc, #416]	@ (8007e64 <__ieee754_sqrt+0x1a8>)
 8007cc2:	ec55 4b10 	vmov	r4, r5, d0
 8007cc6:	43aa      	bics	r2, r5
 8007cc8:	462b      	mov	r3, r5
 8007cca:	4621      	mov	r1, r4
 8007ccc:	d110      	bne.n	8007cf0 <__ieee754_sqrt+0x34>
 8007cce:	4622      	mov	r2, r4
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	f7f8 fc88 	bl	80005e8 <__aeabi_dmul>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4620      	mov	r0, r4
 8007cde:	4629      	mov	r1, r5
 8007ce0:	f7f8 facc 	bl	800027c <__adddf3>
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	460d      	mov	r5, r1
 8007ce8:	ec45 4b10 	vmov	d0, r4, r5
 8007cec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf0:	2d00      	cmp	r5, #0
 8007cf2:	dc0e      	bgt.n	8007d12 <__ieee754_sqrt+0x56>
 8007cf4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007cf8:	4322      	orrs	r2, r4
 8007cfa:	d0f5      	beq.n	8007ce8 <__ieee754_sqrt+0x2c>
 8007cfc:	b19d      	cbz	r5, 8007d26 <__ieee754_sqrt+0x6a>
 8007cfe:	4622      	mov	r2, r4
 8007d00:	4620      	mov	r0, r4
 8007d02:	4629      	mov	r1, r5
 8007d04:	f7f8 fab8 	bl	8000278 <__aeabi_dsub>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	f7f8 fd96 	bl	800083c <__aeabi_ddiv>
 8007d10:	e7e8      	b.n	8007ce4 <__ieee754_sqrt+0x28>
 8007d12:	152a      	asrs	r2, r5, #20
 8007d14:	d115      	bne.n	8007d42 <__ieee754_sqrt+0x86>
 8007d16:	2000      	movs	r0, #0
 8007d18:	e009      	b.n	8007d2e <__ieee754_sqrt+0x72>
 8007d1a:	0acb      	lsrs	r3, r1, #11
 8007d1c:	3a15      	subs	r2, #21
 8007d1e:	0549      	lsls	r1, r1, #21
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d0fa      	beq.n	8007d1a <__ieee754_sqrt+0x5e>
 8007d24:	e7f7      	b.n	8007d16 <__ieee754_sqrt+0x5a>
 8007d26:	462a      	mov	r2, r5
 8007d28:	e7fa      	b.n	8007d20 <__ieee754_sqrt+0x64>
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	02dc      	lsls	r4, r3, #11
 8007d30:	d5fb      	bpl.n	8007d2a <__ieee754_sqrt+0x6e>
 8007d32:	1e44      	subs	r4, r0, #1
 8007d34:	1b12      	subs	r2, r2, r4
 8007d36:	f1c0 0420 	rsb	r4, r0, #32
 8007d3a:	fa21 f404 	lsr.w	r4, r1, r4
 8007d3e:	4323      	orrs	r3, r4
 8007d40:	4081      	lsls	r1, r0
 8007d42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d46:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8007d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d4e:	07d2      	lsls	r2, r2, #31
 8007d50:	bf5c      	itt	pl
 8007d52:	005b      	lslpl	r3, r3, #1
 8007d54:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007d58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007d5c:	bf58      	it	pl
 8007d5e:	0049      	lslpl	r1, r1, #1
 8007d60:	2600      	movs	r6, #0
 8007d62:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007d66:	106d      	asrs	r5, r5, #1
 8007d68:	0049      	lsls	r1, r1, #1
 8007d6a:	2016      	movs	r0, #22
 8007d6c:	4632      	mov	r2, r6
 8007d6e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007d72:	1917      	adds	r7, r2, r4
 8007d74:	429f      	cmp	r7, r3
 8007d76:	bfde      	ittt	le
 8007d78:	193a      	addle	r2, r7, r4
 8007d7a:	1bdb      	suble	r3, r3, r7
 8007d7c:	1936      	addle	r6, r6, r4
 8007d7e:	0fcf      	lsrs	r7, r1, #31
 8007d80:	3801      	subs	r0, #1
 8007d82:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007d86:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007d8a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007d8e:	d1f0      	bne.n	8007d72 <__ieee754_sqrt+0xb6>
 8007d90:	4604      	mov	r4, r0
 8007d92:	2720      	movs	r7, #32
 8007d94:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	eb00 0e0c 	add.w	lr, r0, ip
 8007d9e:	db02      	blt.n	8007da6 <__ieee754_sqrt+0xea>
 8007da0:	d113      	bne.n	8007dca <__ieee754_sqrt+0x10e>
 8007da2:	458e      	cmp	lr, r1
 8007da4:	d811      	bhi.n	8007dca <__ieee754_sqrt+0x10e>
 8007da6:	f1be 0f00 	cmp.w	lr, #0
 8007daa:	eb0e 000c 	add.w	r0, lr, ip
 8007dae:	da42      	bge.n	8007e36 <__ieee754_sqrt+0x17a>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	db40      	blt.n	8007e36 <__ieee754_sqrt+0x17a>
 8007db4:	f102 0801 	add.w	r8, r2, #1
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	458e      	cmp	lr, r1
 8007dbc:	bf88      	it	hi
 8007dbe:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8007dc2:	eba1 010e 	sub.w	r1, r1, lr
 8007dc6:	4464      	add	r4, ip
 8007dc8:	4642      	mov	r2, r8
 8007dca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007dce:	3f01      	subs	r7, #1
 8007dd0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007dd4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007dd8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007ddc:	d1dc      	bne.n	8007d98 <__ieee754_sqrt+0xdc>
 8007dde:	4319      	orrs	r1, r3
 8007de0:	d01b      	beq.n	8007e1a <__ieee754_sqrt+0x15e>
 8007de2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007e68 <__ieee754_sqrt+0x1ac>
 8007de6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007e6c <__ieee754_sqrt+0x1b0>
 8007dea:	e9da 0100 	ldrd	r0, r1, [sl]
 8007dee:	e9db 2300 	ldrd	r2, r3, [fp]
 8007df2:	f7f8 fa41 	bl	8000278 <__aeabi_dsub>
 8007df6:	e9da 8900 	ldrd	r8, r9, [sl]
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4640      	mov	r0, r8
 8007e00:	4649      	mov	r1, r9
 8007e02:	f7f8 fe6d 	bl	8000ae0 <__aeabi_dcmple>
 8007e06:	b140      	cbz	r0, 8007e1a <__ieee754_sqrt+0x15e>
 8007e08:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8007e0c:	e9da 0100 	ldrd	r0, r1, [sl]
 8007e10:	e9db 2300 	ldrd	r2, r3, [fp]
 8007e14:	d111      	bne.n	8007e3a <__ieee754_sqrt+0x17e>
 8007e16:	3601      	adds	r6, #1
 8007e18:	463c      	mov	r4, r7
 8007e1a:	1072      	asrs	r2, r6, #1
 8007e1c:	0863      	lsrs	r3, r4, #1
 8007e1e:	07f1      	lsls	r1, r6, #31
 8007e20:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007e24:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007e28:	bf48      	it	mi
 8007e2a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007e2e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007e32:	4618      	mov	r0, r3
 8007e34:	e756      	b.n	8007ce4 <__ieee754_sqrt+0x28>
 8007e36:	4690      	mov	r8, r2
 8007e38:	e7be      	b.n	8007db8 <__ieee754_sqrt+0xfc>
 8007e3a:	f7f8 fa1f 	bl	800027c <__adddf3>
 8007e3e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4640      	mov	r0, r8
 8007e48:	4649      	mov	r1, r9
 8007e4a:	f7f8 fe3f 	bl	8000acc <__aeabi_dcmplt>
 8007e4e:	b120      	cbz	r0, 8007e5a <__ieee754_sqrt+0x19e>
 8007e50:	1ca0      	adds	r0, r4, #2
 8007e52:	bf08      	it	eq
 8007e54:	3601      	addeq	r6, #1
 8007e56:	3402      	adds	r4, #2
 8007e58:	e7df      	b.n	8007e1a <__ieee754_sqrt+0x15e>
 8007e5a:	1c63      	adds	r3, r4, #1
 8007e5c:	f023 0401 	bic.w	r4, r3, #1
 8007e60:	e7db      	b.n	8007e1a <__ieee754_sqrt+0x15e>
 8007e62:	bf00      	nop
 8007e64:	7ff00000 	.word	0x7ff00000
 8007e68:	200000a0 	.word	0x200000a0
 8007e6c:	20000098 	.word	0x20000098

08007e70 <_init>:
 8007e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e72:	bf00      	nop
 8007e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e76:	bc08      	pop	{r3}
 8007e78:	469e      	mov	lr, r3
 8007e7a:	4770      	bx	lr

08007e7c <_fini>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	bf00      	nop
 8007e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e82:	bc08      	pop	{r3}
 8007e84:	469e      	mov	lr, r3
 8007e86:	4770      	bx	lr
