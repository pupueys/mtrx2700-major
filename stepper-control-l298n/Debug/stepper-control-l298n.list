
stepper-control-l298n.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b30  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000cc4  08000cc4  00001cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cd4  08000cd4  00002040  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000cd4  08000cd4  00002040  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000cd4  08000cd4  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cd4  08000cd4  00001cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000cd8  08000cd8  00001cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  08000cdc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002040  2**0
                  CONTENTS
 10 .bss          00000028  20000040  20000040  00002040  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000068  20000068  00002040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ed0  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000093f  00000000  00000000  00003f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fc  00000000  00000000  000049f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000167d4  00000000  00000000  00004af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002ce6  00000000  00000000  0001b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000766e6  00000000  00000000  0001dfae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00094694  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003e0  00000000  00000000  000946d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000091  00000000  00000000  00094ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000040 	.word	0x20000040
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000cac 	.word	0x08000cac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000044 	.word	0x20000044
 80001d0:	08000cac 	.word	0x08000cac

080001d4 <enable_clocks>:
#include "digitalio.h"

void enable_clocks(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN
 80001d8:	4b08      	ldr	r3, [pc, #32]	@ (80001fc <enable_clocks+0x28>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a07      	ldr	r2, [pc, #28]	@ (80001fc <enable_clocks+0x28>)
 80001de:	f443 1378 	orr.w	r3, r3, #4063232	@ 0x3e0000
 80001e2:	6153      	str	r3, [r2, #20]
				| RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIODEN | RCC_AHBENR_GPIOEEN;		//enabling GPIOA and GPIOE clocks

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; 		  // Enable SYSCFG clock
 80001e4:	4b05      	ldr	r3, [pc, #20]	@ (80001fc <enable_clocks+0x28>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a04      	ldr	r2, [pc, #16]	@ (80001fc <enable_clocks+0x28>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6193      	str	r3, [r2, #24]

}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000

08000200 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board(void) {
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0

	// setting up GPIOD for output
	uint16_t *output_registers = ((uint16_t *)&(GPIOD->MODER));
 8000206:	4b11      	ldr	r3, [pc, #68]	@ (800024c <initialise_board+0x4c>)
 8000208:	607b      	str	r3, [r7, #4]
	*output_registers = 0x5555;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000210:	801a      	strh	r2, [r3, #0]

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000212:	4b0f      	ldr	r3, [pc, #60]	@ (8000250 <initialise_board+0x50>)
 8000214:	603b      	str	r3, [r7, #0]
	*led_output_registers = 0x5555;
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	f245 5255 	movw	r2, #21845	@ 0x5555
 800021c:	801a      	strh	r2, [r3, #0]

	// 2. Configure PA1, PA2, PA3 as general-purpose output mode (MODER = 0b01)
	GPIOA->MODER &= ~((0b11 << (1 * 2)) |  // Clear MODER1
 800021e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000228:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 800022c:	6013      	str	r3, [r2, #0]
	                  (0b11 << (2 * 2)) |  // Clear MODER2
	                  (0b11 << (3 * 2)));  // Clear MODER3

	GPIOA->MODER |=  ((0b01 << (1 * 2)) |  // Set MODER1 to 0b01 (output)
 800022e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000238:	f043 0354 	orr.w	r3, r3, #84	@ 0x54
 800023c:	6013      	str	r3, [r2, #0]
	                  (0b01 << (2 * 2)) |  // Set MODER2 to 0b01
	                  (0b01 << (3 * 2)));  // Set MODER3 to 0b01
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	48000c00 	.word	0x48000c00
 8000250:	48001002 	.word	0x48001002

08000254 <check_room_state>:
#include "gantry_logic.h"
#include "motors.h"

void check_room_state(Motor* motor) {
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]

	// checks if the motor is within room 1
	if (motor->position < ROOM1) {
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000262:	f240 3261 	movw	r2, #865	@ 0x361
 8000266:	4293      	cmp	r3, r2
 8000268:	dc19      	bgt.n	800029e <check_room_state+0x4a>

		motor->lower_limit = 0;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2200      	movs	r2, #0
 800026e:	811a      	strh	r2, [r3, #8]
		motor->upper_limit = ROOM1;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f240 3262 	movw	r2, #866	@ 0x362
 8000276:	80da      	strh	r2, [r3, #6]

		// signals to enable game 1
		GPIOC->ODR |= (1 << 1);
 8000278:	4b3a      	ldr	r3, [pc, #232]	@ (8000364 <check_room_state+0x110>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	4a39      	ldr	r2, [pc, #228]	@ (8000364 <check_room_state+0x110>)
 800027e:	f043 0302 	orr.w	r3, r3, #2
 8000282:	6153      	str	r3, [r2, #20]
		GPIOC->ODR &= ~(1 << 2);
 8000284:	4b37      	ldr	r3, [pc, #220]	@ (8000364 <check_room_state+0x110>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a36      	ldr	r2, [pc, #216]	@ (8000364 <check_room_state+0x110>)
 800028a:	f023 0304 	bic.w	r3, r3, #4
 800028e:	6153      	str	r3, [r2, #20]
		GPIOC->ODR &= ~(1 << 3);
 8000290:	4b34      	ldr	r3, [pc, #208]	@ (8000364 <check_room_state+0x110>)
 8000292:	695b      	ldr	r3, [r3, #20]
 8000294:	4a33      	ldr	r2, [pc, #204]	@ (8000364 <check_room_state+0x110>)
 8000296:	f023 0308 	bic.w	r3, r3, #8
 800029a:	6153      	str	r3, [r2, #20]
		GPIOA->ODR &= ~(1 << 2);

	}


}
 800029c:	e05c      	b.n	8000358 <check_room_state+0x104>
	else if (motor->position < ROOM2 && motor->position >= ROOM1) {
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80002a4:	f240 62c3 	movw	r2, #1731	@ 0x6c3
 80002a8:	4293      	cmp	r3, r2
 80002aa:	dc27      	bgt.n	80002fc <check_room_state+0xa8>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80002b2:	f240 3261 	movw	r2, #865	@ 0x361
 80002b6:	4293      	cmp	r3, r2
 80002b8:	dd20      	ble.n	80002fc <check_room_state+0xa8>
		motor->lower_limit = ROOM1;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f240 3262 	movw	r2, #866	@ 0x362
 80002c0:	811a      	strh	r2, [r3, #8]
		motor->upper_limit = ROOM2;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f240 62c4 	movw	r2, #1732	@ 0x6c4
 80002c8:	80da      	strh	r2, [r3, #6]
		GPIOA->ODR |= (1 << 2);
 80002ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002d4:	f043 0304 	orr.w	r3, r3, #4
 80002d8:	6153      	str	r3, [r2, #20]
		GPIOA->ODR &= ~(1 << 1);
 80002da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002e4:	f023 0302 	bic.w	r3, r3, #2
 80002e8:	6153      	str	r3, [r2, #20]
		GPIOA->ODR &= ~(1 << 3);
 80002ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002f4:	f023 0308 	bic.w	r3, r3, #8
 80002f8:	6153      	str	r3, [r2, #20]
}
 80002fa:	e02d      	b.n	8000358 <check_room_state+0x104>
	else if (motor->position < ROOM3 && motor->position >= ROOM2) {
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000302:	f640 2225 	movw	r2, #2597	@ 0xa25
 8000306:	4293      	cmp	r3, r2
 8000308:	dc26      	bgt.n	8000358 <check_room_state+0x104>
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000310:	f240 62c3 	movw	r2, #1731	@ 0x6c3
 8000314:	4293      	cmp	r3, r2
 8000316:	dd1f      	ble.n	8000358 <check_room_state+0x104>
		motor->lower_limit = ROOM2;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f240 62c4 	movw	r2, #1732	@ 0x6c4
 800031e:	811a      	strh	r2, [r3, #8]
		motor->upper_limit = ROOM3;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f640 2226 	movw	r2, #2598	@ 0xa26
 8000326:	80da      	strh	r2, [r3, #6]
		GPIOA->ODR |= (1 << 3);
 8000328:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000332:	f043 0308 	orr.w	r3, r3, #8
 8000336:	6153      	str	r3, [r2, #20]
		GPIOA->ODR &= ~(1 << 1);
 8000338:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000342:	f023 0302 	bic.w	r3, r3, #2
 8000346:	6153      	str	r3, [r2, #20]
		GPIOA->ODR &= ~(1 << 2);
 8000348:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000352:	f023 0304 	bic.w	r3, r3, #4
 8000356:	6153      	str	r3, [r2, #20]
}
 8000358:	bf00      	nop
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	48000800 	.word	0x48000800

08000368 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0


	// initialisation
	enable_clocks();
 800036c:	f7ff ff32 	bl	80001d4 <enable_clocks>
	initialise_board();
 8000370:	f7ff ff46 	bl	8000200 <initialise_board>
	enable_timer2_interrupt();
 8000374:	f000 fbe0 	bl	8000b38 <enable_timer2_interrupt>
	enable_timer3_interrupt();
 8000378:	f000 fbb2 	bl	8000ae0 <enable_timer3_interrupt>
	SerialInitialise(BAUD_115200, &USART1_PORT);
 800037c:	4902      	ldr	r1, [pc, #8]	@ (8000388 <main+0x20>)
 800037e:	2004      	movs	r0, #4
 8000380:	f000 fa1a 	bl	80007b8 <SerialInitialise>


    /* Loop forever */
	for(;;);
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <main+0x1c>
 8000388:	20000018 	.word	0x20000018

0800038c <motor1_enable>:
    {0, 1, 1, 0}, // Step 2
    {0, 1, 0, 1}, // Step 3
    {1, 0, 0, 1}  // Step 4
};

void motor1_enable(uint8_t direction) {
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]

	Motor1.running = true;
 8000396:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <motor1_enable+0x24>)
 8000398:	2201      	movs	r2, #1
 800039a:	701a      	strb	r2, [r3, #0]
	Motor1.direction = direction;
 800039c:	4a04      	ldr	r2, [pc, #16]	@ (80003b0 <motor1_enable+0x24>)
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	7053      	strb	r3, [r2, #1]

}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	20000000 	.word	0x20000000

080003b4 <motor2_enable>:

void motor2_enable(uint8_t direction) {
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]

	Motor2.running = true;
 80003be:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <motor2_enable+0x24>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	701a      	strb	r2, [r3, #0]
	Motor2.direction = direction;
 80003c4:	4a04      	ldr	r2, [pc, #16]	@ (80003d8 <motor2_enable+0x24>)
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	7053      	strb	r3, [r2, #1]

}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	2000000c 	.word	0x2000000c

080003dc <motor1_disable>:

void motor1_disable(void) {
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0

	Motor1.running = false;
 80003e0:	4b07      	ldr	r3, [pc, #28]	@ (8000400 <motor1_disable+0x24>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)&(GPIOD->ODR)) &= ~(0b00011110);  // reset the bits
 80003e6:	4b07      	ldr	r3, [pc, #28]	@ (8000404 <motor1_disable+0x28>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	4a06      	ldr	r2, [pc, #24]	@ (8000404 <motor1_disable+0x28>)
 80003ec:	f023 031e 	bic.w	r3, r3, #30
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	7013      	strb	r3, [r2, #0]

}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	20000000 	.word	0x20000000
 8000404:	48000c14 	.word	0x48000c14

08000408 <motor2_disable>:

void motor2_disable(void) {
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0

	Motor2.running = false;
 800040c:	4b07      	ldr	r3, [pc, #28]	@ (800042c <motor2_disable+0x24>)
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)&(GPIOD->ODR)) &= ~(0b11110000);  // reset the bits
 8000412:	4b07      	ldr	r3, [pc, #28]	@ (8000430 <motor2_disable+0x28>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	4a06      	ldr	r2, [pc, #24]	@ (8000430 <motor2_disable+0x28>)
 8000418:	f003 030f 	and.w	r3, r3, #15
 800041c:	b2db      	uxtb	r3, r3
 800041e:	7013      	strb	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	2000000c 	.word	0x2000000c
 8000430:	48000c14 	.word	0x48000c14

08000434 <set_last_press_time>:

void set_last_press_time(uint32_t time) {
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	last_press_time = time;
 800043c:	4a04      	ldr	r2, [pc, #16]	@ (8000450 <set_last_press_time+0x1c>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6013      	str	r3, [r2, #0]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	2000005c 	.word	0x2000005c

08000454 <motor_logic>:

void motor_logic(void) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
    if (Motor1.running) {
 800045a:	4b85      	ldr	r3, [pc, #532]	@ (8000670 <motor_logic+0x21c>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d07e      	beq.n	8000560 <motor_logic+0x10c>
        // update step index
//    	if (Motor1.direction == FORWARD) {	<---------	UNCOMMENT FOR NO LIMITS
        if ((Motor1.direction == FORWARD) && (Motor1.position < Motor1.upper_limit)) {
 8000462:	4b83      	ldr	r3, [pc, #524]	@ (8000670 <motor_logic+0x21c>)
 8000464:	785b      	ldrb	r3, [r3, #1]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d11e      	bne.n	80004a8 <motor_logic+0x54>
 800046a:	4b81      	ldr	r3, [pc, #516]	@ (8000670 <motor_logic+0x21c>)
 800046c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000470:	4b7f      	ldr	r3, [pc, #508]	@ (8000670 <motor_logic+0x21c>)
 8000472:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000476:	429a      	cmp	r2, r3
 8000478:	da16      	bge.n	80004a8 <motor_logic+0x54>
            Motor1.step_index = (Motor1.step_index + 1) % 4;	// step forward
 800047a:	4b7d      	ldr	r3, [pc, #500]	@ (8000670 <motor_logic+0x21c>)
 800047c:	789b      	ldrb	r3, [r3, #2]
 800047e:	3301      	adds	r3, #1
 8000480:	425a      	negs	r2, r3
 8000482:	f003 0303 	and.w	r3, r3, #3
 8000486:	f002 0203 	and.w	r2, r2, #3
 800048a:	bf58      	it	pl
 800048c:	4253      	negpl	r3, r2
 800048e:	b2da      	uxtb	r2, r3
 8000490:	4b77      	ldr	r3, [pc, #476]	@ (8000670 <motor_logic+0x21c>)
 8000492:	709a      	strb	r2, [r3, #2]
            Motor1.position++;
 8000494:	4b76      	ldr	r3, [pc, #472]	@ (8000670 <motor_logic+0x21c>)
 8000496:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800049a:	b29b      	uxth	r3, r3
 800049c:	3301      	adds	r3, #1
 800049e:	b29b      	uxth	r3, r3
 80004a0:	b21a      	sxth	r2, r3
 80004a2:	4b73      	ldr	r3, [pc, #460]	@ (8000670 <motor_logic+0x21c>)
 80004a4:	809a      	strh	r2, [r3, #4]
 80004a6:	e021      	b.n	80004ec <motor_logic+0x98>
        } else if ((Motor1.direction == BACKWARD) && (Motor1.position > Motor1.lower_limit)) {
 80004a8:	4b71      	ldr	r3, [pc, #452]	@ (8000670 <motor_logic+0x21c>)
 80004aa:	785b      	ldrb	r3, [r3, #1]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d11d      	bne.n	80004ec <motor_logic+0x98>
 80004b0:	4b6f      	ldr	r3, [pc, #444]	@ (8000670 <motor_logic+0x21c>)
 80004b2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80004b6:	4b6e      	ldr	r3, [pc, #440]	@ (8000670 <motor_logic+0x21c>)
 80004b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80004bc:	429a      	cmp	r2, r3
 80004be:	dd15      	ble.n	80004ec <motor_logic+0x98>
            Motor1.step_index = (Motor1.step_index + 3) % 4;	// step backward
 80004c0:	4b6b      	ldr	r3, [pc, #428]	@ (8000670 <motor_logic+0x21c>)
 80004c2:	789b      	ldrb	r3, [r3, #2]
 80004c4:	3303      	adds	r3, #3
 80004c6:	425a      	negs	r2, r3
 80004c8:	f003 0303 	and.w	r3, r3, #3
 80004cc:	f002 0203 	and.w	r2, r2, #3
 80004d0:	bf58      	it	pl
 80004d2:	4253      	negpl	r3, r2
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b66      	ldr	r3, [pc, #408]	@ (8000670 <motor_logic+0x21c>)
 80004d8:	709a      	strb	r2, [r3, #2]
            Motor1.position--;
 80004da:	4b65      	ldr	r3, [pc, #404]	@ (8000670 <motor_logic+0x21c>)
 80004dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	3b01      	subs	r3, #1
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	b21a      	sxth	r2, r3
 80004e8:	4b61      	ldr	r3, [pc, #388]	@ (8000670 <motor_logic+0x21c>)
 80004ea:	809a      	strh	r2, [r3, #4]
        }

        // logic for stepping
        uint8_t *s = full_step_sequence[Motor1.step_index];
 80004ec:	4b60      	ldr	r3, [pc, #384]	@ (8000670 <motor_logic+0x21c>)
 80004ee:	789b      	ldrb	r3, [r3, #2]
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	4a60      	ldr	r2, [pc, #384]	@ (8000674 <motor_logic+0x220>)
 80004f4:	4413      	add	r3, r2
 80004f6:	607b      	str	r3, [r7, #4]
        GPIOD->ODR = (GPIOD->ODR & ~(0xF)) |			// write to PD0–PD3 for output to stepper motor
 80004f8:	4b5f      	ldr	r3, [pc, #380]	@ (8000678 <motor_logic+0x224>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	f023 030f 	bic.w	r3, r3, #15
                     (s[0] << 0) | (s[1] << 1) |
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	7812      	ldrb	r2, [r2, #0]
        GPIOD->ODR = (GPIOD->ODR & ~(0xF)) |			// write to PD0–PD3 for output to stepper motor
 8000504:	431a      	orrs	r2, r3
                     (s[0] << 0) | (s[1] << 1) |
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3301      	adds	r3, #1
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	431a      	orrs	r2, r3
                     (s[2] << 2) | (s[3] << 3);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3302      	adds	r3, #2
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	009b      	lsls	r3, r3, #2
                     (s[0] << 0) | (s[1] << 1) |
 8000518:	431a      	orrs	r2, r3
                     (s[2] << 2) | (s[3] << 3);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3303      	adds	r3, #3
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	00db      	lsls	r3, r3, #3
        GPIOD->ODR = (GPIOD->ODR & ~(0xF)) |			// write to PD0–PD3 for output to stepper motor
 8000522:	4955      	ldr	r1, [pc, #340]	@ (8000678 <motor_logic+0x224>)
                     (s[2] << 2) | (s[3] << 3);
 8000524:	4313      	orrs	r3, r2
        GPIOD->ODR = (GPIOD->ODR & ~(0xF)) |			// write to PD0–PD3 for output to stepper motor
 8000526:	614b      	str	r3, [r1, #20]

        // debug leds
        GPIOE->ODR = (GPIOE->ODR & ~((1 << 8) | (1 << 9) | (1 << 10) | (1 << 11))) |
 8000528:	4b54      	ldr	r3, [pc, #336]	@ (800067c <motor_logic+0x228>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
                     (s[0] << 8) | (s[1] << 9) |
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	021b      	lsls	r3, r3, #8
        GPIOE->ODR = (GPIOE->ODR & ~((1 << 8) | (1 << 9) | (1 << 10) | (1 << 11))) |
 8000536:	431a      	orrs	r2, r3
                     (s[0] << 8) | (s[1] << 9) |
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3301      	adds	r3, #1
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	025b      	lsls	r3, r3, #9
 8000540:	431a      	orrs	r2, r3
                     (s[2] << 10) | (s[3] << 11);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	3302      	adds	r3, #2
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	029b      	lsls	r3, r3, #10
                     (s[0] << 8) | (s[1] << 9) |
 800054a:	431a      	orrs	r2, r3
                     (s[2] << 10) | (s[3] << 11);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3303      	adds	r3, #3
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	02db      	lsls	r3, r3, #11
        GPIOE->ODR = (GPIOE->ODR & ~((1 << 8) | (1 << 9) | (1 << 10) | (1 << 11))) |
 8000554:	4949      	ldr	r1, [pc, #292]	@ (800067c <motor_logic+0x228>)
                     (s[2] << 10) | (s[3] << 11);
 8000556:	4313      	orrs	r3, r2
        GPIOE->ODR = (GPIOE->ODR & ~((1 << 8) | (1 << 9) | (1 << 10) | (1 << 11))) |
 8000558:	614b      	str	r3, [r1, #20]

        check_room_state(&Motor1);
 800055a:	4845      	ldr	r0, [pc, #276]	@ (8000670 <motor_logic+0x21c>)
 800055c:	f7ff fe7a 	bl	8000254 <check_room_state>

    }

    if (Motor2.running) {
 8000560:	4b47      	ldr	r3, [pc, #284]	@ (8000680 <motor_logic+0x22c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d07f      	beq.n	8000668 <motor_logic+0x214>
    	// update step index
//    	if (Motor2.direction == FORWARD) {	<-------- UNCOMMENT FOR NO LIMITS
        if ((Motor2.direction == FORWARD) && (Motor2.position < Motor2.upper_limit)) {
 8000568:	4b45      	ldr	r3, [pc, #276]	@ (8000680 <motor_logic+0x22c>)
 800056a:	785b      	ldrb	r3, [r3, #1]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d11e      	bne.n	80005ae <motor_logic+0x15a>
 8000570:	4b43      	ldr	r3, [pc, #268]	@ (8000680 <motor_logic+0x22c>)
 8000572:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000576:	4b42      	ldr	r3, [pc, #264]	@ (8000680 <motor_logic+0x22c>)
 8000578:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800057c:	429a      	cmp	r2, r3
 800057e:	da16      	bge.n	80005ae <motor_logic+0x15a>
            Motor2.step_index = (Motor2.step_index + 1) % 4;
 8000580:	4b3f      	ldr	r3, [pc, #252]	@ (8000680 <motor_logic+0x22c>)
 8000582:	789b      	ldrb	r3, [r3, #2]
 8000584:	3301      	adds	r3, #1
 8000586:	425a      	negs	r2, r3
 8000588:	f003 0303 	and.w	r3, r3, #3
 800058c:	f002 0203 	and.w	r2, r2, #3
 8000590:	bf58      	it	pl
 8000592:	4253      	negpl	r3, r2
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b3a      	ldr	r3, [pc, #232]	@ (8000680 <motor_logic+0x22c>)
 8000598:	709a      	strb	r2, [r3, #2]
            Motor2.position++;
 800059a:	4b39      	ldr	r3, [pc, #228]	@ (8000680 <motor_logic+0x22c>)
 800059c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	3301      	adds	r3, #1
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b21a      	sxth	r2, r3
 80005a8:	4b35      	ldr	r3, [pc, #212]	@ (8000680 <motor_logic+0x22c>)
 80005aa:	809a      	strh	r2, [r3, #4]
 80005ac:	e021      	b.n	80005f2 <motor_logic+0x19e>
        } else if ((Motor2.direction == BACKWARD) && (Motor2.position > Motor2.lower_limit)){
 80005ae:	4b34      	ldr	r3, [pc, #208]	@ (8000680 <motor_logic+0x22c>)
 80005b0:	785b      	ldrb	r3, [r3, #1]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d11d      	bne.n	80005f2 <motor_logic+0x19e>
 80005b6:	4b32      	ldr	r3, [pc, #200]	@ (8000680 <motor_logic+0x22c>)
 80005b8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80005bc:	4b30      	ldr	r3, [pc, #192]	@ (8000680 <motor_logic+0x22c>)
 80005be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	dd15      	ble.n	80005f2 <motor_logic+0x19e>
            Motor2.step_index = (Motor2.step_index + 3) % 4;
 80005c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000680 <motor_logic+0x22c>)
 80005c8:	789b      	ldrb	r3, [r3, #2]
 80005ca:	3303      	adds	r3, #3
 80005cc:	425a      	negs	r2, r3
 80005ce:	f003 0303 	and.w	r3, r3, #3
 80005d2:	f002 0203 	and.w	r2, r2, #3
 80005d6:	bf58      	it	pl
 80005d8:	4253      	negpl	r3, r2
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b28      	ldr	r3, [pc, #160]	@ (8000680 <motor_logic+0x22c>)
 80005de:	709a      	strb	r2, [r3, #2]
            Motor2.position--;
 80005e0:	4b27      	ldr	r3, [pc, #156]	@ (8000680 <motor_logic+0x22c>)
 80005e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b21a      	sxth	r2, r3
 80005ee:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <motor_logic+0x22c>)
 80005f0:	809a      	strh	r2, [r3, #4]
        }

        // Write IN1–IN4 to PD4–PD7
        uint8_t *s2 = full_step_sequence[Motor2.step_index];
 80005f2:	4b23      	ldr	r3, [pc, #140]	@ (8000680 <motor_logic+0x22c>)
 80005f4:	789b      	ldrb	r3, [r3, #2]
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000674 <motor_logic+0x220>)
 80005fa:	4413      	add	r3, r2
 80005fc:	603b      	str	r3, [r7, #0]
        GPIOD->ODR = (GPIOD->ODR & ~(0xF0)) |
 80005fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <motor_logic+0x224>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
                     (s2[0] << 4) | (s2[1] << 5) |		// write to PD4-PD7 for output to stepper motor
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	011b      	lsls	r3, r3, #4
        GPIOD->ODR = (GPIOD->ODR & ~(0xF0)) |
 800060c:	431a      	orrs	r2, r3
                     (s2[0] << 4) | (s2[1] << 5) |		// write to PD4-PD7 for output to stepper motor
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	015b      	lsls	r3, r3, #5
 8000616:	431a      	orrs	r2, r3
                     (s2[2] << 6) | (s2[3] << 7);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	3302      	adds	r3, #2
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	019b      	lsls	r3, r3, #6
                     (s2[0] << 4) | (s2[1] << 5) |		// write to PD4-PD7 for output to stepper motor
 8000620:	431a      	orrs	r2, r3
                     (s2[2] << 6) | (s2[3] << 7);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	3303      	adds	r3, #3
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	01db      	lsls	r3, r3, #7
        GPIOD->ODR = (GPIOD->ODR & ~(0xF0)) |
 800062a:	4913      	ldr	r1, [pc, #76]	@ (8000678 <motor_logic+0x224>)
                     (s2[2] << 6) | (s2[3] << 7);
 800062c:	4313      	orrs	r3, r2
        GPIOD->ODR = (GPIOD->ODR & ~(0xF0)) |
 800062e:	614b      	str	r3, [r1, #20]

        // debug leds
        GPIOE->ODR = (GPIOE->ODR & ~(0xF << 12)) |
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <motor_logic+0x228>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
                     (s2[0] << 12) | (s2[1] << 13) |
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	031b      	lsls	r3, r3, #12
        GPIOE->ODR = (GPIOE->ODR & ~(0xF << 12)) |
 800063e:	431a      	orrs	r2, r3
                     (s2[0] << 12) | (s2[1] << 13) |
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	035b      	lsls	r3, r3, #13
 8000648:	431a      	orrs	r2, r3
                     (s2[2] << 14) | (s2[3] << 15);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	3302      	adds	r3, #2
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	039b      	lsls	r3, r3, #14
                     (s2[0] << 12) | (s2[1] << 13) |
 8000652:	431a      	orrs	r2, r3
                     (s2[2] << 14) | (s2[3] << 15);
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	3303      	adds	r3, #3
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	03db      	lsls	r3, r3, #15
        GPIOE->ODR = (GPIOE->ODR & ~(0xF << 12)) |
 800065c:	4907      	ldr	r1, [pc, #28]	@ (800067c <motor_logic+0x228>)
                     (s2[2] << 14) | (s2[3] << 15);
 800065e:	4313      	orrs	r3, r2
        GPIOE->ODR = (GPIOE->ODR & ~(0xF << 12)) |
 8000660:	614b      	str	r3, [r1, #20]

        check_room_state(&Motor2);
 8000662:	4807      	ldr	r0, [pc, #28]	@ (8000680 <motor_logic+0x22c>)
 8000664:	f7ff fdf6 	bl	8000254 <check_room_state>

    }
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	08000cc4 	.word	0x08000cc4
 8000678:	48000c00 	.word	0x48000c00
 800067c:	48001000 	.word	0x48001000
 8000680:	2000000c 	.word	0x2000000c

08000684 <motor_idle>:

void motor_idle(uint32_t current_time, uint8_t current_key) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]

    if (Motor1.running) {
 8000690:	4b22      	ldr	r3, [pc, #136]	@ (800071c <motor_idle+0x98>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d01c      	beq.n	80006d2 <motor_idle+0x4e>

    	// idling the motor if the key press occurred 50ms ago
    	// OR
    	// if the last key press was not valid
    	if ((current_time - last_press_time > 50) ||
 8000698:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <motor_idle+0x9c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	2b32      	cmp	r3, #50	@ 0x32
 80006a2:	d811      	bhi.n	80006c8 <motor_idle+0x44>
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b77      	cmp	r3, #119	@ 0x77
 80006a8:	d013      	beq.n	80006d2 <motor_idle+0x4e>
    		(current_key != 'w' && current_key != 's'
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	2b73      	cmp	r3, #115	@ 0x73
 80006ae:	d010      	beq.n	80006d2 <motor_idle+0x4e>
    		&& current_key != 'e' && current_key != 'q' && current_key != 'z' && current_key != 'c')) {
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	2b65      	cmp	r3, #101	@ 0x65
 80006b4:	d00d      	beq.n	80006d2 <motor_idle+0x4e>
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	2b71      	cmp	r3, #113	@ 0x71
 80006ba:	d00a      	beq.n	80006d2 <motor_idle+0x4e>
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	2b7a      	cmp	r3, #122	@ 0x7a
 80006c0:	d007      	beq.n	80006d2 <motor_idle+0x4e>
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	2b63      	cmp	r3, #99	@ 0x63
 80006c6:	d004      	beq.n	80006d2 <motor_idle+0x4e>
    		Motor1.step_index = 4;
 80006c8:	4b14      	ldr	r3, [pc, #80]	@ (800071c <motor_idle+0x98>)
 80006ca:	2204      	movs	r2, #4
 80006cc:	709a      	strb	r2, [r3, #2]
    		motor1_disable();
 80006ce:	f7ff fe85 	bl	80003dc <motor1_disable>
    	}
    }

    if (Motor2.running) {
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <motor_idle+0xa0>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d01c      	beq.n	8000714 <motor_idle+0x90>

    	// idling the motor if the key press occurred 50ms ago
    	// OR
    	// if the last key press was not valid
    	if ((current_time - last_press_time > 50) ||
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <motor_idle+0x9c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	2b32      	cmp	r3, #50	@ 0x32
 80006e4:	d811      	bhi.n	800070a <motor_idle+0x86>
 80006e6:	78fb      	ldrb	r3, [r7, #3]
 80006e8:	2b61      	cmp	r3, #97	@ 0x61
 80006ea:	d013      	beq.n	8000714 <motor_idle+0x90>
    		(current_key != 'a' && current_key != 'd'
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	2b64      	cmp	r3, #100	@ 0x64
 80006f0:	d010      	beq.n	8000714 <motor_idle+0x90>
			&& current_key != 'e' && current_key != 'q' && current_key != 'z' && current_key != 'c')) {
 80006f2:	78fb      	ldrb	r3, [r7, #3]
 80006f4:	2b65      	cmp	r3, #101	@ 0x65
 80006f6:	d00d      	beq.n	8000714 <motor_idle+0x90>
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	2b71      	cmp	r3, #113	@ 0x71
 80006fc:	d00a      	beq.n	8000714 <motor_idle+0x90>
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	2b7a      	cmp	r3, #122	@ 0x7a
 8000702:	d007      	beq.n	8000714 <motor_idle+0x90>
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	2b63      	cmp	r3, #99	@ 0x63
 8000708:	d004      	beq.n	8000714 <motor_idle+0x90>
    		Motor2.step_index = 4;
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <motor_idle+0xa0>)
 800070c:	2204      	movs	r2, #4
 800070e:	709a      	strb	r2, [r3, #2]
    		motor2_disable();
 8000710:	f7ff fe7a 	bl	8000408 <motor2_disable>
    	}
    }

}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000000 	.word	0x20000000
 8000720:	2000005c 	.word	0x2000005c
 8000724:	2000000c 	.word	0x2000000c

08000728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	2b00      	cmp	r3, #0
 8000738:	db0b      	blt.n	8000752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	f003 021f 	and.w	r2, r3, #31
 8000740:	4907      	ldr	r1, [pc, #28]	@ (8000760 <__NVIC_EnableIRQ+0x38>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	095b      	lsrs	r3, r3, #5
 8000748:	2001      	movs	r0, #1
 800074a:	fa00 f202 	lsl.w	r2, r0, r2
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000e100 	.word	0xe000e100

08000764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	db0a      	blt.n	800078e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	490c      	ldr	r1, [pc, #48]	@ (80007b0 <__NVIC_SetPriority+0x4c>)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	0112      	lsls	r2, r2, #4
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	440b      	add	r3, r1
 8000788:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800078c:	e00a      	b.n	80007a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4908      	ldr	r1, [pc, #32]	@ (80007b4 <__NVIC_SetPriority+0x50>)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	f003 030f 	and.w	r3, r3, #15
 800079a:	3b04      	subs	r3, #4
 800079c:	0112      	lsls	r2, r2, #4
 800079e:	b2d2      	uxtb	r2, r2
 80007a0:	440b      	add	r3, r1
 80007a2:	761a      	strb	r2, [r3, #24]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000e100 	.word	0xe000e100
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <SerialInitialise>:
		0x770000,  				// for USART1 PC10 and 11, this is in the AFR low register
		0x00, 					// no change to the high alternate function register
		USART1_IRQn				// IRQn for USART1
};

void SerialInitialise(uint32_t baudRate,SerialPort *serial_port) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80007c2:	4b4a      	ldr	r3, [pc, #296]	@ (80008ec <SerialInitialise+0x134>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a49      	ldr	r2, [pc, #292]	@ (80008ec <SerialInitialise+0x134>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007cc:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80007ce:	4b47      	ldr	r3, [pc, #284]	@ (80008ec <SerialInitialise+0x134>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	4a46      	ldr	r2, [pc, #280]	@ (80008ec <SerialInitialise+0x134>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	691a      	ldr	r2, [r3, #16]
 80007de:	4b43      	ldr	r3, [pc, #268]	@ (80008ec <SerialInitialise+0x134>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4942      	ldr	r1, [pc, #264]	@ (80008ec <SerialInitialise+0x134>)
 80007e4:	4313      	orrs	r3, r2
 80007e6:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	6952      	ldr	r2, [r2, #20]
 80007f0:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	6992      	ldr	r2, [r2, #24]
 80007fa:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	69d9      	ldr	r1, [r3, #28]
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	6a1a      	ldr	r2, [r3, #32]
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	430a      	orrs	r2, r1
 800080c:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	6a19      	ldr	r1, [r3, #32]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	430a      	orrs	r2, r1
 800081e:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	68da      	ldr	r2, [r3, #12]
 8000824:	4b31      	ldr	r3, [pc, #196]	@ (80008ec <SerialInitialise+0x134>)
 8000826:	69db      	ldr	r3, [r3, #28]
 8000828:	4930      	ldr	r1, [pc, #192]	@ (80008ec <SerialInitialise+0x134>)
 800082a:	4313      	orrs	r3, r2
 800082c:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	4b2e      	ldr	r3, [pc, #184]	@ (80008ec <SerialInitialise+0x134>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	492d      	ldr	r1, [pc, #180]	@ (80008ec <SerialInitialise+0x134>)
 8000838:	4313      	orrs	r3, r2
 800083a:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	330c      	adds	r3, #12
 8000842:	60fb      	str	r3, [r7, #12]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b04      	cmp	r3, #4
 8000848:	d822      	bhi.n	8000890 <SerialInitialise+0xd8>
 800084a:	a201      	add	r2, pc, #4	@ (adr r2, 8000850 <SerialInitialise+0x98>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	08000865 	.word	0x08000865
 8000854:	0800086f 	.word	0x0800086f
 8000858:	08000879 	.word	0x08000879
 800085c:	08000881 	.word	0x08000881
 8000860:	08000889 	.word	0x08000889
	case BAUD_9600:
		*baud_rate_config = 0x342;  // 9600 at 8MHz
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f240 3242 	movw	r2, #834	@ 0x342
 800086a:	801a      	strh	r2, [r3, #0]
		break;
 800086c:	e010      	b.n	8000890 <SerialInitialise+0xd8>
	case BAUD_19200:
		*baud_rate_config = 0x19C;  // 19200 at 8MHz
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8000874:	801a      	strh	r2, [r3, #0]
		break;
 8000876:	e00b      	b.n	8000890 <SerialInitialise+0xd8>
	case BAUD_38400:
		*baud_rate_config = 0xD0;  // 38400 at 8MHz
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	22d0      	movs	r2, #208	@ 0xd0
 800087c:	801a      	strh	r2, [r3, #0]
		break;
 800087e:	e007      	b.n	8000890 <SerialInitialise+0xd8>
	case BAUD_57600:
		*baud_rate_config = 0x8B;  // 57600 at 8MHz
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	228b      	movs	r2, #139	@ 0x8b
 8000884:	801a      	strh	r2, [r3, #0]
		break;
 8000886:	e003      	b.n	8000890 <SerialInitialise+0xd8>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2246      	movs	r2, #70	@ 0x46
 800088c:	801a      	strh	r2, [r3, #0]
		break;
 800088e:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f042 020d 	orr.w	r2, r2, #13
 800089e:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop

	__disable_irq(); // disable all interrupts while changing settings

	// enabling the interrupts
	serial_port->UART->CR1 |= USART_CR1_RXNEIE;		// enabling RXNE interrupts
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f042 0220 	orr.w	r2, r2, #32
 80008b2:	601a      	str	r2, [r3, #0]
	serial_port->UART->CR3 |= USART_CR3_EIE;		// enabling the error interrupts
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f042 0201 	orr.w	r2, r2, #1
 80008c2:	609a      	str	r2, [r3, #8]

	// activating interrupts and setting priority
	NVIC_SetPriority(serial_port->UART_IRQn, 1);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008c8:	b25b      	sxtb	r3, r3
 80008ca:	2101      	movs	r1, #1
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff49 	bl	8000764 <__NVIC_SetPriority>
	NVIC_EnableIRQ(serial_port->UART_IRQn);			//  enable UART interrupts
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008d6:	b25b      	sxtb	r3, r3
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff25 	bl	8000728 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80008de:	b662      	cpsie	i
}
 80008e0:	bf00      	nop

	__enable_irq(); // re-enable all interrupts

}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

    USART1->ICR |= USART_ICR_ORECF | USART_ICR_FECF | USART_ICR_NCF | USART_ICR_PECF;
 80008f6:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <USART1_EXTI25_IRQHandler+0x3c>)
 80008f8:	6a1b      	ldr	r3, [r3, #32]
 80008fa:	4a0c      	ldr	r2, [pc, #48]	@ (800092c <USART1_EXTI25_IRQHandler+0x3c>)
 80008fc:	f043 030f 	orr.w	r3, r3, #15
 8000900:	6213      	str	r3, [r2, #32]

    if (USART1->ISR & USART_ISR_RXNE) {
 8000902:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <USART1_EXTI25_IRQHandler+0x3c>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	f003 0320 	and.w	r3, r3, #32
 800090a:	2b00      	cmp	r3, #0
 800090c:	d00a      	beq.n	8000924 <USART1_EXTI25_IRQHandler+0x34>

    	// read the key press
    	uint8_t pressed_key = USART1->RDR;
 800090e:	4b07      	ldr	r3, [pc, #28]	@ (800092c <USART1_EXTI25_IRQHandler+0x3c>)
 8000910:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000912:	b29b      	uxth	r3, r3
 8000914:	71fb      	strb	r3, [r7, #7]
    	last_key = pressed_key;
 8000916:	4a06      	ldr	r2, [pc, #24]	@ (8000930 <USART1_EXTI25_IRQHandler+0x40>)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	7013      	strb	r3, [r2, #0]
        handle_key(pressed_key);
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f808 	bl	8000934 <handle_key>

    }
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40013800 	.word	0x40013800
 8000930:	20000060 	.word	0x20000060

08000934 <handle_key>:

void handle_key(uint8_t pressed_key) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]

	uint32_t current_time = get_time();
 800093e:	f000 f8c3 	bl	8000ac8 <get_time>
 8000942:	60f8      	str	r0, [r7, #12]

	// logic for the key presses
	switch(pressed_key) {
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	3b61      	subs	r3, #97	@ 0x61
 8000948:	2b19      	cmp	r3, #25
 800094a:	d861      	bhi.n	8000a10 <handle_key+0xdc>
 800094c:	a201      	add	r2, pc, #4	@ (adr r2, 8000954 <handle_key+0x20>)
 800094e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000952:	bf00      	nop
 8000954:	080009d5 	.word	0x080009d5
 8000958:	08000a11 	.word	0x08000a11
 800095c:	08000a05 	.word	0x08000a05
 8000960:	080009cd 	.word	0x080009cd
 8000964:	080009dd 	.word	0x080009dd
 8000968:	08000a11 	.word	0x08000a11
 800096c:	08000a11 	.word	0x08000a11
 8000970:	08000a11 	.word	0x08000a11
 8000974:	08000a11 	.word	0x08000a11
 8000978:	08000a11 	.word	0x08000a11
 800097c:	08000a11 	.word	0x08000a11
 8000980:	08000a11 	.word	0x08000a11
 8000984:	08000a11 	.word	0x08000a11
 8000988:	08000a11 	.word	0x08000a11
 800098c:	08000a11 	.word	0x08000a11
 8000990:	08000a11 	.word	0x08000a11
 8000994:	080009eb 	.word	0x080009eb
 8000998:	08000a11 	.word	0x08000a11
 800099c:	080009c5 	.word	0x080009c5
 80009a0:	08000a11 	.word	0x08000a11
 80009a4:	08000a11 	.word	0x08000a11
 80009a8:	08000a11 	.word	0x08000a11
 80009ac:	080009bd 	.word	0x080009bd
 80009b0:	08000a11 	.word	0x08000a11
 80009b4:	08000a11 	.word	0x08000a11
 80009b8:	080009f9 	.word	0x080009f9

		case 'w':

			motor1_enable(FORWARD);
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff fce5 	bl	800038c <motor1_enable>
			break;
 80009c2:	e026      	b.n	8000a12 <handle_key+0xde>

		case 's':

			motor1_enable(BACKWARD);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff fce1 	bl	800038c <motor1_enable>
			break;
 80009ca:	e022      	b.n	8000a12 <handle_key+0xde>

		case 'd':

			motor2_enable(FORWARD);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff fcf1 	bl	80003b4 <motor2_enable>
			break;
 80009d2:	e01e      	b.n	8000a12 <handle_key+0xde>

		case 'a':

			motor2_enable(BACKWARD);
 80009d4:	2000      	movs	r0, #0
 80009d6:	f7ff fced 	bl	80003b4 <motor2_enable>
			break;
 80009da:	e01a      	b.n	8000a12 <handle_key+0xde>

		case 'e':
			motor1_enable(FORWARD);
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff fcd5 	bl	800038c <motor1_enable>
			motor2_enable(FORWARD);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f7ff fce6 	bl	80003b4 <motor2_enable>
			break;
 80009e8:	e013      	b.n	8000a12 <handle_key+0xde>

		case 'q':
			motor1_enable(FORWARD);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f7ff fcce 	bl	800038c <motor1_enable>
			motor2_enable(BACKWARD);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f7ff fcdf 	bl	80003b4 <motor2_enable>
			break;
 80009f6:	e00c      	b.n	8000a12 <handle_key+0xde>

		case 'z':
			motor1_enable(BACKWARD);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff fcc7 	bl	800038c <motor1_enable>
			motor2_enable(BACKWARD);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fcd8 	bl	80003b4 <motor2_enable>

		case 'c':
			motor1_enable(BACKWARD);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff fcc1 	bl	800038c <motor1_enable>
			motor2_enable(FORWARD);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff fcd2 	bl	80003b4 <motor2_enable>

        default:
            // Ignore unrecognized keys
            break;
 8000a10:	bf00      	nop

	}

	// record when a key was last pressed
	set_last_press_time(current_time);
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff fd0e 	bl	8000434 <set_last_press_time>

}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <get_last_key>:

uint8_t get_last_key(void){
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
	return last_key;
 8000a24:	4b03      	ldr	r3, [pc, #12]	@ (8000a34 <get_last_key+0x14>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	20000060 	.word	0x20000060

08000a38 <__NVIC_EnableIRQ>:
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0b      	blt.n	8000a62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	4907      	ldr	r1, [pc, #28]	@ (8000a70 <__NVIC_EnableIRQ+0x38>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <__NVIC_SetPriority>:
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	db0a      	blt.n	8000a9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	490c      	ldr	r1, [pc, #48]	@ (8000ac0 <__NVIC_SetPriority+0x4c>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000a9c:	e00a      	b.n	8000ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4908      	ldr	r1, [pc, #32]	@ (8000ac4 <__NVIC_SetPriority+0x50>)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	761a      	strb	r2, [r3, #24]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <get_time>:
#include "timer.h"

static volatile uint32_t ms_timer = 0;

uint32_t get_time(void){
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
	return ms_timer;
 8000acc:	4b03      	ldr	r3, [pc, #12]	@ (8000adc <get_time+0x14>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000064 	.word	0x20000064

08000ae0 <enable_timer3_interrupt>:

void enable_timer3_interrupt(void) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;           // enable clock for timer 3
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <enable_timer3_interrupt+0x50>)
 8000ae6:	69db      	ldr	r3, [r3, #28]
 8000ae8:	4a11      	ldr	r2, [pc, #68]	@ (8000b30 <enable_timer3_interrupt+0x50>)
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	61d3      	str	r3, [r2, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop

	__disable_irq();
    TIM3->PSC = 333;              		// Timer set to 100Hz
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <enable_timer3_interrupt+0x54>)
 8000af6:	f240 124d 	movw	r2, #333	@ 0x14d
 8000afa:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 20;                     // 1s timer
 8000afc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b34 <enable_timer3_interrupt+0x54>)
 8000afe:	2214      	movs	r2, #20
 8000b00:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM3->DIER |= TIM_DIER_UIE;         // Enable update interrupt
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <enable_timer3_interrupt+0x54>)
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	4a0b      	ldr	r2, [pc, #44]	@ (8000b34 <enable_timer3_interrupt+0x54>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 |= TIM_CR1_CEN;           // Start the timer
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <enable_timer3_interrupt+0x54>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <enable_timer3_interrupt+0x54>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(TIM3_IRQn, 2);     // Set Priority as no 2
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	201d      	movs	r0, #29
 8000b1e:	f7ff ffa9 	bl	8000a74 <__NVIC_SetPriority>

    NVIC_EnableIRQ(TIM3_IRQn);          // Enable Timer 3 interrupt
 8000b22:	201d      	movs	r0, #29
 8000b24:	f7ff ff88 	bl	8000a38 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b28:	b662      	cpsie	i
}
 8000b2a:	bf00      	nop

	// Re-enable all interrupts
	__enable_irq();
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40000400 	.word	0x40000400

08000b38 <enable_timer2_interrupt>:

void enable_timer2_interrupt(void) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;           // enable clock for timer 2
 8000b3c:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <enable_timer2_interrupt+0x5c>)
 8000b3e:	69db      	ldr	r3, [r3, #28]
 8000b40:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <enable_timer2_interrupt+0x5c>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	61d3      	str	r3, [r2, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop

	__disable_irq();
    TIM2->PSC = 7;              		// Timer set to 1MHz
 8000b4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b50:	2207      	movs	r2, #7
 8000b52:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 999;                    // 1ms timer
 8000b54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= TIM_DIER_UIE;         // Enable update interrupt
 8000b5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;           // Start the timer
 8000b6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(TIM2_IRQn, 3);     // Set Priority as no 3
 8000b7e:	2103      	movs	r1, #3
 8000b80:	201c      	movs	r0, #28
 8000b82:	f7ff ff77 	bl	8000a74 <__NVIC_SetPriority>

    NVIC_EnableIRQ(TIM2_IRQn);          // Enable Timer 2 interrupt
 8000b86:	201c      	movs	r0, #28
 8000b88:	f7ff ff56 	bl	8000a38 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b8c:	b662      	cpsie	i
}
 8000b8e:	bf00      	nop

	// Re-enable all interrupts
	__enable_irq();
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000

08000b98 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

    if (TIM3->SR & TIM_SR_UIF) {
 8000b9c:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <TIM3_IRQHandler+0x24>)
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d007      	beq.n	8000bb8 <TIM3_IRQHandler+0x20>
        TIM3->SR &= ~TIM_SR_UIF;	// clear flags
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <TIM3_IRQHandler+0x24>)
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	4a03      	ldr	r2, [pc, #12]	@ (8000bbc <TIM3_IRQHandler+0x24>)
 8000bae:	f023 0301 	bic.w	r3, r3, #1
 8000bb2:	6113      	str	r3, [r2, #16]

        motor_logic();				// run stepper motor logic
 8000bb4:	f7ff fc4e 	bl	8000454 <motor_logic>

    }
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40000400 	.word	0x40000400

08000bc0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0

    if (TIM2->SR & TIM_SR_UIF) {
 8000bc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d017      	beq.n	8000c04 <TIM2_IRQHandler+0x44>
        TIM2->SR &= ~TIM_SR_UIF;	// clear flags
 8000bd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bde:	f023 0301 	bic.w	r3, r3, #1
 8000be2:	6113      	str	r3, [r2, #16]
        ms_timer++;
 8000be4:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <TIM2_IRQHandler+0x4c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	4a08      	ldr	r2, [pc, #32]	@ (8000c0c <TIM2_IRQHandler+0x4c>)
 8000bec:	6013      	str	r3, [r2, #0]

    	uint8_t current_key = get_last_key();	// retrieve last key pressed
 8000bee:	f7ff ff17 	bl	8000a20 <get_last_key>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
        motor_idle(ms_timer, current_key);		// check if motors should be idle
 8000bf6:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <TIM2_IRQHandler+0x4c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	79fa      	ldrb	r2, [r7, #7]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fd40 	bl	8000684 <motor_idle>

    }
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000064 	.word	0x20000064

08000c10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c10:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c12:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c14:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c18:	480c      	ldr	r0, [pc, #48]	@ (8000c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1a:	490d      	ldr	r1, [pc, #52]	@ (8000c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c54 <LoopForever+0xe>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c30:	4c0a      	ldr	r4, [pc, #40]	@ (8000c5c <LoopForever+0x16>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c3e:	f000 f811 	bl	8000c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c42:	f7ff fb91 	bl	8000368 <main>

08000c46 <LoopForever>:

LoopForever:
  b LoopForever
 8000c46:	e7fe      	b.n	8000c46 <LoopForever>
  ldr   r0, =_estack
 8000c48:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000c54:	08000cdc 	.word	0x08000cdc
  ldr r2, =_sbss
 8000c58:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000c5c:	20000068 	.word	0x20000068

08000c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_2_IRQHandler>
	...

08000c64 <__libc_init_array>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	4d0d      	ldr	r5, [pc, #52]	@ (8000c9c <__libc_init_array+0x38>)
 8000c68:	4c0d      	ldr	r4, [pc, #52]	@ (8000ca0 <__libc_init_array+0x3c>)
 8000c6a:	1b64      	subs	r4, r4, r5
 8000c6c:	10a4      	asrs	r4, r4, #2
 8000c6e:	2600      	movs	r6, #0
 8000c70:	42a6      	cmp	r6, r4
 8000c72:	d109      	bne.n	8000c88 <__libc_init_array+0x24>
 8000c74:	4d0b      	ldr	r5, [pc, #44]	@ (8000ca4 <__libc_init_array+0x40>)
 8000c76:	4c0c      	ldr	r4, [pc, #48]	@ (8000ca8 <__libc_init_array+0x44>)
 8000c78:	f000 f818 	bl	8000cac <_init>
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	10a4      	asrs	r4, r4, #2
 8000c80:	2600      	movs	r6, #0
 8000c82:	42a6      	cmp	r6, r4
 8000c84:	d105      	bne.n	8000c92 <__libc_init_array+0x2e>
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c8c:	4798      	blx	r3
 8000c8e:	3601      	adds	r6, #1
 8000c90:	e7ee      	b.n	8000c70 <__libc_init_array+0xc>
 8000c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c96:	4798      	blx	r3
 8000c98:	3601      	adds	r6, #1
 8000c9a:	e7f2      	b.n	8000c82 <__libc_init_array+0x1e>
 8000c9c:	08000cd4 	.word	0x08000cd4
 8000ca0:	08000cd4 	.word	0x08000cd4
 8000ca4:	08000cd4 	.word	0x08000cd4
 8000ca8:	08000cd8 	.word	0x08000cd8

08000cac <_init>:
 8000cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cae:	bf00      	nop
 8000cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cb2:	bc08      	pop	{r3}
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	4770      	bx	lr

08000cb8 <_fini>:
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	bf00      	nop
 8000cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cbe:	bc08      	pop	{r3}
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	4770      	bx	lr
