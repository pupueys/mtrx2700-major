
piano-touch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003248  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080033d0  080033d0  000043d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003420  08003420  0000509c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003420  08003420  0000509c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003420  08003420  0000509c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003420  08003420  00004420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003424  08003424  00004424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08003428  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000509c  2**0
                  CONTENTS
 10 .bss          00000338  2000009c  2000009c  0000509c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003d4  200003d4  0000509c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac41  00000000  00000000  000050cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000208b  00000000  00000000  0000fd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  00011d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005d5  00000000  00000000  00012590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030821  00000000  00000000  00012b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b5aa  00000000  00000000  00043386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aea68  00000000  00000000  0004e930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fd398  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e5c  00000000  00000000  000fd3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  000ff238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080033b8 	.word	0x080033b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	080033b8 	.word	0x080033b8

080001c8 <enable_clocks>:
#include <digitalio.h>


void enable_clocks(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;  // Enable GPIOA and GPIOE clocks
 80001cc:	4b0b      	ldr	r3, [pc, #44]	@ (80001fc <enable_clocks+0x34>)
 80001ce:	695b      	ldr	r3, [r3, #20]
 80001d0:	4a0a      	ldr	r2, [pc, #40]	@ (80001fc <enable_clocks+0x34>)
 80001d2:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80001d6:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;                      // Enable clock for Timer 2
 80001d8:	4b08      	ldr	r3, [pc, #32]	@ (80001fc <enable_clocks+0x34>)
 80001da:	69db      	ldr	r3, [r3, #28]
 80001dc:	4a07      	ldr	r2, [pc, #28]	@ (80001fc <enable_clocks+0x34>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	61d3      	str	r3, [r2, #28]
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;                      // Enable clock for Timer 3
 80001e4:	4b05      	ldr	r3, [pc, #20]	@ (80001fc <enable_clocks+0x34>)
 80001e6:	69db      	ldr	r3, [r3, #28]
 80001e8:	4a04      	ldr	r2, [pc, #16]	@ (80001fc <enable_clocks+0x34>)
 80001ea:	f043 0302 	orr.w	r3, r3, #2
 80001ee:	61d3      	str	r3, [r2, #28]
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000

08000200 <initialise_gpio>:

void initialise_gpio(void) {
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000206:	4b0f      	ldr	r3, [pc, #60]	@ (8000244 <initialise_gpio+0x44>)
 8000208:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000210:	801a      	strh	r2, [r3, #0]

	// configuring MODE8 to be an input signal
	GPIOC->MODER &= ~(0b11 << (8 * 2));  // Clear MODER8[1:0]
 8000212:	4b0d      	ldr	r3, [pc, #52]	@ (8000248 <initialise_gpio+0x48>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a0c      	ldr	r2, [pc, #48]	@ (8000248 <initialise_gpio+0x48>)
 8000218:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800021c:	6013      	str	r3, [r2, #0]

	// configuring MODE9 to be an output signal
	GPIOC->MODER &= ~(0b11 << (9 * 2));
 800021e:	4b0a      	ldr	r3, [pc, #40]	@ (8000248 <initialise_gpio+0x48>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a09      	ldr	r2, [pc, #36]	@ (8000248 <initialise_gpio+0x48>)
 8000224:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000228:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b01 << (9 * 2));
 800022a:	4b07      	ldr	r3, [pc, #28]	@ (8000248 <initialise_gpio+0x48>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a06      	ldr	r2, [pc, #24]	@ (8000248 <initialise_gpio+0x48>)
 8000230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000234:	6013      	str	r3, [r2, #0]
}
 8000236:	bf00      	nop
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	48001002 	.word	0x48001002
 8000248:	48000800 	.word	0x48000800

0800024c <set_leds>:

void set_leds(uint8_t key) {
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]

	GPIOE->ODR |= (1 << (8 + key));   // Turn ON LED corresponding to key
 8000256:	4b08      	ldr	r3, [pc, #32]	@ (8000278 <set_leds+0x2c>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	79fa      	ldrb	r2, [r7, #7]
 800025c:	3208      	adds	r2, #8
 800025e:	2101      	movs	r1, #1
 8000260:	fa01 f202 	lsl.w	r2, r1, r2
 8000264:	4611      	mov	r1, r2
 8000266:	4a04      	ldr	r2, [pc, #16]	@ (8000278 <set_leds+0x2c>)
 8000268:	430b      	orrs	r3, r1
 800026a:	6153      	str	r3, [r2, #20]

}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	48001000 	.word	0x48001000

0800027c <clear_leds>:

void clear_leds(uint8_t key) {
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]

	GPIOE->ODR &= !(1 << (8 + key));  // Turn OFF LED corresponding to key
 8000286:	4b0b      	ldr	r3, [pc, #44]	@ (80002b4 <clear_leds+0x38>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	79fa      	ldrb	r2, [r7, #7]
 800028c:	3208      	adds	r2, #8
 800028e:	2101      	movs	r1, #1
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	2a00      	cmp	r2, #0
 8000296:	bf0c      	ite	eq
 8000298:	2201      	moveq	r2, #1
 800029a:	2200      	movne	r2, #0
 800029c:	b2d2      	uxtb	r2, r2
 800029e:	4611      	mov	r1, r2
 80002a0:	4a04      	ldr	r2, [pc, #16]	@ (80002b4 <clear_leds+0x38>)
 80002a2:	400b      	ands	r3, r1
 80002a4:	6153      	str	r3, [r2, #20]
}
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	48001000 	.word	0x48001000

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4907      	ldr	r1, [pc, #28]	@ (80002f0 <__NVIC_EnableIRQ+0x38>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000e100 	.word	0xe000e100

080002f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	6039      	str	r1, [r7, #0]
 80002fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000304:	2b00      	cmp	r3, #0
 8000306:	db0a      	blt.n	800031e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	b2da      	uxtb	r2, r3
 800030c:	490c      	ldr	r1, [pc, #48]	@ (8000340 <__NVIC_SetPriority+0x4c>)
 800030e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000312:	0112      	lsls	r2, r2, #4
 8000314:	b2d2      	uxtb	r2, r2
 8000316:	440b      	add	r3, r1
 8000318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800031c:	e00a      	b.n	8000334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4908      	ldr	r1, [pc, #32]	@ (8000344 <__NVIC_SetPriority+0x50>)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	f003 030f 	and.w	r3, r3, #15
 800032a:	3b04      	subs	r3, #4
 800032c:	0112      	lsls	r2, r2, #4
 800032e:	b2d2      	uxtb	r2, r2
 8000330:	440b      	add	r3, r1
 8000332:	761a      	strb	r2, [r3, #24]
}
 8000334:	bf00      	nop
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	e000e100 	.word	0xe000e100
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <HAL_TSC_ConvCpltCallback>:
	.key_clear = 0,
	.key_valid = 1		// initially, a key is ready to be read
};


void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef* htsc){
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af02      	add	r7, sp, #8
 800034e:	6078      	str	r0, [r7, #4]

	// discharge the TSC
	HAL_TSC_IODischarge(htsc, ENABLE);
 8000350:	2101      	movs	r1, #1
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f002 ff3f 	bl	80031d6 <HAL_TSC_IODischarge>

	// check the touch sensing channels
	for (int i = 0; i < 5; i++) {
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	e024      	b.n	80003a8 <HAL_TSC_ConvCpltCallback+0x60>
		if (HAL_TSC_GroupGetStatus(htsc, piano.keys[i].group) == TSC_GROUP_COMPLETED) {
 800035e:	4a1a      	ldr	r2, [pc, #104]	@ (80003c8 <HAL_TSC_ConvCpltCallback+0x80>)
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000366:	4619      	mov	r1, r3
 8000368:	6878      	ldr	r0, [r7, #4]
 800036a:	f002 ff00 	bl	800316e <HAL_TSC_GroupGetStatus>
 800036e:	4603      	mov	r3, r0
 8000370:	2b01      	cmp	r3, #1
 8000372:	d116      	bne.n	80003a2 <HAL_TSC_ConvCpltCallback+0x5a>
			uint16_t val = (uint16_t)HAL_TSC_GroupGetValue(htsc, piano.keys[i].group);
 8000374:	4a14      	ldr	r2, [pc, #80]	@ (80003c8 <HAL_TSC_ConvCpltCallback+0x80>)
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800037c:	4619      	mov	r1, r3
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f002 ff17 	bl	80031b2 <HAL_TSC_GroupGetValue>
 8000384:	4603      	mov	r3, r0
 8000386:	817b      	strh	r3, [r7, #10]
			key_press_logic(val, &piano, i, piano.keys[i].threshold, &USART1_PORT); // C
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	b2da      	uxtb	r2, r3
 800038c:	490e      	ldr	r1, [pc, #56]	@ (80003c8 <HAL_TSC_ConvCpltCallback+0x80>)
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	00db      	lsls	r3, r3, #3
 8000392:	440b      	add	r3, r1
 8000394:	889b      	ldrh	r3, [r3, #4]
 8000396:	8978      	ldrh	r0, [r7, #10]
 8000398:	490c      	ldr	r1, [pc, #48]	@ (80003cc <HAL_TSC_ConvCpltCallback+0x84>)
 800039a:	9100      	str	r1, [sp, #0]
 800039c:	490a      	ldr	r1, [pc, #40]	@ (80003c8 <HAL_TSC_ConvCpltCallback+0x80>)
 800039e:	f000 f817 	bl	80003d0 <key_press_logic>
	for (int i = 0; i < 5; i++) {
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	3301      	adds	r3, #1
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	2b04      	cmp	r3, #4
 80003ac:	ddd7      	ble.n	800035e <HAL_TSC_ConvCpltCallback+0x16>
		}
	}

	// error if interrupts not initialised
	if (HAL_TSC_Start_IT(htsc) != HAL_OK) {
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f002 fe80 	bl	80030b4 <HAL_TSC_Start_IT>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <HAL_TSC_ConvCpltCallback+0x76>
		Error_Handler();
 80003ba:	f000 fbd5 	bl	8000b68 <Error_Handler>
	}

}
 80003be:	bf00      	nop
 80003c0:	3710      	adds	r7, #16
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000038 	.word	0x20000038
 80003cc:	20000000 	.word	0x20000000

080003d0 <key_press_logic>:


void key_press_logic(uint16_t sample_value, Steinway *piano, uint8_t key, uint16_t threshold, SerialPort *serial_port) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	4611      	mov	r1, r2
 80003da:	461a      	mov	r2, r3
 80003dc:	4603      	mov	r3, r0
 80003de:	81fb      	strh	r3, [r7, #14]
 80003e0:	460b      	mov	r3, r1
 80003e2:	737b      	strb	r3, [r7, #13]
 80003e4:	4613      	mov	r3, r2
 80003e6:	80fb      	strh	r3, [r7, #6]

	if (sample_value < threshold) {				// checks if the value is under the threshold for "pressed"
 80003e8:	89fa      	ldrh	r2, [r7, #14]
 80003ea:	88fb      	ldrh	r3, [r7, #6]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d259      	bcs.n	80004a4 <key_press_logic+0xd4>
												// if pressed, sample_value is below the threshold

		if (piano->key_valid) {
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d054      	beq.n	80004a4 <key_press_logic+0xd4>
			if (!piano->key_pressed) {				// case when key pressed
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8000400:	2b00      	cmp	r3, #0
 8000402:	d148      	bne.n	8000496 <key_press_logic+0xc6>

			  piano->key_states[key] = 1;
 8000404:	7b7b      	ldrb	r3, [r7, #13]
 8000406:	68ba      	ldr	r2, [r7, #8]
 8000408:	4413      	add	r3, r2
 800040a:	2201      	movs	r2, #1
 800040c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			  piano->key_pressed = 1;
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	2201      	movs	r2, #1
 8000414:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
			  piano->key_clear = 1;
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	2201      	movs	r2, #1
 800041c:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f

			  set_leds(key);
 8000420:	7b7b      	ldrb	r3, [r7, #13]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff12 	bl	800024c <set_leds>
			  enable_timer2_interrupt();
 8000428:	f000 fd56 	bl	8000ed8 <enable_timer2_interrupt>
			  enable_timer3_interrupt();
 800042c:	f000 fd86 	bl	8000f3c <enable_timer3_interrupt>

			  // check which key was pressed
			  switch(key) {
 8000430:	7b7b      	ldrb	r3, [r7, #13]
 8000432:	2b04      	cmp	r3, #4
 8000434:	d836      	bhi.n	80004a4 <key_press_logic+0xd4>
 8000436:	a201      	add	r2, pc, #4	@ (adr r2, 800043c <key_press_logic+0x6c>)
 8000438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800043c:	08000451 	.word	0x08000451
 8000440:	0800045f 	.word	0x0800045f
 8000444:	0800046d 	.word	0x0800046d
 8000448:	0800047b 	.word	0x0800047b
 800044c:	08000489 	.word	0x08000489

			  case CKEY:
				  tx_char(0x43, serial_port, piano, key);	// output 'C'
 8000450:	7b7b      	ldrb	r3, [r7, #13]
 8000452:	68ba      	ldr	r2, [r7, #8]
 8000454:	69b9      	ldr	r1, [r7, #24]
 8000456:	2043      	movs	r0, #67	@ 0x43
 8000458:	f000 f9aa 	bl	80007b0 <tx_char>
				  break;
 800045c:	e022      	b.n	80004a4 <key_press_logic+0xd4>

			  case DKEY:
				  tx_char(0x44, serial_port, piano, key);	// output 'D'
 800045e:	7b7b      	ldrb	r3, [r7, #13]
 8000460:	68ba      	ldr	r2, [r7, #8]
 8000462:	69b9      	ldr	r1, [r7, #24]
 8000464:	2044      	movs	r0, #68	@ 0x44
 8000466:	f000 f9a3 	bl	80007b0 <tx_char>
				  break;
 800046a:	e01b      	b.n	80004a4 <key_press_logic+0xd4>

			  case EKEY:
				  tx_char(0x45, serial_port, piano, key);	// output 'E'
 800046c:	7b7b      	ldrb	r3, [r7, #13]
 800046e:	68ba      	ldr	r2, [r7, #8]
 8000470:	69b9      	ldr	r1, [r7, #24]
 8000472:	2045      	movs	r0, #69	@ 0x45
 8000474:	f000 f99c 	bl	80007b0 <tx_char>
				  break;
 8000478:	e014      	b.n	80004a4 <key_press_logic+0xd4>

			  case FKEY:
				  tx_char(0x46, serial_port, piano, key);	// output 'F'
 800047a:	7b7b      	ldrb	r3, [r7, #13]
 800047c:	68ba      	ldr	r2, [r7, #8]
 800047e:	69b9      	ldr	r1, [r7, #24]
 8000480:	2046      	movs	r0, #70	@ 0x46
 8000482:	f000 f995 	bl	80007b0 <tx_char>
				  break;
 8000486:	e00d      	b.n	80004a4 <key_press_logic+0xd4>

			  case GKEY:
				  tx_char(0x47, serial_port, piano, key);	// output 'G'
 8000488:	7b7b      	ldrb	r3, [r7, #13]
 800048a:	68ba      	ldr	r2, [r7, #8]
 800048c:	69b9      	ldr	r1, [r7, #24]
 800048e:	2047      	movs	r0, #71	@ 0x47
 8000490:	f000 f98e 	bl	80007b0 <tx_char>
				  break;
 8000494:	e006      	b.n	80004a4 <key_press_logic+0xd4>
			  }
			}

		 else {
			 piano->key_states[key] = 0;		// key not pressed
 8000496:	7b7b      	ldrb	r3, [r7, #13]
 8000498:	68ba      	ldr	r2, [r7, #8]
 800049a:	4413      	add	r3, r2
 800049c:	2200      	movs	r2, #0
 800049e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
	}

  }
}
 80004a2:	e7ff      	b.n	80004a4 <key_press_logic+0xd4>
 80004a4:	bf00      	nop
 80004a6:	3710      	adds	r7, #16
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <gameplay_logic>:

void gameplay_logic(Steinway* piano, uint8_t key) {
 80004ac:	b5b0      	push	{r4, r5, r7, lr}
 80004ae:	b08c      	sub	sp, #48	@ 0x30
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	460b      	mov	r3, r1
 80004b6:	70fb      	strb	r3, [r7, #3]

	uint8_t concurrent_keys = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	// the correct sequence of keys (ode to joy)
	uint8_t correct_sequence[MAX_SEQ_COUNT] = {EKEY, EKEY, FKEY, GKEY, GKEY, FKEY, EKEY, DKEY, CKEY, CKEY,
 80004be:	4b44      	ldr	r3, [pc, #272]	@ (80005d0 <gameplay_logic+0x124>)
 80004c0:	f107 0408 	add.w	r4, r7, #8
 80004c4:	461d      	mov	r5, r3
 80004c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80004ce:	c407      	stmia	r4!, {r0, r1, r2}
 80004d0:	8023      	strh	r3, [r4, #0]
								DKEY, EKEY, EKEY, DKEY, DKEY, EKEY, EKEY, FKEY, GKEY, GKEY, FKEY, EKEY, DKEY,
								CKEY, CKEY, DKEY, EKEY, DKEY, CKEY, CKEY};

	// for convenience
	uint8_t j = piano->touch_count;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80004d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (piano->key_valid && piano->key_pressed) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d06f      	beq.n	80005c6 <gameplay_logic+0x11a>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d06a      	beq.n	80005c6 <gameplay_logic+0x11a>

		// flag the key as pressed
		piano->key_states[key] = 1;
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	2201      	movs	r2, #1
 80004f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

		// check how many keys have been pressed
		for (int i = 0; i < KEY_COUNT; i++) {
 80004fc:	2300      	movs	r3, #0
 80004fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000500:	e010      	b.n	8000524 <gameplay_logic+0x78>
			if (piano->key_states[i] == 1) {
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000506:	4413      	add	r3, r2
 8000508:	3328      	adds	r3, #40	@ 0x28
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d105      	bne.n	800051c <gameplay_logic+0x70>
				concurrent_keys++;
 8000510:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000514:	3301      	adds	r3, #1
 8000516:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800051a:	e000      	b.n	800051e <gameplay_logic+0x72>
			} else {
				continue;
 800051c:	bf00      	nop
		for (int i = 0; i < KEY_COUNT; i++) {
 800051e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000520:	3301      	adds	r3, #1
 8000522:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000526:	2b04      	cmp	r3, #4
 8000528:	ddeb      	ble.n	8000502 <gameplay_logic+0x56>
			}
		}

		// if there is more than one key pressed at a time, reset the game
		if (concurrent_keys != 1) {
 800052a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800052e:	2b01      	cmp	r3, #1
 8000530:	d00f      	beq.n	8000552 <gameplay_logic+0xa6>
			memset(piano->key_states, 0, sizeof(piano->key_states));
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3328      	adds	r3, #40	@ 0x28
 8000536:	2205      	movs	r2, #5
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f002 ff10 	bl	8003360 <memset>
			piano->touch_count = 0;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			piano->key_valid = 0;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			return;
 8000550:	e03a      	b.n	80005c8 <gameplay_logic+0x11c>
		}
		// if there is exactly one key pressed
		else if (concurrent_keys == 1) {
 8000552:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000556:	2b01      	cmp	r3, #1
 8000558:	d126      	bne.n	80005a8 <gameplay_logic+0xfc>

			piano->sequence[j] = key;
 800055a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	78fa      	ldrb	r2, [r7, #3]
 8000564:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

			// increase count if the pressed key is correct
			if (piano->sequence[j] == correct_sequence[j]){
 8000568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	4413      	add	r3, r2
 8000570:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8000574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000578:	3330      	adds	r3, #48	@ 0x30
 800057a:	443b      	add	r3, r7
 800057c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000580:	429a      	cmp	r2, r3
 8000582:	d108      	bne.n	8000596 <gameplay_logic+0xea>
				piano->touch_count++;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 800058a:	3301      	adds	r3, #1
 800058c:	b29a      	uxth	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8000594:	e008      	b.n	80005a8 <gameplay_logic+0xfc>

			}
			// if wrong key, reset
			else {
				piano->touch_count = 0;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
				piano->key_valid = 0;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2200      	movs	r2, #0
 80005a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				return;
 80005a6:	e00f      	b.n	80005c8 <gameplay_logic+0x11c>
			}
		}

		// if the song is played correctly, game is complete!
		if (piano->touch_count == MAX_SEQ_COUNT) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80005ae:	2b1e      	cmp	r3, #30
 80005b0:	d105      	bne.n	80005be <gameplay_logic+0x112>
			piano->touch_count = 0;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			completion_function();
 80005ba:	f000 f925 	bl	8000808 <completion_function>
		}

		piano->key_valid = 0;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}

	return;
 80005c6:	bf00      	nop
}
 80005c8:	3730      	adds	r7, #48	@ 0x30
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bdb0      	pop	{r4, r5, r7, pc}
 80005ce:	bf00      	nop
 80005d0:	080033d0 	.word	0x080033d0

080005d4 <SerialInitialise>:

// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80005de:	4b47      	ldr	r3, [pc, #284]	@ (80006fc <SerialInitialise+0x128>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a46      	ldr	r2, [pc, #280]	@ (80006fc <SerialInitialise+0x128>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e8:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80005ea:	4b44      	ldr	r3, [pc, #272]	@ (80006fc <SerialInitialise+0x128>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a43      	ldr	r2, [pc, #268]	@ (80006fc <SerialInitialise+0x128>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	691a      	ldr	r2, [r3, #16]
 80005fa:	4b40      	ldr	r3, [pc, #256]	@ (80006fc <SerialInitialise+0x128>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	493f      	ldr	r1, [pc, #252]	@ (80006fc <SerialInitialise+0x128>)
 8000600:	4313      	orrs	r3, r2
 8000602:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	6952      	ldr	r2, [r2, #20]
 800060c:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	6992      	ldr	r2, [r2, #24]
 8000616:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	69d9      	ldr	r1, [r3, #28]
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	6a1a      	ldr	r2, [r3, #32]
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	430a      	orrs	r2, r1
 8000628:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	6a19      	ldr	r1, [r3, #32]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	430a      	orrs	r2, r1
 800063a:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	68da      	ldr	r2, [r3, #12]
 8000640:	4b2e      	ldr	r3, [pc, #184]	@ (80006fc <SerialInitialise+0x128>)
 8000642:	69db      	ldr	r3, [r3, #28]
 8000644:	492d      	ldr	r1, [pc, #180]	@ (80006fc <SerialInitialise+0x128>)
 8000646:	4313      	orrs	r3, r2
 8000648:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	689a      	ldr	r2, [r3, #8]
 800064e:	4b2b      	ldr	r3, [pc, #172]	@ (80006fc <SerialInitialise+0x128>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	492a      	ldr	r1, [pc, #168]	@ (80006fc <SerialInitialise+0x128>)
 8000654:	4313      	orrs	r3, r2
 8000656:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	330c      	adds	r3, #12
 800065e:	60fb      	str	r3, [r7, #12]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b04      	cmp	r3, #4
 8000664:	d825      	bhi.n	80006b2 <SerialInitialise+0xde>
 8000666:	a201      	add	r2, pc, #4	@ (adr r2, 800066c <SerialInitialise+0x98>)
 8000668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066c:	08000681 	.word	0x08000681
 8000670:	0800068b 	.word	0x0800068b
 8000674:	08000695 	.word	0x08000695
 8000678:	0800069f 	.word	0x0800069f
 800067c:	080006a9 	.word	0x080006a9
	case BAUD_9600:
		*baud_rate_config = 0x1388;  // 9600 at 8MHz
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000686:	801a      	strh	r2, [r3, #0]
		break;
 8000688:	e013      	b.n	80006b2 <SerialInitialise+0xde>
	case BAUD_19200:
		*baud_rate_config = 0x9C4;  // 19200 at 8MHz
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000690:	801a      	strh	r2, [r3, #0]
		break;
 8000692:	e00e      	b.n	80006b2 <SerialInitialise+0xde>
	case BAUD_38400:
		*baud_rate_config = 0x4E2;  // 38400 at 8MHz
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800069a:	801a      	strh	r2, [r3, #0]
		break;
 800069c:	e009      	b.n	80006b2 <SerialInitialise+0xde>
	case BAUD_57600:
		*baud_rate_config = 0x342;  // 57600 at 8MHz
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f240 3242 	movw	r2, #834	@ 0x342
 80006a4:	801a      	strh	r2, [r3, #0]
		break;
 80006a6:	e004      	b.n	80006b2 <SerialInitialise+0xde>
	case BAUD_115200:
		*baud_rate_config = 0x1A1;  // 115200 at 8MHz
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80006ae:	801a      	strh	r2, [r3, #0]
		break;
 80006b0:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f042 020d 	orr.w	r2, r2, #13
 80006c0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c2:	b672      	cpsid	i
}
 80006c4:	bf00      	nop

	__disable_irq(); // disable all interrupts while changing settings

	// enabling the interrupts
	serial_port->UART->CR3 |= USART_CR3_EIE;		// enabling the error interrupts
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	689a      	ldr	r2, [r3, #8]
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f042 0201 	orr.w	r2, r2, #1
 80006d4:	609a      	str	r2, [r3, #8]

	// activating interrupts and setting priority
	NVIC_SetPriority(serial_port->UART_IRQn, 2);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	2102      	movs	r1, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fe08 	bl	80002f4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(serial_port->UART_IRQn);			//  enable UART interrupts
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fde4 	bl	80002b8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80006f0:	b662      	cpsie	i
}
 80006f2:	bf00      	nop

	__enable_irq(); // re-enable all interrupts

}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40021000 	.word	0x40021000

08000700 <USART1_IRQHandler>:

// USART1 interrupt handler
void USART1_IRQHandler(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
    // TXE: Ready to transmit a byte
    if ((USART1->ISR & USART_ISR_TXE) && (USART1->CR1 & USART_CR1_TXEIE)) {
 8000704:	4b28      	ldr	r3, [pc, #160]	@ (80007a8 <USART1_IRQHandler+0xa8>)
 8000706:	69db      	ldr	r3, [r3, #28]
 8000708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070c:	2b00      	cmp	r3, #0
 800070e:	d017      	beq.n	8000740 <USART1_IRQHandler+0x40>
 8000710:	4b25      	ldr	r3, [pc, #148]	@ (80007a8 <USART1_IRQHandler+0xa8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000718:	2b00      	cmp	r3, #0
 800071a:	d011      	beq.n	8000740 <USART1_IRQHandler+0x40>
        USART1->TDR = USART1_PORT.TxChar;
 800071c:	4b23      	ldr	r3, [pc, #140]	@ (80007ac <USART1_IRQHandler+0xac>)
 800071e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b20      	ldr	r3, [pc, #128]	@ (80007a8 <USART1_IRQHandler+0xa8>)
 8000726:	851a      	strh	r2, [r3, #40]	@ 0x28

    	// Disable TXE interrupt, enable TC to detect completion
        USART1->CR1 &= ~USART_CR1_TXEIE;
 8000728:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <USART1_IRQHandler+0xa8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1e      	ldr	r2, [pc, #120]	@ (80007a8 <USART1_IRQHandler+0xa8>)
 800072e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000732:	6013      	str	r3, [r2, #0]
        USART1->CR1 |= USART_CR1_TCIE;
 8000734:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <USART1_IRQHandler+0xa8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a1b      	ldr	r2, [pc, #108]	@ (80007a8 <USART1_IRQHandler+0xa8>)
 800073a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800073e:	6013      	str	r3, [r2, #0]
    }

    // TC: Transmission complete
    if ((USART1->ISR & USART_ISR_TC) && (USART1->CR1 & USART_CR1_TCIE)) {
 8000740:	4b19      	ldr	r3, [pc, #100]	@ (80007a8 <USART1_IRQHandler+0xa8>)
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000748:	2b00      	cmp	r3, #0
 800074a:	d02b      	beq.n	80007a4 <USART1_IRQHandler+0xa4>
 800074c:	4b16      	ldr	r3, [pc, #88]	@ (80007a8 <USART1_IRQHandler+0xa8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000754:	2b00      	cmp	r3, #0
 8000756:	d025      	beq.n	80007a4 <USART1_IRQHandler+0xa4>
        USART1->ICR = USART_ICR_TCCF;  // Clear TC flag
 8000758:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <USART1_IRQHandler+0xa8>)
 800075a:	2240      	movs	r2, #64	@ 0x40
 800075c:	621a      	str	r2, [r3, #32]
        USART1->CR1 &= ~USART_CR1_TCIE;		// Disable TC interrupt
 800075e:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <USART1_IRQHandler+0xa8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a11      	ldr	r2, [pc, #68]	@ (80007a8 <USART1_IRQHandler+0xa8>)
 8000764:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000768:	6013      	str	r3, [r2, #0]

        if (USART1_PORT.TransmissionState) {
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <USART1_IRQHandler+0xac>)
 800076c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d016      	beq.n	80007a4 <USART1_IRQHandler+0xa4>
            USART1_PORT.TransmissionState = 0;
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <USART1_IRQHandler+0xac>)
 8000778:	2200      	movs	r2, #0
 800077a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            if (USART1_PORT.Piano && USART1_PORT.Piano->key_valid) {
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <USART1_IRQHandler+0xac>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	2b00      	cmp	r3, #0
 8000784:	d00e      	beq.n	80007a4 <USART1_IRQHandler+0xa4>
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <USART1_IRQHandler+0xac>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800078e:	2b00      	cmp	r3, #0
 8000790:	d008      	beq.n	80007a4 <USART1_IRQHandler+0xa4>
                gameplay_logic(USART1_PORT.Piano, USART1_PORT.Key);
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <USART1_IRQHandler+0xac>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a05      	ldr	r2, [pc, #20]	@ (80007ac <USART1_IRQHandler+0xac>)
 8000798:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fe84 	bl	80004ac <gameplay_logic>
            }
        }
    }
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40013800 	.word	0x40013800
 80007ac:	20000000 	.word	0x20000000

080007b0 <tx_char>:

// Transmitting a single character
void tx_char(uint8_t character, SerialPort *serial_port, Steinway* piano, uint8_t key) {
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	461a      	mov	r2, r3
 80007bc:	4603      	mov	r3, r0
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	4613      	mov	r3, r2
 80007c2:	73bb      	strb	r3, [r7, #14]
    serial_port->TxChar = character;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	7bfa      	ldrb	r2, [r7, #15]
 80007c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    serial_port->Piano = piano;
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	631a      	str	r2, [r3, #48]	@ 0x30
    serial_port->Key = key;
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	7bba      	ldrb	r2, [r7, #14]
 80007d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    serial_port->TransmissionState = 1;
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	2201      	movs	r2, #1
 80007de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80007e2:	b672      	cpsid	i
}
 80007e4:	bf00      	nop

    __disable_irq();

    // Enable TXE interrupt (start writing when TDR is empty)
    serial_port->UART->CR1 |= USART_CR1_TXEIE;
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80007f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80007f6:	b662      	cpsie	i
}
 80007f8:	bf00      	nop

    __enable_irq();
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <completion_function>:


// when the game is complete, send completed game state to main board
void completion_function(void) {
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

	GPIOC->ODR |= (1 << 9);
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <completion_function+0x1c>)
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	4a04      	ldr	r2, [pc, #16]	@ (8000824 <completion_function+0x1c>)
 8000812:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000816:	6153      	str	r3, [r2, #20]

	return;
 8000818:	bf00      	nop
}
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	48000800 	.word	0x48000800

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082c:	f000 fc2c 	bl	8001088 <HAL_Init>

  /* USER CODE BEGIN Init */
  SerialInitialise(BAUD_115200, &USART1_PORT);
 8000830:	4916      	ldr	r1, [pc, #88]	@ (800088c <main+0x64>)
 8000832:	2004      	movs	r0, #4
 8000834:	f7ff fece 	bl	80005d4 <SerialInitialise>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000838:	f000 f82e 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083c:	f000 f8f0 	bl	8000a20 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000840:	f000 f8cc 	bl	80009dc <MX_USB_PCD_Init>
  MX_TSC_Init();
 8000844:	f000 f884 	bl	8000950 <MX_TSC_Init>
  /* USER CODE BEGIN 2 */
  initialise_gpio();
 8000848:	f7ff fcda 	bl	8000200 <initialise_gpio>
  enable_clocks();
 800084c:	f7ff fcbc 	bl	80001c8 <enable_clocks>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TSC_IODischarge(&htsc, ENABLE);
 8000850:	2101      	movs	r1, #1
 8000852:	480f      	ldr	r0, [pc, #60]	@ (8000890 <main+0x68>)
 8000854:	f002 fcbf 	bl	80031d6 <HAL_TSC_IODischarge>
  HAL_Delay(2);
 8000858:	2002      	movs	r0, #2
 800085a:	f000 fc7b 	bl	8001154 <HAL_Delay>

	if (HAL_TSC_Start_IT(&htsc) != HAL_OK) {
 800085e:	480c      	ldr	r0, [pc, #48]	@ (8000890 <main+0x68>)
 8000860:	f002 fc28 	bl	80030b4 <HAL_TSC_Start_IT>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <main+0x46>
		Error_Handler();
 800086a:	f000 f97d 	bl	8000b68 <Error_Handler>
	}

  while (1)
  {

		if (mutex == UNLOCKED) {
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <main+0x6c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d105      	bne.n	8000882 <main+0x5a>
			mutex = LOCKED;
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <main+0x6c>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]

			mutex = UNLOCKED;
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <main+0x6c>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
		}



	  HAL_Delay(2);
 8000882:	2002      	movs	r0, #2
 8000884:	f000 fc66 	bl	8001154 <HAL_Delay>
		if (mutex == UNLOCKED) {
 8000888:	e7f1      	b.n	800086e <main+0x46>
 800088a:	bf00      	nop
 800088c:	20000000 	.word	0x20000000
 8000890:	200000b8 	.word	0x200000b8
 8000894:	2000008c 	.word	0x2000008c

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b09e      	sub	sp, #120	@ 0x78
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80008a2:	2228      	movs	r2, #40	@ 0x28
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 fd5a 	bl	8003360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	223c      	movs	r2, #60	@ 0x3c
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 fd4c 	bl	8003360 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c8:	2301      	movs	r3, #1
 80008ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008cc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008d0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d6:	2301      	movs	r3, #1
 80008d8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80008e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80008e8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 ffe2 	bl	80018b8 <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008fa:	f000 f935 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2302      	movs	r3, #2
 8000904:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000914:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000918:	2101      	movs	r1, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f001 ffda 	bl	80028d4 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000926:	f000 f91f 	bl	8000b68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800092a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800092e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000930:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000934:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000936:	463b      	mov	r3, r7
 8000938:	4618      	mov	r0, r3
 800093a:	f002 f98d 	bl	8002c58 <HAL_RCCEx_PeriphCLKConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000944:	f000 f910 	bl	8000b68 <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3778      	adds	r7, #120	@ 0x78
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000954:	4b1d      	ldr	r3, [pc, #116]	@ (80009cc <MX_TSC_Init+0x7c>)
 8000956:	4a1e      	ldr	r2, [pc, #120]	@ (80009d0 <MX_TSC_Init+0x80>)
 8000958:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 800095a:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <MX_TSC_Init+0x7c>)
 800095c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000960:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8000962:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <MX_TSC_Init+0x7c>)
 8000964:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000968:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 800096a:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <MX_TSC_Init+0x7c>)
 800096c:	2200      	movs	r2, #0
 800096e:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000970:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <MX_TSC_Init+0x7c>)
 8000972:	2201      	movs	r2, #1
 8000974:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <MX_TSC_Init+0x7c>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 800097c:	4b13      	ldr	r3, [pc, #76]	@ (80009cc <MX_TSC_Init+0x7c>)
 800097e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000982:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_TSC_Init+0x7c>)
 8000986:	22a0      	movs	r2, #160	@ 0xa0
 8000988:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <MX_TSC_Init+0x7c>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000990:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_TSC_Init+0x7c>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	@ 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000996:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <MX_TSC_Init+0x7c>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	@ 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 800099c:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_TSC_Init+0x7c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP1_IO4|TSC_GROUP3_IO3|TSC_GROUP3_IO4
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_TSC_Init+0x7c>)
 80009a6:	4a0b      	ldr	r2, [pc, #44]	@ (80009d4 <MX_TSC_Init+0x84>)
 80009a8:	631a      	str	r2, [r3, #48]	@ 0x30
                    |TSC_GROUP5_IO2|TSC_GROUP5_IO4|TSC_GROUP6_IO3|TSC_GROUP6_IO4
                    |TSC_GROUP8_IO3|TSC_GROUP8_IO4;
  htsc.Init.ShieldIOs = 0;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <MX_TSC_Init+0x7c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	635a      	str	r2, [r3, #52]	@ 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO2|TSC_GROUP3_IO2|TSC_GROUP5_IO3|TSC_GROUP6_IO2
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_TSC_Init+0x7c>)
 80009b2:	4a09      	ldr	r2, [pc, #36]	@ (80009d8 <MX_TSC_Init+0x88>)
 80009b4:	639a      	str	r2, [r3, #56]	@ 0x38
                    |TSC_GROUP8_IO2;
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_TSC_Init+0x7c>)
 80009b8:	f002 fafc 	bl	8002fb4 <HAL_TSC_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TSC_Init+0x76>
  {
    Error_Handler();
 80009c2:	f000 f8d1 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000b8 	.word	0x200000b8
 80009d0:	40024000 	.word	0x40024000
 80009d4:	c0ca0c0c 	.word	0xc0ca0c0c
 80009d8:	20240202 	.word	0x20240202

080009dc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80009e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <MX_USB_PCD_Init+0x3c>)
 80009e2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a1c <MX_USB_PCD_Init+0x40>)
 80009e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80009e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <MX_USB_PCD_Init+0x3c>)
 80009e8:	2208      	movs	r2, #8
 80009ea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <MX_USB_PCD_Init+0x3c>)
 80009ee:	2202      	movs	r2, #2
 80009f0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009f2:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <MX_USB_PCD_Init+0x3c>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009f8:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <MX_USB_PCD_Init+0x3c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <MX_USB_PCD_Init+0x3c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a04:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <MX_USB_PCD_Init+0x3c>)
 8000a06:	f000 fe90 	bl	800172a <HAL_PCD_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000a10:	f000 f8aa 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000fc 	.word	0x200000fc
 8000a1c:	40005c00 	.word	0x40005c00

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08c      	sub	sp, #48	@ 0x30
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a36:	4b4a      	ldr	r3, [pc, #296]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	4a49      	ldr	r2, [pc, #292]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000a3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a40:	6153      	str	r3, [r2, #20]
 8000a42:	4b47      	ldr	r3, [pc, #284]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a4a:	61bb      	str	r3, [r7, #24]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	4b44      	ldr	r3, [pc, #272]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	4a43      	ldr	r2, [pc, #268]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000a54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a58:	6153      	str	r3, [r2, #20]
 8000a5a:	4b41      	ldr	r3, [pc, #260]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a66:	4b3e      	ldr	r3, [pc, #248]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000a6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a70:	6153      	str	r3, [r2, #20]
 8000a72:	4b3b      	ldr	r3, [pc, #236]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b38      	ldr	r3, [pc, #224]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	4a37      	ldr	r2, [pc, #220]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a88:	6153      	str	r3, [r2, #20]
 8000a8a:	4b35      	ldr	r3, [pc, #212]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	4b32      	ldr	r3, [pc, #200]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a31      	ldr	r2, [pc, #196]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000a9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000aa0:	6153      	str	r3, [r2, #20]
 8000aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4b2c      	ldr	r3, [pc, #176]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	4a2b      	ldr	r2, [pc, #172]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000ab4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ab8:	6153      	str	r3, [r2, #20]
 8000aba:	4b29      	ldr	r3, [pc, #164]	@ (8000b60 <MX_GPIO_Init+0x140>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000acc:	4825      	ldr	r0, [pc, #148]	@ (8000b64 <MX_GPIO_Init+0x144>)
 8000ace:	f000 fdf1 	bl	80016b4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000ad2:	2337      	movs	r3, #55	@ 0x37
 8000ad4:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ad6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	481f      	ldr	r0, [pc, #124]	@ (8000b64 <MX_GPIO_Init+0x144>)
 8000ae8:	f000 fc6a 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000aec:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000af0:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4817      	ldr	r0, [pc, #92]	@ (8000b64 <MX_GPIO_Init+0x144>)
 8000b06:	f000 fc5b 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b20:	f000 fc4e 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b24:	23e0      	movs	r3, #224	@ 0xe0
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b34:	2305      	movs	r3, #5
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b42:	f000 fc3d 	bl	80013c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2008      	movs	r0, #8
 8000b4c:	f000 fc01 	bl	8001352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000b50:	2008      	movs	r0, #8
 8000b52:	f000 fc1a 	bl	800138a <HAL_NVIC_EnableIRQ>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b56:	bf00      	nop
 8000b58:	3730      	adds	r7, #48	@ 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000
 8000b64:	48001000 	.word	0x48001000

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <Error_Handler+0x8>

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6193      	str	r3, [r2, #24]
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9c:	61d3      	str	r3, [r2, #28]
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000baa:	2007      	movs	r0, #7
 8000bac:	f000 fbc6 	bl	800133c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_TSC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htsc: TSC handle pointer
  * @retval None
  */
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	@ 0x30
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(htsc->Instance==TSC)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a4e      	ldr	r2, [pc, #312]	@ (8000d14 <HAL_TSC_MspInit+0x158>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	f040 8096 	bne.w	8000d0c <HAL_TSC_MspInit+0x150>
  {
    /* USER CODE BEGIN TSC_MspInit 0 */

    /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000be0:	4b4d      	ldr	r3, [pc, #308]	@ (8000d18 <HAL_TSC_MspInit+0x15c>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	4a4c      	ldr	r2, [pc, #304]	@ (8000d18 <HAL_TSC_MspInit+0x15c>)
 8000be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bea:	6153      	str	r3, [r2, #20]
 8000bec:	4b4a      	ldr	r3, [pc, #296]	@ (8000d18 <HAL_TSC_MspInit+0x15c>)
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b47      	ldr	r3, [pc, #284]	@ (8000d18 <HAL_TSC_MspInit+0x15c>)
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	4a46      	ldr	r2, [pc, #280]	@ (8000d18 <HAL_TSC_MspInit+0x15c>)
 8000bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c02:	6153      	str	r3, [r2, #20]
 8000c04:	4b44      	ldr	r3, [pc, #272]	@ (8000d18 <HAL_TSC_MspInit+0x15c>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	4b41      	ldr	r3, [pc, #260]	@ (8000d18 <HAL_TSC_MspInit+0x15c>)
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	4a40      	ldr	r2, [pc, #256]	@ (8000d18 <HAL_TSC_MspInit+0x15c>)
 8000c16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c1a:	6153      	str	r3, [r2, #20]
 8000c1c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d18 <HAL_TSC_MspInit+0x15c>)
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c28:	4b3b      	ldr	r3, [pc, #236]	@ (8000d18 <HAL_TSC_MspInit+0x15c>)
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	4a3a      	ldr	r2, [pc, #232]	@ (8000d18 <HAL_TSC_MspInit+0x15c>)
 8000c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c32:	6153      	str	r3, [r2, #20]
 8000c34:	4b38      	ldr	r3, [pc, #224]	@ (8000d18 <HAL_TSC_MspInit+0x15c>)
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    PD15     ------> TSC_G8_IO4
    PB4     ------> TSC_G5_IO2
    PB6     ------> TSC_G5_IO3
    PB7     ------> TSC_G5_IO4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c44:	2312      	movs	r3, #18
 8000c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c50:	2303      	movs	r3, #3
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5e:	f000 fbaf 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c62:	230c      	movs	r3, #12
 8000c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c72:	2303      	movs	r3, #3
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c80:	f000 fb9e 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_6;
 8000c84:	f241 0341 	movw	r3, #4161	@ 0x1041
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8a:	2312      	movs	r3, #18
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c96:	2303      	movs	r3, #3
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	481e      	ldr	r0, [pc, #120]	@ (8000d1c <HAL_TSC_MspInit+0x160>)
 8000ca2:	f000 fb8d 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14
 8000ca6:	f246 0396 	movw	r3, #24726	@ 0x6096
 8000caa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4816      	ldr	r0, [pc, #88]	@ (8000d1c <HAL_TSC_MspInit+0x160>)
 8000cc4:	f000 fb7c 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cce:	2312      	movs	r3, #18
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480e      	ldr	r0, [pc, #56]	@ (8000d20 <HAL_TSC_MspInit+0x164>)
 8000ce6:	f000 fb6b 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000cea:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	@ (8000d20 <HAL_TSC_MspInit+0x164>)
 8000d08:	f000 fb5a 	bl	80013c0 <HAL_GPIO_Init>

    /* USER CODE END TSC_MspInit 1 */

  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3730      	adds	r7, #48	@ 0x30
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40024000 	.word	0x40024000
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	48000400 	.word	0x48000400
 8000d20:	48000c00 	.word	0x48000c00

08000d24 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a18      	ldr	r2, [pc, #96]	@ (8000da4 <HAL_PCD_MspInit+0x80>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d129      	bne.n	8000d9a <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <HAL_PCD_MspInit+0x84>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	4a17      	ldr	r2, [pc, #92]	@ (8000da8 <HAL_PCD_MspInit+0x84>)
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d50:	6153      	str	r3, [r2, #20]
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <HAL_PCD_MspInit+0x84>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000d5e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000d70:	230e      	movs	r3, #14
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d7e:	f000 fb1f 	bl	80013c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000d82:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <HAL_PCD_MspInit+0x84>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	4a08      	ldr	r2, [pc, #32]	@ (8000da8 <HAL_PCD_MspInit+0x84>)
 8000d88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d8c:	61d3      	str	r3, [r2, #28]
 8000d8e:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <HAL_PCD_MspInit+0x84>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	@ 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40005c00 	.word	0x40005c00
 8000da8:	40021000 	.word	0x40021000

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <NMI_Handler+0x4>

08000db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e02:	f000 f987 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <EXTI2_TSC_IRQHandler>:
/* please refer to the startup file (startup_stm32f3xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void EXTI2_TSC_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000e10:	2004      	movs	r0, #4
 8000e12:	f000 fc67 	bl	80016e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_TSC_IRQHandler(&htsc);
 8000e16:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <EXTI2_TSC_IRQHandler+0x14>)
 8000e18:	f002 fa0d 	bl	8003236 <HAL_TSC_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200000b8 	.word	0x200000b8

08000e24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_EnableIRQ>:
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	db0b      	blt.n	8000e72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f003 021f 	and.w	r2, r3, #31
 8000e60:	4907      	ldr	r1, [pc, #28]	@ (8000e80 <__NVIC_EnableIRQ+0x38>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	095b      	lsrs	r3, r3, #5
 8000e68:	2001      	movs	r0, #1
 8000e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000e100 	.word	0xe000e100

08000e84 <__NVIC_SetPriority>:
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	490c      	ldr	r1, [pc, #48]	@ (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4908      	ldr	r1, [pc, #32]	@ (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	3b04      	subs	r3, #4
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <enable_timer2_interrupt>:
#include "game_logic.h"
#include "timer.h"

void enable_timer2_interrupt(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Configure Timer 3 for 2s interrupt
	TIM2->PSC = 47999;              		// Timer set to 100Hz (8MHz)
 8000ee0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ee4:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000ee8:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 999;					// 2s timer
 8000eea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CNT = 0;         				// Reset counter
 8000ef4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ef8:	2200      	movs	r2, #0
 8000efa:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->SR = 0;          				// Clear status register
 8000efc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
	TIM2->DIER |= TIM_DIER_UIE;         // Enable update interrupt
 8000f04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 |= TIM_CR1_CEN;           // Start the timer
 8000f14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority(TIM2_IRQn, 2);     // Set Priority as no 2
 8000f24:	2102      	movs	r1, #2
 8000f26:	201c      	movs	r0, #28
 8000f28:	f7ff ffac 	bl	8000e84 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);          // Enable Timer 3 interrupt
 8000f2c:	201c      	movs	r0, #28
 8000f2e:	f7ff ff8b 	bl	8000e48 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f32:	b662      	cpsie	i
}
 8000f34:	bf00      	nop

	// Re-enable all interrupts
	__enable_irq();
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <enable_timer3_interrupt>:

void enable_timer3_interrupt(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();
    // Configure Timer 3 for periodic interrupt
    TIM3->PSC = 47999;              		// Timer set to 100Hz
 8000f44:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <enable_timer3_interrupt+0x48>)
 8000f46:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000f4a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 999;                    // 1s timer
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <enable_timer3_interrupt+0x48>)
 8000f4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f52:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->DIER |= TIM_DIER_UIE;         // Enable update interrupt
 8000f54:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <enable_timer3_interrupt+0x48>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <enable_timer3_interrupt+0x48>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 |= TIM_CR1_CEN;           // Start the timer
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <enable_timer3_interrupt+0x48>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	@ (8000f84 <enable_timer3_interrupt+0x48>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(TIM3_IRQn, 2);     // Set Priority as no 2
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	201d      	movs	r0, #29
 8000f70:	f7ff ff88 	bl	8000e84 <__NVIC_SetPriority>

    NVIC_EnableIRQ(TIM3_IRQn);          // Enable Timer 3 interrupt
 8000f74:	201d      	movs	r0, #29
 8000f76:	f7ff ff67 	bl	8000e48 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f7a:	b662      	cpsie	i
}
 8000f7c:	bf00      	nop

	// Re-enable all interrupts
	__enable_irq();
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40000400 	.word	0x40000400

08000f88 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8000f8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00b      	beq.n	8000fb2 <TIM2_IRQHandler+0x2a>
        TIM2->SR &= ~TIM_SR_UIF;		// clear interrupt flags
 8000f9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fa4:	f023 0301 	bic.w	r3, r3, #1
 8000fa8:	6113      	str	r3, [r2, #16]

        piano.key_valid = 1;			// key press is now ready to be read
 8000faa:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <TIM2_IRQHandler+0x34>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    }
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20000038 	.word	0x20000038

08000fc0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF) {
 8000fc6:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <TIM3_IRQHandler+0x68>)
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d025      	beq.n	800101e <TIM3_IRQHandler+0x5e>
        TIM3->SR &= ~TIM_SR_UIF;
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <TIM3_IRQHandler+0x68>)
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	4a14      	ldr	r2, [pc, #80]	@ (8001028 <TIM3_IRQHandler+0x68>)
 8000fd8:	f023 0301 	bic.w	r3, r3, #1
 8000fdc:	6113      	str	r3, [r2, #16]

        piano.key_pressed = 0;			// key is no longer pressed
 8000fde:	4b13      	ldr	r3, [pc, #76]	@ (800102c <TIM3_IRQHandler+0x6c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e

        if (piano.key_clear) {
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <TIM3_IRQHandler+0x6c>)
 8000fe8:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d016      	beq.n	800101e <TIM3_IRQHandler+0x5e>

        	// clears the state of the key press
        	for (int i=0; i < 5; i++) {
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	e007      	b.n	8001006 <TIM3_IRQHandler+0x46>
        		clear_leds(i);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff f93e 	bl	800027c <clear_leds>
        	for (int i=0; i < 5; i++) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3301      	adds	r3, #1
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b04      	cmp	r3, #4
 800100a:	ddf4      	ble.n	8000ff6 <TIM3_IRQHandler+0x36>
        	}

			memset(piano.key_states, 0, sizeof(piano.key_states));
 800100c:	2205      	movs	r2, #5
 800100e:	2100      	movs	r1, #0
 8001010:	4807      	ldr	r0, [pc, #28]	@ (8001030 <TIM3_IRQHandler+0x70>)
 8001012:	f002 f9a5 	bl	8003360 <memset>
        	piano.key_clear = 0;
 8001016:	4b05      	ldr	r3, [pc, #20]	@ (800102c <TIM3_IRQHandler+0x6c>)
 8001018:	2200      	movs	r2, #0
 800101a:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
        }
    }
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40000400 	.word	0x40000400
 800102c:	20000038 	.word	0x20000038
 8001030:	20000060 	.word	0x20000060

08001034 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001034:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800106c <LoopForever+0x2>
  

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001038:	f7ff fef4 	bl	8000e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800103c:	480c      	ldr	r0, [pc, #48]	@ (8001070 <LoopForever+0x6>)
  ldr r1, =_edata
 800103e:	490d      	ldr	r1, [pc, #52]	@ (8001074 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001040:	4a0d      	ldr	r2, [pc, #52]	@ (8001078 <LoopForever+0xe>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001054:	4c0a      	ldr	r4, [pc, #40]	@ (8001080 <LoopForever+0x16>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001062:	f002 f985 	bl	8003370 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001066:	f7ff fbdf 	bl	8000828 <main>

0800106a <LoopForever>:

LoopForever:
    b LoopForever
 800106a:	e7fe      	b.n	800106a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800106c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001074:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001078:	08003428 	.word	0x08003428
  ldr r2, =_sbss
 800107c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001080:	200003d4 	.word	0x200003d4

08001084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC1_2_IRQHandler>
	...

08001088 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <HAL_Init+0x28>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	@ (80010b0 <HAL_Init+0x28>)
 8001092:	f043 0310 	orr.w	r3, r3, #16
 8001096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 f94f 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	2000      	movs	r0, #0
 80010a0:	f000 f808 	bl	80010b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff fd66 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40022000 	.word	0x40022000

080010b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010bc:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <HAL_InitTick+0x54>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <HAL_InitTick+0x58>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f967 	bl	80013a6 <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f000 f92f 	bl	8001352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	@ (8001110 <HAL_InitTick+0x5c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000090 	.word	0x20000090
 800110c:	20000098 	.word	0x20000098
 8001110:	20000094 	.word	0x20000094

08001114 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000098 	.word	0x20000098
 8001138:	200003d0 	.word	0x200003d0

0800113c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	200003d0 	.word	0x200003d0

08001154 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff ffee 	bl	800113c <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <HAL_Delay+0x44>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800117a:	bf00      	nop
 800117c:	f7ff ffde 	bl	800113c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000098 	.word	0x20000098

0800119c <__NVIC_SetPriorityGrouping>:
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4907      	ldr	r1, [pc, #28]	@ (8001238 <__NVIC_EnableIRQ+0x38>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	@ (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	@ (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	@ 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	@ 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001308:	d301      	bcc.n	800130e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <SysTick_Config+0x40>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001316:	210f      	movs	r1, #15
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f7ff ff8e 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <SysTick_Config+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <SysTick_Config+0x40>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff29 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001364:	f7ff ff3e 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f7ff ff8e 	bl	8001290 <NVIC_EncodePriority>
 8001374:	4602      	mov	r2, r0
 8001376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff5d 	bl	800123c <__NVIC_SetPriority>
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff31 	bl	8001200 <__NVIC_EnableIRQ>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffa2 	bl	80012f8 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ce:	e154      	b.n	800167a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8146 	beq.w	8001674 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d005      	beq.n	8001400 <HAL_GPIO_Init+0x40>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d130      	bne.n	8001462 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001436:	2201      	movs	r2, #1
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	f003 0201 	and.w	r2, r3, #1
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b03      	cmp	r3, #3
 800146c:	d017      	beq.n	800149e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2203      	movs	r2, #3
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d123      	bne.n	80014f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	08da      	lsrs	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3208      	adds	r2, #8
 80014b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	08da      	lsrs	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3208      	adds	r2, #8
 80014ec:	6939      	ldr	r1, [r7, #16]
 80014ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0203 	and.w	r2, r3, #3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80a0 	beq.w	8001674 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001534:	4b58      	ldr	r3, [pc, #352]	@ (8001698 <HAL_GPIO_Init+0x2d8>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a57      	ldr	r2, [pc, #348]	@ (8001698 <HAL_GPIO_Init+0x2d8>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b55      	ldr	r3, [pc, #340]	@ (8001698 <HAL_GPIO_Init+0x2d8>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800154c:	4a53      	ldr	r2, [pc, #332]	@ (800169c <HAL_GPIO_Init+0x2dc>)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001576:	d019      	beq.n	80015ac <HAL_GPIO_Init+0x1ec>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a49      	ldr	r2, [pc, #292]	@ (80016a0 <HAL_GPIO_Init+0x2e0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d013      	beq.n	80015a8 <HAL_GPIO_Init+0x1e8>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a48      	ldr	r2, [pc, #288]	@ (80016a4 <HAL_GPIO_Init+0x2e4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d00d      	beq.n	80015a4 <HAL_GPIO_Init+0x1e4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a47      	ldr	r2, [pc, #284]	@ (80016a8 <HAL_GPIO_Init+0x2e8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d007      	beq.n	80015a0 <HAL_GPIO_Init+0x1e0>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a46      	ldr	r2, [pc, #280]	@ (80016ac <HAL_GPIO_Init+0x2ec>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d101      	bne.n	800159c <HAL_GPIO_Init+0x1dc>
 8001598:	2304      	movs	r3, #4
 800159a:	e008      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 800159c:	2305      	movs	r3, #5
 800159e:	e006      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015a0:	2303      	movs	r3, #3
 80015a2:	e004      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e002      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015ac:	2300      	movs	r3, #0
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	f002 0203 	and.w	r2, r2, #3
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	4093      	lsls	r3, r2
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015be:	4937      	ldr	r1, [pc, #220]	@ (800169c <HAL_GPIO_Init+0x2dc>)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015cc:	4b38      	ldr	r3, [pc, #224]	@ (80016b0 <HAL_GPIO_Init+0x2f0>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015f0:	4a2f      	ldr	r2, [pc, #188]	@ (80016b0 <HAL_GPIO_Init+0x2f0>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015f6:	4b2e      	ldr	r3, [pc, #184]	@ (80016b0 <HAL_GPIO_Init+0x2f0>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800161a:	4a25      	ldr	r2, [pc, #148]	@ (80016b0 <HAL_GPIO_Init+0x2f0>)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001620:	4b23      	ldr	r3, [pc, #140]	@ (80016b0 <HAL_GPIO_Init+0x2f0>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001644:	4a1a      	ldr	r2, [pc, #104]	@ (80016b0 <HAL_GPIO_Init+0x2f0>)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800164a:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <HAL_GPIO_Init+0x2f0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800166e:	4a10      	ldr	r2, [pc, #64]	@ (80016b0 <HAL_GPIO_Init+0x2f0>)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	f47f aea3 	bne.w	80013d0 <HAL_GPIO_Init+0x10>
  }
}
 800168a:	bf00      	nop
 800168c:	bf00      	nop
 800168e:	371c      	adds	r7, #28
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000
 80016a0:	48000400 	.word	0x48000400
 80016a4:	48000800 	.word	0x48000800
 80016a8:	48000c00 	.word	0x48000c00
 80016ac:	48001000 	.word	0x48001000
 80016b0:	40010400 	.word	0x40010400

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016ee:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d006      	beq.n	8001708 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016fa:	4a05      	ldr	r2, [pc, #20]	@ (8001710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f806 	bl	8001714 <HAL_GPIO_EXTI_Callback>
  }
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40010400 	.word	0x40010400

08001714 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0b9      	b.n	80018b0 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d106      	bne.n	8001756 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fae7 	bl	8000d24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f001 fdc3 	bl	80032ee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	e03e      	b.n	80017ec <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	3311      	adds	r3, #17
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	3310      	adds	r3, #16
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001796:	7bfa      	ldrb	r2, [r7, #15]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	3313      	adds	r3, #19
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017aa:	7bfa      	ldrb	r2, [r7, #15]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	440b      	add	r3, r1
 80017b8:	3320      	adds	r3, #32
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	3324      	adds	r3, #36	@ 0x24
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	3301      	adds	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	791b      	ldrb	r3, [r3, #4]
 80017f0:	7bfa      	ldrb	r2, [r7, #15]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d3bb      	bcc.n	800176e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	73fb      	strb	r3, [r7, #15]
 80017fa:	e044      	b.n	8001886 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800183e:	7bfa      	ldrb	r2, [r7, #15]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	440b      	add	r3, r1
 800184c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800186a:	7bfa      	ldrb	r2, [r7, #15]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	3301      	adds	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	791b      	ldrb	r3, [r3, #4]
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	429a      	cmp	r2, r3
 800188e:	d3b5      	bcc.n	80017fc <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3304      	adds	r3, #4
 8001898:	e893 0006 	ldmia.w	r3, {r1, r2}
 800189c:	f001 fd42 	bl	8003324 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80018be:	af00      	add	r7, sp, #0
 80018c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	f000 bff4 	b.w	80028c6 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 816d 	beq.w	8001bce <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018f4:	4bb4      	ldr	r3, [pc, #720]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d00c      	beq.n	800191a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001900:	4bb1      	ldr	r3, [pc, #708]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	d157      	bne.n	80019bc <HAL_RCC_OscConfig+0x104>
 800190c:	4bae      	ldr	r3, [pc, #696]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001918:	d150      	bne.n	80019bc <HAL_RCC_OscConfig+0x104>
 800191a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800191e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800192e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b3f      	cmp	r3, #63	@ 0x3f
 800193a:	d802      	bhi.n	8001942 <HAL_RCC_OscConfig+0x8a>
 800193c:	4ba2      	ldr	r3, [pc, #648]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	e015      	b.n	800196e <HAL_RCC_OscConfig+0xb6>
 8001942:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001946:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800194e:	fa93 f3a3 	rbit	r3, r3
 8001952:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001956:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800195a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800195e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800196a:	4b97      	ldr	r3, [pc, #604]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001972:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001976:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800197a:	fa92 f2a2 	rbit	r2, r2
 800197e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001982:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001986:	fab2 f282 	clz	r2, r2
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f042 0220 	orr.w	r2, r2, #32
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	f002 021f 	and.w	r2, r2, #31
 8001996:	2101      	movs	r1, #1
 8001998:	fa01 f202 	lsl.w	r2, r1, r2
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8114 	beq.w	8001bcc <HAL_RCC_OscConfig+0x314>
 80019a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f040 810b 	bne.w	8001bcc <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f000 bf85 	b.w	80028c6 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019cc:	d106      	bne.n	80019dc <HAL_RCC_OscConfig+0x124>
 80019ce:	4b7e      	ldr	r3, [pc, #504]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a7d      	ldr	r2, [pc, #500]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e036      	b.n	8001a4a <HAL_RCC_OscConfig+0x192>
 80019dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10c      	bne.n	8001a06 <HAL_RCC_OscConfig+0x14e>
 80019ec:	4b76      	ldr	r3, [pc, #472]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a75      	ldr	r2, [pc, #468]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 80019f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b73      	ldr	r3, [pc, #460]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a72      	ldr	r2, [pc, #456]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e021      	b.n	8001a4a <HAL_RCC_OscConfig+0x192>
 8001a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a16:	d10c      	bne.n	8001a32 <HAL_RCC_OscConfig+0x17a>
 8001a18:	4b6b      	ldr	r3, [pc, #428]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a6a      	ldr	r2, [pc, #424]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 8001a1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b68      	ldr	r3, [pc, #416]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a67      	ldr	r2, [pc, #412]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e00b      	b.n	8001a4a <HAL_RCC_OscConfig+0x192>
 8001a32:	4b65      	ldr	r3, [pc, #404]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a64      	ldr	r2, [pc, #400]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 8001a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	4b62      	ldr	r3, [pc, #392]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a61      	ldr	r2, [pc, #388]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 8001a44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 8001a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4e:	f023 020f 	bic.w	r2, r3, #15
 8001a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	495a      	ldr	r1, [pc, #360]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d054      	beq.n	8001b1e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fb62 	bl	800113c <HAL_GetTick>
 8001a78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a7e:	f7ff fb5d 	bl	800113c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	@ 0x64
 8001a8c:	d902      	bls.n	8001a94 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	f000 bf19 	b.w	80028c6 <HAL_RCC_OscConfig+0x100e>
 8001a94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a98:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001aa8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ab4:	d802      	bhi.n	8001abc <HAL_RCC_OscConfig+0x204>
 8001ab6:	4b44      	ldr	r3, [pc, #272]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	e015      	b.n	8001ae8 <HAL_RCC_OscConfig+0x230>
 8001abc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ac0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001ad0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ad4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001ad8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001ae4:	4b38      	ldr	r3, [pc, #224]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001aec:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001af0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001af4:	fa92 f2a2 	rbit	r2, r2
 8001af8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001afc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001b00:	fab2 f282 	clz	r2, r2
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	f042 0220 	orr.w	r2, r2, #32
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	f002 021f 	and.w	r2, r2, #31
 8001b10:	2101      	movs	r1, #1
 8001b12:	fa01 f202 	lsl.w	r2, r1, r2
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0b0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1c6>
 8001b1c:	e057      	b.n	8001bce <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7ff fb0d 	bl	800113c <HAL_GetTick>
 8001b22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	e00a      	b.n	8001b3e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fb08 	bl	800113c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b64      	cmp	r3, #100	@ 0x64
 8001b36:	d902      	bls.n	8001b3e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	f000 bec4 	b.w	80028c6 <HAL_RCC_OscConfig+0x100e>
 8001b3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b42:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001b52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b5e:	d802      	bhi.n	8001b66 <HAL_RCC_OscConfig+0x2ae>
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	e015      	b.n	8001b92 <HAL_RCC_OscConfig+0x2da>
 8001b66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b6a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001b7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b7e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001b82:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <HAL_RCC_OscConfig+0x310>)
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b96:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001b9a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001b9e:	fa92 f2a2 	rbit	r2, r2
 8001ba2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001ba6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001baa:	fab2 f282 	clz	r2, r2
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	f042 0220 	orr.w	r2, r2, #32
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	f002 021f 	and.w	r2, r2, #31
 8001bba:	2101      	movs	r1, #1
 8001bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1b0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x270>
 8001bc6:	e002      	b.n	8001bce <HAL_RCC_OscConfig+0x316>
 8001bc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 816c 	beq.w	8001ebc <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001be4:	4bcc      	ldr	r3, [pc, #816]	@ (8001f18 <HAL_RCC_OscConfig+0x660>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00b      	beq.n	8001c08 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bf0:	4bc9      	ldr	r3, [pc, #804]	@ (8001f18 <HAL_RCC_OscConfig+0x660>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d16d      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x420>
 8001bfc:	4bc6      	ldr	r3, [pc, #792]	@ (8001f18 <HAL_RCC_OscConfig+0x660>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d167      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x420>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001c1a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c26:	d802      	bhi.n	8001c2e <HAL_RCC_OscConfig+0x376>
 8001c28:	4bbb      	ldr	r3, [pc, #748]	@ (8001f18 <HAL_RCC_OscConfig+0x660>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	e013      	b.n	8001c56 <HAL_RCC_OscConfig+0x39e>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c40:	2302      	movs	r3, #2
 8001c42:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001c46:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001c52:	4bb1      	ldr	r3, [pc, #708]	@ (8001f18 <HAL_RCC_OscConfig+0x660>)
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	2202      	movs	r2, #2
 8001c58:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001c5c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001c60:	fa92 f2a2 	rbit	r2, r2
 8001c64:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001c68:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001c6c:	fab2 f282 	clz	r2, r2
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	f042 0220 	orr.w	r2, r2, #32
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	f002 021f 	and.w	r2, r2, #31
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00a      	beq.n	8001c9e <HAL_RCC_OscConfig+0x3e6>
 8001c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d002      	beq.n	8001c9e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f000 be14 	b.w	80028c6 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9e:	4b9e      	ldr	r3, [pc, #632]	@ (8001f18 <HAL_RCC_OscConfig+0x660>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001caa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	21f8      	movs	r1, #248	@ 0xf8
 8001cb4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001cbc:	fa91 f1a1 	rbit	r1, r1
 8001cc0:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001cc4:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001cc8:	fab1 f181 	clz	r1, r1
 8001ccc:	b2c9      	uxtb	r1, r1
 8001cce:	408b      	lsls	r3, r1
 8001cd0:	4991      	ldr	r1, [pc, #580]	@ (8001f18 <HAL_RCC_OscConfig+0x660>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	e0f1      	b.n	8001ebc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cdc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 8083 	beq.w	8001df0 <HAL_RCC_OscConfig+0x538>
 8001cea:	2301      	movs	r3, #1
 8001cec:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001cfc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d00:	fab3 f383 	clz	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d0a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	461a      	mov	r2, r3
 8001d12:	2301      	movs	r3, #1
 8001d14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff fa11 	bl	800113c <HAL_GetTick>
 8001d1a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d20:	f7ff fa0c 	bl	800113c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d902      	bls.n	8001d36 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	f000 bdc8 	b.w	80028c6 <HAL_RCC_OscConfig+0x100e>
 8001d36:	2302      	movs	r3, #2
 8001d38:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001d48:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d54:	d802      	bhi.n	8001d5c <HAL_RCC_OscConfig+0x4a4>
 8001d56:	4b70      	ldr	r3, [pc, #448]	@ (8001f18 <HAL_RCC_OscConfig+0x660>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	e013      	b.n	8001d84 <HAL_RCC_OscConfig+0x4cc>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001d74:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001d80:	4b65      	ldr	r3, [pc, #404]	@ (8001f18 <HAL_RCC_OscConfig+0x660>)
 8001d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d84:	2202      	movs	r2, #2
 8001d86:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001d8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001d8e:	fa92 f2a2 	rbit	r2, r2
 8001d92:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001d96:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001d9a:	fab2 f282 	clz	r2, r2
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	f042 0220 	orr.w	r2, r2, #32
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	f002 021f 	and.w	r2, r2, #31
 8001daa:	2101      	movs	r1, #1
 8001dac:	fa01 f202 	lsl.w	r2, r1, r2
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0b4      	beq.n	8001d20 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b58      	ldr	r3, [pc, #352]	@ (8001f18 <HAL_RCC_OscConfig+0x660>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	21f8      	movs	r1, #248	@ 0xf8
 8001dcc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001dd4:	fa91 f1a1 	rbit	r1, r1
 8001dd8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001ddc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001de0:	fab1 f181 	clz	r1, r1
 8001de4:	b2c9      	uxtb	r1, r1
 8001de6:	408b      	lsls	r3, r1
 8001de8:	494b      	ldr	r1, [pc, #300]	@ (8001f18 <HAL_RCC_OscConfig+0x660>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]
 8001dee:	e065      	b.n	8001ebc <HAL_RCC_OscConfig+0x604>
 8001df0:	2301      	movs	r3, #1
 8001df2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001e02:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e10:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	461a      	mov	r2, r3
 8001e18:	2300      	movs	r3, #0
 8001e1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff f98e 	bl	800113c <HAL_GetTick>
 8001e20:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e24:	e00a      	b.n	8001e3c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e26:	f7ff f989 	bl	800113c <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d902      	bls.n	8001e3c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	f000 bd45 	b.w	80028c6 <HAL_RCC_OscConfig+0x100e>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e5a:	d802      	bhi.n	8001e62 <HAL_RCC_OscConfig+0x5aa>
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f18 <HAL_RCC_OscConfig+0x660>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	e013      	b.n	8001e8a <HAL_RCC_OscConfig+0x5d2>
 8001e62:	2302      	movs	r3, #2
 8001e64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001e74:	2302      	movs	r3, #2
 8001e76:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001e7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001e86:	4b24      	ldr	r3, [pc, #144]	@ (8001f18 <HAL_RCC_OscConfig+0x660>)
 8001e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001e90:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001e94:	fa92 f2a2 	rbit	r2, r2
 8001e98:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001e9c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001ea0:	fab2 f282 	clz	r2, r2
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	f042 0220 	orr.w	r2, r2, #32
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	f002 021f 	and.w	r2, r2, #31
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1b4      	bne.n	8001e26 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 8115 	beq.w	80020fc <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d07e      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x728>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_RCC_OscConfig+0x664>)
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	461a      	mov	r2, r3
 8001f08:	2301      	movs	r3, #1
 8001f0a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f916 	bl	800113c <HAL_GetTick>
 8001f10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f14:	e00f      	b.n	8001f36 <HAL_RCC_OscConfig+0x67e>
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff f90c 	bl	800113c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d902      	bls.n	8001f36 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	f000 bcc8 	b.w	80028c6 <HAL_RCC_OscConfig+0x100e>
 8001f36:	2302      	movs	r3, #2
 8001f38:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f50:	2202      	movs	r2, #2
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f58:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	fa93 f2a3 	rbit	r2, r3
 8001f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f74:	2202      	movs	r2, #2
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	fa93 f2a3 	rbit	r2, r3
 8001f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f8e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f90:	4bb0      	ldr	r3, [pc, #704]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 8001f92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	6019      	str	r1, [r3, #0]
 8001fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	fa93 f1a3 	rbit	r1, r3
 8001fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fb6:	6019      	str	r1, [r3, #0]
  return result;
 8001fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fbc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0a0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x668>
 8001fde:	e08d      	b.n	80020fc <HAL_RCC_OscConfig+0x844>
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001fe8:	2201      	movs	r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	fa93 f2a3 	rbit	r2, r3
 8001ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002002:	601a      	str	r2, [r3, #0]
  return result;
 8002004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002008:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800200c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	4b90      	ldr	r3, [pc, #576]	@ (8002258 <HAL_RCC_OscConfig+0x9a0>)
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	461a      	mov	r2, r3
 800201e:	2300      	movs	r3, #0
 8002020:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002022:	f7ff f88b 	bl	800113c <HAL_GetTick>
 8002026:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202a:	e00a      	b.n	8002042 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202c:	f7ff f886 	bl	800113c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d902      	bls.n	8002042 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	f000 bc42 	b.w	80028c6 <HAL_RCC_OscConfig+0x100e>
 8002042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002046:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800204a:	2202      	movs	r2, #2
 800204c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002052:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	fa93 f2a3 	rbit	r2, r3
 800205c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002060:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800206e:	2202      	movs	r2, #2
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002076:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	fa93 f2a3 	rbit	r2, r3
 8002080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002084:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002092:	2202      	movs	r2, #2
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	fa93 f2a3 	rbit	r2, r3
 80020a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ae:	4b69      	ldr	r3, [pc, #420]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 80020b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020ba:	2102      	movs	r1, #2
 80020bc:	6019      	str	r1, [r3, #0]
 80020be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	fa93 f1a3 	rbit	r1, r3
 80020cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020d4:	6019      	str	r1, [r3, #0]
  return result;
 80020d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020da:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	2101      	movs	r1, #1
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d197      	bne.n	800202c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002100:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 819e 	beq.w	800244e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002118:	4b4e      	ldr	r3, [pc, #312]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d116      	bne.n	8002152 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002124:	4b4b      	ldr	r3, [pc, #300]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	4a4a      	ldr	r2, [pc, #296]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 800212a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212e:	61d3      	str	r3, [r2, #28]
 8002130:	4b48      	ldr	r3, [pc, #288]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002146:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800214a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800214c:	2301      	movs	r3, #1
 800214e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	4b42      	ldr	r3, [pc, #264]	@ (800225c <HAL_RCC_OscConfig+0x9a4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d11a      	bne.n	8002194 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215e:	4b3f      	ldr	r3, [pc, #252]	@ (800225c <HAL_RCC_OscConfig+0x9a4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a3e      	ldr	r2, [pc, #248]	@ (800225c <HAL_RCC_OscConfig+0x9a4>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002168:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216a:	f7fe ffe7 	bl	800113c <HAL_GetTick>
 800216e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002172:	e009      	b.n	8002188 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002174:	f7fe ffe2 	bl	800113c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b64      	cmp	r3, #100	@ 0x64
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e39e      	b.n	80028c6 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	4b34      	ldr	r3, [pc, #208]	@ (800225c <HAL_RCC_OscConfig+0x9a4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ef      	beq.n	8002174 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002198:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d106      	bne.n	80021b2 <HAL_RCC_OscConfig+0x8fa>
 80021a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6213      	str	r3, [r2, #32]
 80021b0:	e035      	b.n	800221e <HAL_RCC_OscConfig+0x966>
 80021b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x924>
 80021c2:	4b24      	ldr	r3, [pc, #144]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	4a23      	ldr	r2, [pc, #140]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	6213      	str	r3, [r2, #32]
 80021ce:	4b21      	ldr	r3, [pc, #132]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a20      	ldr	r2, [pc, #128]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 80021d4:	f023 0304 	bic.w	r3, r3, #4
 80021d8:	6213      	str	r3, [r2, #32]
 80021da:	e020      	b.n	800221e <HAL_RCC_OscConfig+0x966>
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d10c      	bne.n	8002206 <HAL_RCC_OscConfig+0x94e>
 80021ec:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4a18      	ldr	r2, [pc, #96]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	6213      	str	r3, [r2, #32]
 80021f8:	4b16      	ldr	r3, [pc, #88]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a15      	ldr	r2, [pc, #84]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	e00b      	b.n	800221e <HAL_RCC_OscConfig+0x966>
 8002206:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4a12      	ldr	r2, [pc, #72]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6213      	str	r3, [r2, #32]
 8002212:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a0f      	ldr	r2, [pc, #60]	@ (8002254 <HAL_RCC_OscConfig+0x99c>)
 8002218:	f023 0304 	bic.w	r3, r3, #4
 800221c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800221e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002222:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8087 	beq.w	800233e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002230:	f7fe ff84 	bl	800113c <HAL_GetTick>
 8002234:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	e012      	b.n	8002260 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe ff7f 	bl	800113c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d908      	bls.n	8002260 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e339      	b.n	80028c6 <HAL_RCC_OscConfig+0x100e>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	10908120 	.word	0x10908120
 800225c:	40007000 	.word	0x40007000
 8002260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002264:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002268:	2202      	movs	r2, #2
 800226a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002270:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002288:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800228c:	2202      	movs	r2, #2
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002294:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	fa93 f2a3 	rbit	r2, r3
 800229e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022a6:	601a      	str	r2, [r3, #0]
  return result;
 80022a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ac:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d102      	bne.n	80022c8 <HAL_RCC_OscConfig+0xa10>
 80022c2:	4b98      	ldr	r3, [pc, #608]	@ (8002524 <HAL_RCC_OscConfig+0xc6c>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	e013      	b.n	80022f0 <HAL_RCC_OscConfig+0xa38>
 80022c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022cc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80022d0:	2202      	movs	r2, #2
 80022d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	fa93 f2a3 	rbit	r2, r3
 80022e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	4b8d      	ldr	r3, [pc, #564]	@ (8002524 <HAL_RCC_OscConfig+0xc6c>)
 80022ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022f4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80022f8:	2102      	movs	r1, #2
 80022fa:	6011      	str	r1, [r2, #0]
 80022fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002300:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	fa92 f1a2 	rbit	r1, r2
 800230a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800230e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002312:	6011      	str	r1, [r2, #0]
  return result;
 8002314:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002318:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	fab2 f282 	clz	r2, r2
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f002 021f 	and.w	r2, r2, #31
 800232e:	2101      	movs	r1, #1
 8002330:	fa01 f202 	lsl.w	r2, r1, r2
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	f43f af7f 	beq.w	800223a <HAL_RCC_OscConfig+0x982>
 800233c:	e07d      	b.n	800243a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7fe fefd 	bl	800113c <HAL_GetTick>
 8002342:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7fe fef8 	bl	800113c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e2b2      	b.n	80028c6 <HAL_RCC_OscConfig+0x100e>
 8002360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002364:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002368:	2202      	movs	r2, #2
 800236a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	fa93 f2a3 	rbit	r2, r3
 800237a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002388:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800238c:	2202      	movs	r2, #2
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023a6:	601a      	str	r2, [r3, #0]
  return result;
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_RCC_OscConfig+0xb10>
 80023c2:	4b58      	ldr	r3, [pc, #352]	@ (8002524 <HAL_RCC_OscConfig+0xc6c>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	e013      	b.n	80023f0 <HAL_RCC_OscConfig+0xb38>
 80023c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023cc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023d0:	2202      	movs	r2, #2
 80023d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	fa93 f2a3 	rbit	r2, r3
 80023e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002524 <HAL_RCC_OscConfig+0xc6c>)
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023f4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80023f8:	2102      	movs	r1, #2
 80023fa:	6011      	str	r1, [r2, #0]
 80023fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002400:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	fa92 f1a2 	rbit	r1, r2
 800240a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800240e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002412:	6011      	str	r1, [r2, #0]
  return result;
 8002414:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002418:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	fab2 f282 	clz	r2, r2
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	f002 021f 	and.w	r2, r2, #31
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f202 	lsl.w	r2, r1, r2
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d186      	bne.n	8002348 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800243a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800243e:	2b01      	cmp	r3, #1
 8002440:	d105      	bne.n	800244e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002442:	4b38      	ldr	r3, [pc, #224]	@ (8002524 <HAL_RCC_OscConfig+0xc6c>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4a37      	ldr	r2, [pc, #220]	@ (8002524 <HAL_RCC_OscConfig+0xc6c>)
 8002448:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800244c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002452:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8232 	beq.w	80028c4 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002460:	4b30      	ldr	r3, [pc, #192]	@ (8002524 <HAL_RCC_OscConfig+0xc6c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b08      	cmp	r3, #8
 800246a:	f000 8201 	beq.w	8002870 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002472:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	2b02      	cmp	r3, #2
 800247c:	f040 8157 	bne.w	800272e <HAL_RCC_OscConfig+0xe76>
 8002480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002484:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002488:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800248c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002492:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	fa93 f2a3 	rbit	r2, r3
 800249c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024a4:	601a      	str	r2, [r3, #0]
  return result;
 80024a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024aa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024ae:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024ba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	461a      	mov	r2, r3
 80024c2:	2300      	movs	r3, #0
 80024c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7fe fe39 	bl	800113c <HAL_GetTick>
 80024ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ce:	e009      	b.n	80024e4 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d0:	f7fe fe34 	bl	800113c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e1f0      	b.n	80028c6 <HAL_RCC_OscConfig+0x100e>
 80024e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80024ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	fa93 f2a3 	rbit	r2, r3
 8002500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002504:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002508:	601a      	str	r2, [r3, #0]
  return result;
 800250a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002512:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b3f      	cmp	r3, #63	@ 0x3f
 800251c:	d804      	bhi.n	8002528 <HAL_RCC_OscConfig+0xc70>
 800251e:	4b01      	ldr	r3, [pc, #4]	@ (8002524 <HAL_RCC_OscConfig+0xc6c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	e029      	b.n	8002578 <HAL_RCC_OscConfig+0xcc0>
 8002524:	40021000 	.word	0x40021000
 8002528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002530:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002548:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002552:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002556:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002560:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	fa93 f2a3 	rbit	r2, r3
 800256a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	4bc3      	ldr	r3, [pc, #780]	@ (8002884 <HAL_RCC_OscConfig+0xfcc>)
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800257c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002580:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002584:	6011      	str	r1, [r2, #0]
 8002586:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800258a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	fa92 f1a2 	rbit	r1, r2
 8002594:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002598:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800259c:	6011      	str	r1, [r2, #0]
  return result;
 800259e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025a2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f002 021f 	and.w	r2, r2, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d185      	bne.n	80024d0 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c4:	4baf      	ldr	r3, [pc, #700]	@ (8002884 <HAL_RCC_OscConfig+0xfcc>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80025d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	49a7      	ldr	r1, [pc, #668]	@ (8002884 <HAL_RCC_OscConfig+0xfcc>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
 80025ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80025f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fe:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	fa93 f2a3 	rbit	r2, r3
 8002608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002610:	601a      	str	r2, [r3, #0]
  return result;
 8002612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002616:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800261a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002626:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	461a      	mov	r2, r3
 800262e:	2301      	movs	r3, #1
 8002630:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7fe fd83 	bl	800113c <HAL_GetTick>
 8002636:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263a:	e009      	b.n	8002650 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe fd7e 	bl	800113c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e13a      	b.n	80028c6 <HAL_RCC_OscConfig+0x100e>
 8002650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002654:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002658:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800265c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002662:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	fa93 f2a3 	rbit	r2, r3
 800266c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002670:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002674:	601a      	str	r2, [r3, #0]
  return result;
 8002676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800267e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b3f      	cmp	r3, #63	@ 0x3f
 8002688:	d802      	bhi.n	8002690 <HAL_RCC_OscConfig+0xdd8>
 800268a:	4b7e      	ldr	r3, [pc, #504]	@ (8002884 <HAL_RCC_OscConfig+0xfcc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	e027      	b.n	80026e0 <HAL_RCC_OscConfig+0xe28>
 8002690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002694:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002698:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800269c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	fa93 f2a3 	rbit	r2, r3
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ba:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80026be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	fa93 f2a3 	rbit	r2, r3
 80026d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	4b69      	ldr	r3, [pc, #420]	@ (8002884 <HAL_RCC_OscConfig+0xfcc>)
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026e4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80026e8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026ec:	6011      	str	r1, [r2, #0]
 80026ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026f2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	fa92 f1a2 	rbit	r1, r2
 80026fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002700:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002704:	6011      	str	r1, [r2, #0]
  return result;
 8002706:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800270a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	fab2 f282 	clz	r2, r2
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f042 0220 	orr.w	r2, r2, #32
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	f002 021f 	and.w	r2, r2, #31
 8002720:	2101      	movs	r1, #1
 8002722:	fa01 f202 	lsl.w	r2, r1, r2
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d087      	beq.n	800263c <HAL_RCC_OscConfig+0xd84>
 800272c:	e0ca      	b.n	80028c4 <HAL_RCC_OscConfig+0x100c>
 800272e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002732:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002736:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800273a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002740:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	fa93 f2a3 	rbit	r2, r3
 800274a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002752:	601a      	str	r2, [r3, #0]
  return result;
 8002754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002758:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800275c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002768:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	461a      	mov	r2, r3
 8002770:	2300      	movs	r3, #0
 8002772:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7fe fce2 	bl	800113c <HAL_GetTick>
 8002778:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277c:	e009      	b.n	8002792 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277e:	f7fe fcdd 	bl	800113c <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e099      	b.n	80028c6 <HAL_RCC_OscConfig+0x100e>
 8002792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002796:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800279a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800279e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	fa93 f2a3 	rbit	r2, r3
 80027ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80027b6:	601a      	str	r2, [r3, #0]
  return result;
 80027b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027bc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80027c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80027ca:	d802      	bhi.n	80027d2 <HAL_RCC_OscConfig+0xf1a>
 80027cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002884 <HAL_RCC_OscConfig+0xfcc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	e027      	b.n	8002822 <HAL_RCC_OscConfig+0xf6a>
 80027d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80027da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	fa93 f2a3 	rbit	r2, r3
 80027ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002800:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	fa93 f2a3 	rbit	r2, r3
 8002814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002818:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <HAL_RCC_OscConfig+0xfcc>)
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002826:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800282a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800282e:	6011      	str	r1, [r2, #0]
 8002830:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002834:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	fa92 f1a2 	rbit	r1, r2
 800283e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002842:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002846:	6011      	str	r1, [r2, #0]
  return result;
 8002848:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800284c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	fab2 f282 	clz	r2, r2
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	f042 0220 	orr.w	r2, r2, #32
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	f002 021f 	and.w	r2, r2, #31
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f202 	lsl.w	r2, r1, r2
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d187      	bne.n	800277e <HAL_RCC_OscConfig+0xec6>
 800286e:	e029      	b.n	80028c4 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002874:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d103      	bne.n	8002888 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e020      	b.n	80028c6 <HAL_RCC_OscConfig+0x100e>
 8002884:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002888:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <HAL_RCC_OscConfig+0x1018>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002890:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002894:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d10b      	bne.n	80028c0 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80028a8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80028ac:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000

080028d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b09e      	sub	sp, #120	@ 0x78
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e154      	b.n	8002b96 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028ec:	4b89      	ldr	r3, [pc, #548]	@ (8002b14 <HAL_RCC_ClockConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d910      	bls.n	800291c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b86      	ldr	r3, [pc, #536]	@ (8002b14 <HAL_RCC_ClockConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 0207 	bic.w	r2, r3, #7
 8002902:	4984      	ldr	r1, [pc, #528]	@ (8002b14 <HAL_RCC_ClockConfig+0x240>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b82      	ldr	r3, [pc, #520]	@ (8002b14 <HAL_RCC_ClockConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e13c      	b.n	8002b96 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002928:	4b7b      	ldr	r3, [pc, #492]	@ (8002b18 <HAL_RCC_ClockConfig+0x244>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4978      	ldr	r1, [pc, #480]	@ (8002b18 <HAL_RCC_ClockConfig+0x244>)
 8002936:	4313      	orrs	r3, r2
 8002938:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80cd 	beq.w	8002ae2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d137      	bne.n	80029c0 <HAL_RCC_ClockConfig+0xec>
 8002950:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002954:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800295e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b3f      	cmp	r3, #63	@ 0x3f
 8002968:	d802      	bhi.n	8002970 <HAL_RCC_ClockConfig+0x9c>
 800296a:	4b6b      	ldr	r3, [pc, #428]	@ (8002b18 <HAL_RCC_ClockConfig+0x244>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	e00f      	b.n	8002990 <HAL_RCC_ClockConfig+0xbc>
 8002970:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002974:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	667b      	str	r3, [r7, #100]	@ 0x64
 800297e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002982:	663b      	str	r3, [r7, #96]	@ 0x60
 8002984:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800298c:	4b62      	ldr	r3, [pc, #392]	@ (8002b18 <HAL_RCC_ClockConfig+0x244>)
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002994:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002996:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002998:	fa92 f2a2 	rbit	r2, r2
 800299c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800299e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80029a0:	fab2 f282 	clz	r2, r2
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	f042 0220 	orr.w	r2, r2, #32
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	f002 021f 	and.w	r2, r2, #31
 80029b0:	2101      	movs	r1, #1
 80029b2:	fa01 f202 	lsl.w	r2, r1, r2
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d171      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0ea      	b.n	8002b96 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d137      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x164>
 80029c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029cc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80029d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b3f      	cmp	r3, #63	@ 0x3f
 80029e0:	d802      	bhi.n	80029e8 <HAL_RCC_ClockConfig+0x114>
 80029e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002b18 <HAL_RCC_ClockConfig+0x244>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	e00f      	b.n	8002a08 <HAL_RCC_ClockConfig+0x134>
 80029e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80029f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80029fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a04:	4b44      	ldr	r3, [pc, #272]	@ (8002b18 <HAL_RCC_ClockConfig+0x244>)
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a0c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002a0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a10:	fa92 f2a2 	rbit	r2, r2
 8002a14:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002a16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a18:	fab2 f282 	clz	r2, r2
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	f042 0220 	orr.w	r2, r2, #32
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	f002 021f 	and.w	r2, r2, #31
 8002a28:	2101      	movs	r1, #1
 8002a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d135      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0ae      	b.n	8002b96 <HAL_RCC_ClockConfig+0x2c2>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a4e:	d802      	bhi.n	8002a56 <HAL_RCC_ClockConfig+0x182>
 8002a50:	4b31      	ldr	r3, [pc, #196]	@ (8002b18 <HAL_RCC_ClockConfig+0x244>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	e00d      	b.n	8002a72 <HAL_RCC_ClockConfig+0x19e>
 8002a56:	2302      	movs	r3, #2
 8002a58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a62:	2302      	movs	r3, #2
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b18 <HAL_RCC_ClockConfig+0x244>)
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a72:	2202      	movs	r2, #2
 8002a74:	61ba      	str	r2, [r7, #24]
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	fa92 f2a2 	rbit	r2, r2
 8002a7c:	617a      	str	r2, [r7, #20]
  return result;
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	fab2 f282 	clz	r2, r2
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	f042 0220 	orr.w	r2, r2, #32
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	f002 021f 	and.w	r2, r2, #31
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f202 	lsl.w	r2, r1, r2
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e07a      	b.n	8002b96 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b18 <HAL_RCC_ClockConfig+0x244>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f023 0203 	bic.w	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	491a      	ldr	r1, [pc, #104]	@ (8002b18 <HAL_RCC_ClockConfig+0x244>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab2:	f7fe fb43 	bl	800113c <HAL_GetTick>
 8002ab6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aba:	f7fe fb3f 	bl	800113c <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e062      	b.n	8002b96 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad0:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 020c 	and.w	r2, r3, #12
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d1eb      	bne.n	8002aba <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <HAL_RCC_ClockConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d215      	bcs.n	8002b1c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af0:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <HAL_RCC_ClockConfig+0x240>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 0207 	bic.w	r2, r3, #7
 8002af8:	4906      	ldr	r1, [pc, #24]	@ (8002b14 <HAL_RCC_ClockConfig+0x240>)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <HAL_RCC_ClockConfig+0x240>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d006      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e041      	b.n	8002b96 <HAL_RCC_ClockConfig+0x2c2>
 8002b12:	bf00      	nop
 8002b14:	40022000 	.word	0x40022000
 8002b18:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba0 <HAL_RCC_ClockConfig+0x2cc>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	491a      	ldr	r1, [pc, #104]	@ (8002ba0 <HAL_RCC_ClockConfig+0x2cc>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b46:	4b16      	ldr	r3, [pc, #88]	@ (8002ba0 <HAL_RCC_ClockConfig+0x2cc>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4912      	ldr	r1, [pc, #72]	@ (8002ba0 <HAL_RCC_ClockConfig+0x2cc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b5a:	f000 f829 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002b5e:	4601      	mov	r1, r0
 8002b60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba0 <HAL_RCC_ClockConfig+0x2cc>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b68:	22f0      	movs	r2, #240	@ 0xf0
 8002b6a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	fa92 f2a2 	rbit	r2, r2
 8002b72:	60fa      	str	r2, [r7, #12]
  return result;
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	fab2 f282 	clz	r2, r2
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	40d3      	lsrs	r3, r2
 8002b7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ba4 <HAL_RCC_ClockConfig+0x2d0>)
 8002b80:	5cd3      	ldrb	r3, [r2, r3]
 8002b82:	fa21 f303 	lsr.w	r3, r1, r3
 8002b86:	4a08      	ldr	r2, [pc, #32]	@ (8002ba8 <HAL_RCC_ClockConfig+0x2d4>)
 8002b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b8a:	4b08      	ldr	r3, [pc, #32]	@ (8002bac <HAL_RCC_ClockConfig+0x2d8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fa90 	bl	80010b4 <HAL_InitTick>
  
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3778      	adds	r7, #120	@ 0x78
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	080033f0 	.word	0x080033f0
 8002ba8:	20000090 	.word	0x20000090
 8002bac:	20000094 	.word	0x20000094

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002bca:	4b1e      	ldr	r3, [pc, #120]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d002      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0x30>
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d003      	beq.n	8002be6 <HAL_RCC_GetSysClockFreq+0x36>
 8002bde:	e026      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002be0:	4b19      	ldr	r3, [pc, #100]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002be2:	613b      	str	r3, [r7, #16]
      break;
 8002be4:	e026      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	0c9b      	lsrs	r3, r3, #18
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	4a17      	ldr	r2, [pc, #92]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bf0:	5cd3      	ldrb	r3, [r2, r3]
 8002bf2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002bf4:	4b13      	ldr	r3, [pc, #76]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	4a14      	ldr	r2, [pc, #80]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bfe:	5cd3      	ldrb	r3, [r2, r3]
 8002c00:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	e004      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a0c      	ldr	r2, [pc, #48]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	613b      	str	r3, [r7, #16]
      break;
 8002c2c:	e002      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c30:	613b      	str	r3, [r7, #16]
      break;
 8002c32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c34:	693b      	ldr	r3, [r7, #16]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	007a1200 	.word	0x007a1200
 8002c4c:	08003400 	.word	0x08003400
 8002c50:	08003410 	.word	0x08003410
 8002c54:	003d0900 	.word	0x003d0900

08002c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b092      	sub	sp, #72	@ 0x48
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80d2 	beq.w	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7c:	4b4d      	ldr	r3, [pc, #308]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10e      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c88:	4b4a      	ldr	r3, [pc, #296]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	4a49      	ldr	r2, [pc, #292]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c92:	61d3      	str	r3, [r2, #28]
 8002c94:	4b47      	ldr	r3, [pc, #284]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca6:	4b44      	ldr	r3, [pc, #272]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d118      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb2:	4b41      	ldr	r3, [pc, #260]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a40      	ldr	r2, [pc, #256]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cbc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cbe:	f7fe fa3d 	bl	800113c <HAL_GetTick>
 8002cc2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc6:	f7fe fa39 	bl	800113c <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b64      	cmp	r3, #100	@ 0x64
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e167      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd8:	4b37      	ldr	r3, [pc, #220]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ce4:	4b33      	ldr	r3, [pc, #204]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 8082 	beq.w	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cfe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d07a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d04:	4b2b      	ldr	r3, [pc, #172]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d12:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b25      	ldr	r3, [pc, #148]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2301      	movs	r3, #1
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	461a      	mov	r2, r3
 8002d52:	2300      	movs	r3, #0
 8002d54:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d56:	4a17      	ldr	r2, [pc, #92]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d5a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d049      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7fe f9e9 	bl	800113c <HAL_GetTick>
 8002d6a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	e00a      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6e:	f7fe f9e5 	bl	800113c <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e111      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002d84:	2302      	movs	r3, #2
 8002d86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d90:	2302      	movs	r3, #2
 8002d92:	623b      	str	r3, [r7, #32]
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d108      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002dae:	4b01      	ldr	r3, [pc, #4]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	e00d      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	10908100 	.word	0x10908100
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	4b78      	ldr	r3, [pc, #480]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	613a      	str	r2, [r7, #16]
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	fa92 f2a2 	rbit	r2, r2
 8002dda:	60fa      	str	r2, [r7, #12]
  return result;
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	fab2 f282 	clz	r2, r2
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	f002 021f 	and.w	r2, r2, #31
 8002dee:	2101      	movs	r1, #1
 8002df0:	fa01 f202 	lsl.w	r2, r1, r2
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0b9      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	496a      	ldr	r1, [pc, #424]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e0c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d105      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e14:	4b66      	ldr	r3, [pc, #408]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4a65      	ldr	r2, [pc, #404]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e2c:	4b60      	ldr	r3, [pc, #384]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e30:	f023 0203 	bic.w	r2, r3, #3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	495d      	ldr	r1, [pc, #372]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e4a:	4b59      	ldr	r3, [pc, #356]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	4956      	ldr	r1, [pc, #344]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e68:	4b51      	ldr	r3, [pc, #324]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	494e      	ldr	r1, [pc, #312]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e86:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	f023 0210 	bic.w	r2, r3, #16
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	4947      	ldr	r1, [pc, #284]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ea4:	4b42      	ldr	r3, [pc, #264]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb0:	493f      	ldr	r1, [pc, #252]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	f023 0220 	bic.w	r2, r3, #32
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	4938      	ldr	r1, [pc, #224]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ee0:	4b33      	ldr	r3, [pc, #204]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	4930      	ldr	r1, [pc, #192]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002efe:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	4929      	ldr	r1, [pc, #164]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f1c:	4b24      	ldr	r3, [pc, #144]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f28:	4921      	ldr	r1, [pc, #132]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f46:	491a      	ldr	r1, [pc, #104]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f58:	4b15      	ldr	r3, [pc, #84]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f64:	4912      	ldr	r1, [pc, #72]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f76:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	490b      	ldr	r1, [pc, #44]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f94:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f98:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa0:	4903      	ldr	r1, [pc, #12]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3748      	adds	r7, #72	@ 0x48
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000

08002fb4 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e072      	b.n	80030ac <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fd fdee 	bl	8000bbc <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002ffe:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8003006:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800300c:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8003012:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8003018:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         htsc->Init.MaxCountValue |
 800301e:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         htsc->Init.SynchroPinPolarity |
 8003024:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7b1b      	ldrb	r3, [r3, #12]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d107      	bne.n	8003046 <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003044:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	43d2      	mvns	r2, r2
 800305c:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003076:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681c      	ldr	r4, [r3, #0]
 8003080:	4610      	mov	r0, r2
 8003082:	f000 f90f 	bl	80032a4 <TSC_extract_groups>
 8003086:	4603      	mov	r3, r0
 8003088:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0203 	bic.w	r2, r2, #3
 8003098:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2203      	movs	r2, #3
 80030a0:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd90      	pop	{r4, r7, pc}

080030b4 <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_TSC_Start_IT+0x16>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e04b      	b.n	8003162 <HAL_TSC_Start_IT+0xae>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2202      	movs	r2, #2
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0201 	orr.w	r2, r2, #1
 80030e8:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d108      	bne.n	8003106 <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0202 	orr.w	r2, r2, #2
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	e007      	b.n	8003116 <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0202 	bic.w	r2, r2, #2
 8003114:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2203      	movs	r2, #3
 800311c:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d108      	bne.n	8003138 <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0210 	bic.w	r2, r2, #16
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e007      	b.n	8003148 <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0210 	orr.w	r2, r2, #16
 8003146:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0202 	orr.w	r2, r2, #2
 8003156:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_TSC_GroupGetStatus>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Group status
  */
TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(const TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group status */
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	3310      	adds	r3, #16
 8003186:	2101      	movs	r1, #1
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	401a      	ands	r2, r3
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	3310      	adds	r3, #16
 8003196:	2101      	movs	r1, #1
 8003198:	fa01 f303 	lsl.w	r3, r1, r3
 800319c:	429a      	cmp	r2, r3
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(const TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	685b      	ldr	r3, [r3, #4]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_TSC_IODischarge+0x1a>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e01c      	b.n	800322a <HAL_TSC_IODischarge+0x54>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (choice == ENABLE)
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d108      	bne.n	8003210 <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0210 	bic.w	r2, r2, #16
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e007      	b.n	8003220 <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0210 	orr.w	r2, r2, #16
 800321e:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d103      	bne.n	8003254 <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2201      	movs	r2, #1
 8003252:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b02      	cmp	r3, #2
 8003260:	d10b      	bne.n	800327a <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2202      	movs	r2, #2
 8003268:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2203      	movs	r2, #3
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f80c 	bl	8003290 <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 8003278:	e006      	b.n	8003288 <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fd f860 	bl	8000348 <HAL_TSC_ConvCpltCallback>
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	e011      	b.n	80032da <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	220f      	movs	r2, #15
 80032bc:	409a      	lsls	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d006      	beq.n	80032d4 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 80032c6:	2201      	movs	r2, #1
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	3301      	adds	r3, #1
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b07      	cmp	r3, #7
 80032de:	d9ea      	bls.n	80032b6 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 80032e0:	68fb      	ldr	r3, [r7, #12]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80032f6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80032fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	b29b      	uxth	r3, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	b29b      	uxth	r3, r3
 800330c:	4013      	ands	r3, r2
 800330e:	b29a      	uxth	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <memset>:
 8003360:	4402      	add	r2, r0
 8003362:	4603      	mov	r3, r0
 8003364:	4293      	cmp	r3, r2
 8003366:	d100      	bne.n	800336a <memset+0xa>
 8003368:	4770      	bx	lr
 800336a:	f803 1b01 	strb.w	r1, [r3], #1
 800336e:	e7f9      	b.n	8003364 <memset+0x4>

08003370 <__libc_init_array>:
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	4d0d      	ldr	r5, [pc, #52]	@ (80033a8 <__libc_init_array+0x38>)
 8003374:	4c0d      	ldr	r4, [pc, #52]	@ (80033ac <__libc_init_array+0x3c>)
 8003376:	1b64      	subs	r4, r4, r5
 8003378:	10a4      	asrs	r4, r4, #2
 800337a:	2600      	movs	r6, #0
 800337c:	42a6      	cmp	r6, r4
 800337e:	d109      	bne.n	8003394 <__libc_init_array+0x24>
 8003380:	4d0b      	ldr	r5, [pc, #44]	@ (80033b0 <__libc_init_array+0x40>)
 8003382:	4c0c      	ldr	r4, [pc, #48]	@ (80033b4 <__libc_init_array+0x44>)
 8003384:	f000 f818 	bl	80033b8 <_init>
 8003388:	1b64      	subs	r4, r4, r5
 800338a:	10a4      	asrs	r4, r4, #2
 800338c:	2600      	movs	r6, #0
 800338e:	42a6      	cmp	r6, r4
 8003390:	d105      	bne.n	800339e <__libc_init_array+0x2e>
 8003392:	bd70      	pop	{r4, r5, r6, pc}
 8003394:	f855 3b04 	ldr.w	r3, [r5], #4
 8003398:	4798      	blx	r3
 800339a:	3601      	adds	r6, #1
 800339c:	e7ee      	b.n	800337c <__libc_init_array+0xc>
 800339e:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a2:	4798      	blx	r3
 80033a4:	3601      	adds	r6, #1
 80033a6:	e7f2      	b.n	800338e <__libc_init_array+0x1e>
 80033a8:	08003420 	.word	0x08003420
 80033ac:	08003420 	.word	0x08003420
 80033b0:	08003420 	.word	0x08003420
 80033b4:	08003424 	.word	0x08003424

080033b8 <_init>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	bf00      	nop
 80033bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033be:	bc08      	pop	{r3}
 80033c0:	469e      	mov	lr, r3
 80033c2:	4770      	bx	lr

080033c4 <_fini>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	bf00      	nop
 80033c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ca:	bc08      	pop	{r3}
 80033cc:	469e      	mov	lr, r3
 80033ce:	4770      	bx	lr
